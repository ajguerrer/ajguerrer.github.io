<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Google Testing Blog on Notebook</title>
    <link>https://ajguerrer.github.io/google-testing-blog/</link>
    <description>Recent content in Google Testing Blog on Notebook</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="https://ajguerrer.github.io/google-testing-blog/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>General Notes</title>
      <link>https://ajguerrer.github.io/google-testing-blog/general/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ajguerrer.github.io/google-testing-blog/general/</guid>
      <description>Test Reliability  Smaller tests run faster, are less flakey, and isolate failures. As a general rule of thumb, favor a composition of 70% small, 20% medium, and 10% large tests.1 Test binary size and memory usage, including third-party testing tools, have a strong correlation on whether a test is flaky.2 Beware of using UI testing to verify underlying functionality. In these cases, it is cheaper and more reliable to have smaller tests that break closer to the source of the problem.</description>
    </item>
    
    <item>
      <title>Guide to Writing Testable Code</title>
      <link>https://ajguerrer.github.io/google-testing-blog/testable_code/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ajguerrer.github.io/google-testing-blog/testable_code/</guid>
      <description>Miško Hevery  You may find Miško&#39;s original guide here.
Dependency Injection A testable class is one that can be constructed in isolation or with test double collaborators. Once constructed, they have all the dependencies they need. This is known as Dependency Injection.
Dependencies do not need to be concrete classes. Abstract classes allow testers to leverage inheritance for creating test double collaborators. This is the primary tool in a testers toolkit and the primary benefit Dependency Injection brings.</description>
    </item>
    
    <item>
      <title>James Whittaker</title>
      <link>https://ajguerrer.github.io/google-testing-blog/whittaker/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ajguerrer.github.io/google-testing-blog/whittaker/</guid>
      <description>The Seven Plagues of Software Testing  Aimlessness - Do not test for the sake of testing. Every test should have a goal. Document what works and analyze what doesn&#39;t. Then, share with your colleagues.1 Repetitiveness - Running the same test suite over again without finding new bugs does not mean that there are no bugs. Variation is healthy.2 Amnesia - Chances are the problem your are trying to solve has been solved before.</description>
    </item>
    
    <item>
      <title>Testing on the Toilet</title>
      <link>https://ajguerrer.github.io/google-testing-blog/tott/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ajguerrer.github.io/google-testing-blog/tott/</guid>
      <description>This page contains potable bits of testing best-practices that will keep you riveted to your seat.
Tests Too DRY? Make Them DAMP! December 03, 2019 - original post
Though the DRY (&amp;ldquo;Don&#39;t Repeat Yourself&amp;rdquo;) principle is great for production code, tests don&#39;t test themselves.
class ForumTest : public ::testing::Test { protected: void SetUp() override { for (auto user : users_) { forum_.Register(user); } } Forum forum_; std::vector&amp;lt;User&amp;gt; users_ = {User(&amp;#34;Alice&amp;#34;), User(&amp;#34;Bob&amp;#34;)}; } TEST_F(ForumTest, CanRegisterMultipleUsers) { for (auto user : users_) { EXPECT_TRUE(forum_.</description>
    </item>
    
  </channel>
</rss>