<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
	<title>ajguerrer::blog</title>
	<subtitle>Andrew Guerrero&#x27;s blog.</subtitle>
	<link href="https://ajguerrer.github.io/blog/tott/feed.xml" rel="self" type="application/atom+xml"/>
    <link href="https://ajguerrer.github.io/blog/tott/"/>
	<updated>2022-02-07T00:00:00+00:00</updated>
	<id>https://ajguerrer.github.io/blog/tott/feed.xml</id>
	<entry xml:lang="en">
		<title>Now You&#x27;re Thinking With Functions</title>
		<published>2022-02-07T00:00:00+00:00</published>
		<updated>2022-02-07T00:00:00+00:00</updated>
		<link href="https://ajguerrer.github.io/blog/tott/now-youre-thinking-with-functions/" type="text/html"/>
		<id>https://ajguerrer.github.io/blog/tott/now-youre-thinking-with-functions/</id>
		<content type="html">&lt;p&gt;Creating &lt;code&gt;for&lt;&#x2F;code&gt; loops with the same repeated pattern contributes to maintenance burden.&lt;&#x2F;p&gt;
&lt;blockquote class=&quot;note bad&quot;&gt;
    &lt;div class=&quot;header&quot;&gt;
        &lt;i class=&quot;ri-thumb-down-line ri-lg&quot;&gt;&lt;&#x2F;i&gt;
        
        &lt;p&gt;&lt;strong&gt;Bad&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
        
    &lt;&#x2F;div&gt; 
    &lt;div class=&quot;content&quot;&gt;
        &lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#303136;color:#afb0b6;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;bool&lt;&#x2F;span&gt;&lt;span&gt; every_request_valid = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; Request request : requests)
&lt;&#x2F;span&gt;&lt;span&gt;  {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;IsValid&lt;&#x2F;span&gt;&lt;span&gt;(request))
&lt;&#x2F;span&gt;&lt;span&gt;    {
&lt;&#x2F;span&gt;&lt;span&gt;      every_request_valid = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;break&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(every_request_valid)
&lt;&#x2F;span&gt;&lt;span&gt;  {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#797b86;&quot;&gt;&#x2F;&#x2F; do something
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#303136;color:#afb0b6;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;bool&lt;&#x2F;span&gt;&lt;span&gt; every_user_valid = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; User user : users)
&lt;&#x2F;span&gt;&lt;span&gt;  {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;IsValid&lt;&#x2F;span&gt;&lt;span&gt;(user))
&lt;&#x2F;span&gt;&lt;span&gt;    {
&lt;&#x2F;span&gt;&lt;span&gt;      every_user_valid = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;break&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(every_user_valid)
&lt;&#x2F;span&gt;&lt;span&gt;  {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#797b86;&quot;&gt;&#x2F;&#x2F; do something
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;

    &lt;&#x2F;div&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Using higher-order functions can help reduce duplication and make the code easier to read.&lt;&#x2F;p&gt;
&lt;blockquote class=&quot;note good&quot;&gt;
    &lt;div class=&quot;header&quot;&gt;
        &lt;i class=&quot;ri-thumb-up-line ri-lg&quot;&gt;&lt;&#x2F;i&gt;
        
        &lt;p&gt;&lt;strong&gt;Good&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
        
    &lt;&#x2F;div&gt; 
    &lt;div class=&quot;content&quot;&gt;
        &lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#303136;color:#afb0b6;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(std::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;all_of&lt;&#x2F;span&gt;&lt;span&gt;(requests.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;begin&lt;&#x2F;span&gt;&lt;span&gt;(), requests.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;end&lt;&#x2F;span&gt;&lt;span&gt;(), IsValid))
&lt;&#x2F;span&gt;&lt;span&gt;  {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#797b86;&quot;&gt;&#x2F;&#x2F; do something
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#303136;color:#afb0b6;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(std::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;all_of&lt;&#x2F;span&gt;&lt;span&gt;(users.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;begin&lt;&#x2F;span&gt;&lt;span&gt;(), users.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;end&lt;&#x2F;span&gt;&lt;span&gt;(), IsValid))
&lt;&#x2F;span&gt;&lt;span&gt;  {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#797b86;&quot;&gt;&#x2F;&#x2F; do something
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;

    &lt;&#x2F;div&gt;
&lt;&#x2F;blockquote&gt;&lt;blockquote class=&quot;note info&quot;&gt;
    &lt;div class=&quot;header&quot;&gt;
        &lt;i class=&quot;ri-information-line ri-lg&quot;&gt;&lt;&#x2F;i&gt;
        
        &lt;p&gt;&lt;strong&gt;Note&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
        
    &lt;&#x2F;div&gt; 
    &lt;div class=&quot;content&quot;&gt;
        &lt;p&gt;This is not to say that &lt;code&gt;for&lt;&#x2F;code&gt; loops are considered harmful and should never be used. In each case,
consider the right tool for the job.&lt;&#x2F;p&gt;

    &lt;&#x2F;div&gt;
&lt;&#x2F;blockquote&gt;</content>
	</entry>
	<entry xml:lang="en">
		<title>Separation of Concerns? That&#x27;s a Wrap!</title>
		<published>2020-12-09T00:00:00+00:00</published>
		<updated>2020-12-09T00:00:00+00:00</updated>
		<link href="https://ajguerrer.github.io/blog/tott/separation-of-concerns-thats-a-wrap/" type="text/html"/>
		<id>https://ajguerrer.github.io/blog/tott/separation-of-concerns-thats-a-wrap/</id>
		<content type="html">&lt;p&gt;Combining domain logic with third party API calls makes code that is harder to understand especially
if the API details creep outside of the call site.&lt;&#x2F;p&gt;
&lt;blockquote class=&quot;note bad&quot;&gt;
    &lt;div class=&quot;header&quot;&gt;
        &lt;i class=&quot;ri-thumb-down-line ri-lg&quot;&gt;&lt;&#x2F;i&gt;
        
        &lt;p&gt;&lt;strong&gt;Bad&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
        
    &lt;&#x2F;div&gt; 
    &lt;div class=&quot;content&quot;&gt;
        &lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#303136;color:#afb0b6;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span&gt;absl::StatusOr&amp;lt;speedy_img::Image&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3b8c2;&quot;&gt;GetThumbnails&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    absl::Span&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; speedy_img::Decoder&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;decoders&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    absl::Span&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; std::byte&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;data&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; speedy_img::Options options = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;GetDefaultConvertOptions&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; speedy_img::Decoder decoder : decoders) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; speedy_img::Result decode_result =
&lt;&#x2F;span&gt;&lt;span&gt;        decoder.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;Decode&lt;&#x2F;span&gt;&lt;span&gt;(decoder.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;FormatBytes&lt;&#x2F;span&gt;&lt;span&gt;(data));
&lt;&#x2F;span&gt;&lt;span&gt;    speedy_img::Image image = decode_result.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;GetImage&lt;&#x2F;span&gt;&lt;span&gt;(options);
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    absl::Status result = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;ValidateGoodImage&lt;&#x2F;span&gt;&lt;span&gt;(image);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(result.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;ok&lt;&#x2F;span&gt;&lt;span&gt;()) {
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;absl::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;StatusOr&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;speedy_img::Image&amp;gt;(std::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;move&lt;&#x2F;span&gt;&lt;span&gt;(image));
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;absl::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;InvalidArgumentError&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a8c2a3;&quot;&gt;unable to decode image with any decoder&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;

    &lt;&#x2F;div&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Encapsulate the external API in a wrapper with a readable interface that insulates the API from the
rest of the codebase. &lt;&#x2F;p&gt;
&lt;blockquote class=&quot;note good&quot;&gt;
    &lt;div class=&quot;header&quot;&gt;
        &lt;i class=&quot;ri-thumb-up-line ri-lg&quot;&gt;&lt;&#x2F;i&gt;
        
        &lt;p&gt;&lt;strong&gt;Good&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
        
    &lt;&#x2F;div&gt; 
    &lt;div class=&quot;content&quot;&gt;
        &lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#303136;color:#afb0b6;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span&gt;absl::StatusOr&amp;lt;Image&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3b8c2;&quot;&gt;GetThumbnails&lt;&#x2F;span&gt;&lt;span&gt;(absl::Span&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; ImageDecoder&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;decoders&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;                                    absl::Span&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; std::byte&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;data&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; ImageDecoder decoder : decoders) {
&lt;&#x2F;span&gt;&lt;span&gt;    absl::StatusOr&amp;lt;Image&amp;gt; result = decoder.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;Decode&lt;&#x2F;span&gt;&lt;span&gt;(data);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(result.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;ok&lt;&#x2F;span&gt;&lt;span&gt;()) {
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; result;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;absl::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;InvalidArgumentError&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a8c2a3;&quot;&gt;unable to decode image with any decoder&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;

    &lt;&#x2F;div&gt;
&lt;&#x2F;blockquote&gt;&lt;blockquote class=&quot;note info&quot;&gt;
    &lt;div class=&quot;header&quot;&gt;
        &lt;i class=&quot;ri-information-line ri-lg&quot;&gt;&lt;&#x2F;i&gt;
        
        &lt;p&gt;&lt;strong&gt;Note&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
        
    &lt;&#x2F;div&gt; 
    &lt;div class=&quot;content&quot;&gt;
        &lt;p&gt;Not all external APIs need to be wrapped. For example, the &lt;code&gt;absl&lt;&#x2F;code&gt; library provides fundamental
library types; wrapping the API would not make a clear improvement to the code.&lt;&#x2F;p&gt;

    &lt;&#x2F;div&gt;
&lt;&#x2F;blockquote&gt;</content>
	</entry>
	<entry xml:lang="en">
		<title>Avoid Hardcoding Values for Better Libraries</title>
		<published>2020-08-19T00:00:00+00:00</published>
		<updated>2020-08-19T00:00:00+00:00</updated>
		<link href="https://ajguerrer.github.io/blog/tott/avoid-hardcoding-values-for-better-libraries/" type="text/html"/>
		<id>https://ajguerrer.github.io/blog/tott/avoid-hardcoding-values-for-better-libraries/</id>
		<content type="html">&lt;p&gt;Naming constants is good practice, but they are still hardcoded values that can make library code
less reusable and less predictable.&lt;&#x2F;p&gt;
&lt;blockquote class=&quot;note bad&quot;&gt;
    &lt;div class=&quot;header&quot;&gt;
        &lt;i class=&quot;ri-thumb-down-line ri-lg&quot;&gt;&lt;&#x2F;i&gt;
        
        &lt;p&gt;&lt;strong&gt;Bad&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
        
    &lt;&#x2F;div&gt; 
    &lt;div class=&quot;content&quot;&gt;
        &lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#303136;color:#afb0b6;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;constexpr int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;kThumbnailSizes&lt;&#x2F;span&gt;&lt;span&gt;[] = {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;480&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;576&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;720&lt;&#x2F;span&gt;&lt;span&gt;};
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#797b86;&quot;&gt;&#x2F;&#x2F; Returns thumbnails of various sizes for the given image.
&lt;&#x2F;span&gt;&lt;span&gt;std::vector&amp;lt;Image&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3b8c2;&quot;&gt;GetThumbnails&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; Image&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;image&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;  std::vector&amp;lt;Image&amp;gt; thumbnails;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;const int&lt;&#x2F;span&gt;&lt;span&gt; size : &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;kThumbnailSizes&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    thumbnails.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;push_back&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;ResizeImage&lt;&#x2F;span&gt;&lt;span&gt;(image, size));
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; thumbnails;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;

    &lt;&#x2F;div&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Instead, let the caller decide.&lt;&#x2F;p&gt;
&lt;blockquote class=&quot;note good&quot;&gt;
    &lt;div class=&quot;header&quot;&gt;
        &lt;i class=&quot;ri-thumb-up-line ri-lg&quot;&gt;&lt;&#x2F;i&gt;
        
        &lt;p&gt;&lt;strong&gt;Good&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
        
    &lt;&#x2F;div&gt; 
    &lt;div class=&quot;content&quot;&gt;
        &lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#303136;color:#afb0b6;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#797b86;&quot;&gt;&#x2F;&#x2F; Returns thumbnails of various sizes for the given image.
&lt;&#x2F;span&gt;&lt;span&gt;std::vector&amp;lt;Image&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3b8c2;&quot;&gt;GetThumbnails&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; Image&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;image&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;                                 absl::Span&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;const int&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;sizes&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;  std::vector&amp;lt;Image&amp;gt; thumbnails;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;const int&lt;&#x2F;span&gt;&lt;span&gt; size : sizes) {
&lt;&#x2F;span&gt;&lt;span&gt;    thumbnails.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;push_back&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;ResizeImage&lt;&#x2F;span&gt;&lt;span&gt;(image, size));
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; thumbnails;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#303136;color:#afb0b6;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#797b86;&quot;&gt;&#x2F;&#x2F; Declared in the public header.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;inline constexpr int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;kDefaultThumbnailSizes&lt;&#x2F;span&gt;&lt;span&gt;[] = {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;480&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;576&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;720&lt;&#x2F;span&gt;&lt;span&gt;};
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#797b86;&quot;&gt;&#x2F;&#x2F; Default argument allows the function to be used without specifying a size.
&lt;&#x2F;span&gt;&lt;span&gt;std::vector&amp;lt;Image&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3b8c2;&quot;&gt;GetThumbnails&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; Image&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;image&lt;&#x2F;span&gt;&lt;span&gt;, absl::Span&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;const int&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;sizes &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;kDefaultThumbnailSizes&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;

    &lt;&#x2F;div&gt;
&lt;&#x2F;blockquote&gt;</content>
	</entry>
	<entry xml:lang="en">
		<title>Tests Too DRY? Make Them DAMP!</title>
		<published>2019-12-03T00:00:00+00:00</published>
		<updated>2019-12-03T00:00:00+00:00</updated>
		<link href="https://ajguerrer.github.io/blog/tott/tests-too-dry-make-them-damp/" type="text/html"/>
		<id>https://ajguerrer.github.io/blog/tott/tests-too-dry-make-them-damp/</id>
		<content type="html">&lt;p&gt;Though the DRY (&amp;quot;Don&#x27;t Repeat Yourself&amp;quot;) principle is great for production code, tests don&#x27;t test 
themselves. &lt;&#x2F;p&gt;
&lt;blockquote class=&quot;note bad&quot;&gt;
    &lt;div class=&quot;header&quot;&gt;
        &lt;i class=&quot;ri-thumb-down-line ri-lg&quot;&gt;&lt;&#x2F;i&gt;
        
        &lt;p&gt;&lt;strong&gt;Bad&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
        
    &lt;&#x2F;div&gt; 
    &lt;div class=&quot;content&quot;&gt;
        &lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#303136;color:#afb0b6;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3b3;&quot;&gt;ForumTest &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;public &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3b3;&quot;&gt;::testing::Test &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;protected&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3b8c2;&quot;&gt;SetUp&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;override &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;auto&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt; user &lt;&#x2F;span&gt;&lt;span&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt; users_) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;      forum_.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;Register&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;(user);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;    }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  Forum forum_;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  std::vector&amp;lt;User&amp;gt; users_ &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;User&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a8c2a3;&quot;&gt;Alice&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;User&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a8c2a3;&quot;&gt;Bob&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;)};
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;TEST_F&lt;&#x2F;span&gt;&lt;span&gt;(ForumTest, CanRegisterMultipleUsers) {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;auto&lt;&#x2F;span&gt;&lt;span&gt; user : users_) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;EXPECT_TRUE&lt;&#x2F;span&gt;&lt;span&gt;(forum_.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;HasRegisteredUser&lt;&#x2F;span&gt;&lt;span&gt;(user));
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;

    &lt;&#x2F;div&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Tests should optimize for readability, even at the expense of redundancy. Prefer the DAMP 
(&amp;quot;Descriptive and Meaningful Phrases&amp;quot;) principle. &lt;&#x2F;p&gt;
&lt;blockquote class=&quot;note good&quot;&gt;
    &lt;div class=&quot;header&quot;&gt;
        &lt;i class=&quot;ri-thumb-up-line ri-lg&quot;&gt;&lt;&#x2F;i&gt;
        
        &lt;p&gt;&lt;strong&gt;Good&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
        
    &lt;&#x2F;div&gt; 
    &lt;div class=&quot;content&quot;&gt;
        &lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#303136;color:#afb0b6;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;TEST&lt;&#x2F;span&gt;&lt;span&gt;(ForumTest, CanRegisterMultipleUsers) {
&lt;&#x2F;span&gt;&lt;span&gt;  Forum forum;
&lt;&#x2F;span&gt;&lt;span&gt;  User &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;user1&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a8c2a3;&quot;&gt;Alice&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;  User &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;user2&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a8c2a3;&quot;&gt;Bob&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;  forum.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;Register&lt;&#x2F;span&gt;&lt;span&gt;(user1);
&lt;&#x2F;span&gt;&lt;span&gt;  forum.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;Register&lt;&#x2F;span&gt;&lt;span&gt;(user2);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;EXPECT_TRUE&lt;&#x2F;span&gt;&lt;span&gt;(forum.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;HasRegisteredUser&lt;&#x2F;span&gt;&lt;span&gt;(user1));
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;EXPECT_TRUE&lt;&#x2F;span&gt;&lt;span&gt;(forum.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;HasRegisteredUser&lt;&#x2F;span&gt;&lt;span&gt;(user2));
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;

    &lt;&#x2F;div&gt;
&lt;&#x2F;blockquote&gt;</content>
	</entry>
	<entry xml:lang="en">
		<title>Exercise Service Call Contracts in Tests</title>
		<published>2018-11-27T00:00:00+00:00</published>
		<updated>2018-11-27T00:00:00+00:00</updated>
		<link href="https://ajguerrer.github.io/blog/tott/exercise-service-call-contracts-in-tests/" type="text/html"/>
		<id>https://ajguerrer.github.io/blog/tott/exercise-service-call-contracts-in-tests/</id>
		<content type="html">&lt;p&gt;If the code under test relies on the contract of a service, prefer exercising the service call
instead of mocking it out. Some service owners provide a fake. Otherwise, use a hermetic server.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Make Interfaces Hard to Misuse</title>
		<published>2018-07-25T00:00:00+00:00</published>
		<updated>2018-07-25T00:00:00+00:00</updated>
		<link href="https://ajguerrer.github.io/blog/tott/make-interfaces-hard-to-misuse/" type="text/html"/>
		<id>https://ajguerrer.github.io/blog/tott/make-interfaces-hard-to-misuse/</id>
		<content type="html">&lt;p&gt;Don&#x27;t push the responsibility of maintaining invariants on the caller.&lt;&#x2F;p&gt;
&lt;blockquote class=&quot;note bad&quot;&gt;
    &lt;div class=&quot;header&quot;&gt;
        &lt;i class=&quot;ri-thumb-down-line ri-lg&quot;&gt;&lt;&#x2F;i&gt;
        
        &lt;p&gt;&lt;strong&gt;Bad&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
        
    &lt;&#x2F;div&gt; 
    &lt;div class=&quot;content&quot;&gt;
        &lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#303136;color:#afb0b6;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3b3;&quot;&gt;Vector &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;explicit &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3b8c2;&quot;&gt;Vector&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;num_slots&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3b8c2;&quot;&gt;RemainingSlots&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3b8c2;&quot;&gt;AddSlots&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;num_slots&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3b8c2;&quot;&gt;Insert&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;

    &lt;&#x2F;div&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;In the code above, the caller needs to check &lt;code&gt;RemainingSlots&lt;&#x2F;code&gt;, and if &lt;code&gt;0&lt;&#x2F;code&gt;, &lt;code&gt;AddSlots&lt;&#x2F;code&gt; in order for
&lt;code&gt;Insert&lt;&#x2F;code&gt; to work properly.&lt;&#x2F;p&gt;
&lt;p&gt;Instead, &lt;code&gt;Insert&lt;&#x2F;code&gt; could automatically manage slots.&lt;&#x2F;p&gt;
&lt;blockquote class=&quot;note good&quot;&gt;
    &lt;div class=&quot;header&quot;&gt;
        &lt;i class=&quot;ri-thumb-up-line ri-lg&quot;&gt;&lt;&#x2F;i&gt;
        
        &lt;p&gt;&lt;strong&gt;Good&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
        
    &lt;&#x2F;div&gt; 
    &lt;div class=&quot;content&quot;&gt;
        &lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#303136;color:#afb0b6;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3b3;&quot;&gt;Vector &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;explicit &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3b8c2;&quot;&gt;Vector&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;num_slots&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3b8c2;&quot;&gt;Insert&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;

    &lt;&#x2F;div&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Other signs an interface is hard to use:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Initialize&lt;&#x2F;code&gt; &#x2F; &lt;code&gt;Deitialize&lt;&#x2F;code&gt; functions.&lt;&#x2F;li&gt;
&lt;li&gt;Allowing partially created objects.&lt;&#x2F;li&gt;
&lt;li&gt;Parameters that can have invalid values.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Sometimes it&#x27;s not practical to have a foolproof interface. In those cases rely on static analysis
or documentation.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Only Verify Relevant Method Arguments</title>
		<published>2018-06-26T00:00:00+00:00</published>
		<updated>2018-06-26T00:00:00+00:00</updated>
		<link href="https://ajguerrer.github.io/blog/tott/only-verify-relevant-method-arguments/" type="text/html"/>
		<id>https://ajguerrer.github.io/blog/tott/only-verify-relevant-method-arguments/</id>
		<content type="html">&lt;p&gt;Tests become fragile when they expect exact values on irrelevant arguments.&lt;&#x2F;p&gt;
&lt;blockquote class=&quot;note bad&quot;&gt;
    &lt;div class=&quot;header&quot;&gt;
        &lt;i class=&quot;ri-thumb-down-line ri-lg&quot;&gt;&lt;&#x2F;i&gt;
        
        &lt;p&gt;&lt;strong&gt;Bad&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
        
    &lt;&#x2F;div&gt; 
    &lt;div class=&quot;content&quot;&gt;
        &lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#303136;color:#afb0b6;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;TEST_F&lt;&#x2F;span&gt;&lt;span&gt;(DisplayGreetingTest, ShowSpecialGreetingOnNewYearsDay) {
&lt;&#x2F;span&gt;&lt;span&gt;  fake_clock_.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;SetTime&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;kNewYearsDay&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;  fake_user_.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;SetName&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a8c2a3;&quot;&gt;Fake User&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;EXPECT_CALL&lt;&#x2F;span&gt;&lt;span&gt;(mock_user_prompter_,
&lt;&#x2F;span&gt;&lt;span&gt;              &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;UpdatePrompt&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a8c2a3;&quot;&gt;Hi Fake User! Happy New Year!&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;                           &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;TitleBar&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a8c2a3;&quot;&gt;2018-01-01&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;), PromptStyle::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;kNormal&lt;&#x2F;span&gt;&lt;span&gt;));
&lt;&#x2F;span&gt;&lt;span&gt;  user_greeter_.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;DisplayGreeting&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;

    &lt;&#x2F;div&gt;
&lt;&#x2F;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Only verify one behavior per test.&lt;&#x2F;li&gt;
&lt;li&gt;Only verify arguments that affect the correctness of the specific behavior being tested.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;blockquote class=&quot;note good&quot;&gt;
    &lt;div class=&quot;header&quot;&gt;
        &lt;i class=&quot;ri-thumb-up-line ri-lg&quot;&gt;&lt;&#x2F;i&gt;
        
        &lt;p&gt;&lt;strong&gt;Good&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
        
    &lt;&#x2F;div&gt; 
    &lt;div class=&quot;content&quot;&gt;
        &lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#303136;color:#afb0b6;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;TEST_F&lt;&#x2F;span&gt;&lt;span&gt;(DisplayGreetingTest, ShowSpecialGreetingOnNewYearsDay) {
&lt;&#x2F;span&gt;&lt;span&gt;  fake_clock_.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;SetTime&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;kNewYearsDay&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;EXPECT_CALL&lt;&#x2F;span&gt;&lt;span&gt;(mock_user_prompter_,
&lt;&#x2F;span&gt;&lt;span&gt;              &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;UpdatePrompt&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;HasSubstr&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a8c2a3;&quot;&gt;Happy New Year!&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;), _, _));
&lt;&#x2F;span&gt;&lt;span&gt;  user_greeter_.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;DisplayGreeting&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;TEST_F&lt;&#x2F;span&gt;&lt;span&gt;(DisplayGreetingTest, RenderUserName) {
&lt;&#x2F;span&gt;&lt;span&gt;  fake_user_.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;SetName&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a8c2a3;&quot;&gt;Fake User&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;EXPECT_CALL&lt;&#x2F;span&gt;&lt;span&gt;(mock_user_prompter_, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;UpdatePrompt&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;HasSubstr&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a8c2a3;&quot;&gt;Fake User&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;), _, _));
&lt;&#x2F;span&gt;&lt;span&gt;  user_greeter_.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;DisplayGreeting&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;

    &lt;&#x2F;div&gt;
&lt;&#x2F;blockquote&gt;</content>
	</entry>
	<entry xml:lang="en">
		<title>Keep Tests Focused</title>
		<published>2018-06-11T00:00:00+00:00</published>
		<updated>2018-06-11T00:00:00+00:00</updated>
		<link href="https://ajguerrer.github.io/blog/tott/keep-tests-focused/" type="text/html"/>
		<id>https://ajguerrer.github.io/blog/tott/keep-tests-focused/</id>
		<content type="html">&lt;p&gt;Testing too many scenarios at once can make it difficult to understand test and reason about the
failure.&lt;&#x2F;p&gt;
&lt;blockquote class=&quot;note bad&quot;&gt;
    &lt;div class=&quot;header&quot;&gt;
        &lt;i class=&quot;ri-thumb-down-line ri-lg&quot;&gt;&lt;&#x2F;i&gt;
        
        &lt;p&gt;&lt;strong&gt;Bad&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
        
    &lt;&#x2F;div&gt; 
    &lt;div class=&quot;content&quot;&gt;
        &lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#303136;color:#afb0b6;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;TEST_F&lt;&#x2F;span&gt;&lt;span&gt;(BankAccountTest, WithdrawFromAccount) {
&lt;&#x2F;span&gt;&lt;span&gt;  Transaction transaction = account_.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;Deposit&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;Usd&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;));
&lt;&#x2F;span&gt;&lt;span&gt;  clock_.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;AdvanceTime&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;kMinTimeToSettle&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;  account_.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;Settle&lt;&#x2F;span&gt;&lt;span&gt;(transaction);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;EXPECT_THAT&lt;&#x2F;span&gt;&lt;span&gt;(account_.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;Withdraw&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;Usd&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;)), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;IsOk&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;EXPECT_THAT&lt;&#x2F;span&gt;&lt;span&gt;(account_.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;Withdraw&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;USd&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;)), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;IsRejected&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;  account_.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;SetOverdraftLimit&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;Usd&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;));
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;EXPECT_THAT&lt;&#x2F;span&gt;&lt;span&gt;(account_.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;Withdraw&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;Usd&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;)), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;IsOk&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;

    &lt;&#x2F;div&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Break up each scenario into its own test.&lt;&#x2F;p&gt;
&lt;blockquote class=&quot;note good&quot;&gt;
    &lt;div class=&quot;header&quot;&gt;
        &lt;i class=&quot;ri-thumb-up-line ri-lg&quot;&gt;&lt;&#x2F;i&gt;
        
        &lt;p&gt;&lt;strong&gt;Good&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
        
    &lt;&#x2F;div&gt; 
    &lt;div class=&quot;content&quot;&gt;
        &lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#303136;color:#afb0b6;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;TEST_F&lt;&#x2F;span&gt;&lt;span&gt;(BankAccountTest, CanWithdrawWithinBalance) {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;DepositAndSettle&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;Usd&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;));
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;EXPECT_THAT&lt;&#x2F;span&gt;&lt;span&gt;(account_.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;Withdraw&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;Usd&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;)), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;IsOk&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;TEST_F&lt;&#x2F;span&gt;&lt;span&gt;(BankAccountTest, CannotOverdraw) {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;DepositAndSettle&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;Usd&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;));
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;EXPECT_THAT&lt;&#x2F;span&gt;&lt;span&gt;(account_.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;Withdraw&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;Usd&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;6&lt;&#x2F;span&gt;&lt;span&gt;)), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;IsRejected&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;TEST_F&lt;&#x2F;span&gt;&lt;span&gt;(BankAccountTest, CanOverdrawUpToOverdraftLimit) {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;DepositAndSettle&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;Usd&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;));
&lt;&#x2F;span&gt;&lt;span&gt;  account_.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;SetOverdraftLimit&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;Usd&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;));
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;EXPECT_THAT&lt;&#x2F;span&gt;&lt;span&gt;(account_.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;Withdraw&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;Usd&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;6&lt;&#x2F;span&gt;&lt;span&gt;)), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;IsOk&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;

    &lt;&#x2F;div&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Notice how each test only verifies the output of one call per test.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Understanding Code in Review</title>
		<published>2018-05-01T00:00:00+00:00</published>
		<updated>2018-05-01T00:00:00+00:00</updated>
		<link href="https://ajguerrer.github.io/blog/tott/understanding-code-in-review/" type="text/html"/>
		<id>https://ajguerrer.github.io/blog/tott/understanding-code-in-review/</id>
		<content type="html">&lt;p&gt;If you find yourself reviewing code that is difficult to understand, don&#x27;t waste time reviewing it.&lt;&#x2F;p&gt;
&lt;blockquote class=&quot;note bad&quot;&gt;
    &lt;div class=&quot;header&quot;&gt;
        &lt;i class=&quot;ri-thumb-down-line ri-lg&quot;&gt;&lt;&#x2F;i&gt;
        
        &lt;p&gt;&lt;strong&gt;Bad&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
        
    &lt;&#x2F;div&gt; 
    &lt;div class=&quot;content&quot;&gt;
        &lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#303136;color:#afb0b6;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;bool &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3b8c2;&quot;&gt;IsOkay&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;n&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;bool&lt;&#x2F;span&gt;&lt;span&gt; f = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; i = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;; i &amp;lt;= n; ++i) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(n % i == &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;) f = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;!f;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;

    &lt;&#x2F;div&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Ask for it to be clarified.&lt;&#x2F;p&gt;
&lt;blockquote class=&quot;note good&quot;&gt;
    &lt;div class=&quot;header&quot;&gt;
        &lt;i class=&quot;ri-thumb-up-line ri-lg&quot;&gt;&lt;&#x2F;i&gt;
        
        &lt;p&gt;&lt;strong&gt;Good&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
        
    &lt;&#x2F;div&gt; 
    &lt;div class=&quot;content&quot;&gt;
        &lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#303136;color:#afb0b6;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;bool &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3b8c2;&quot;&gt;IsPrime&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;n&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; divisor = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;; divisor &amp;lt;= n &#x2F; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;; ++divisor) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(n % divisor == &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;

    &lt;&#x2F;div&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Clarifying code often results in noticing improvements.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Cleanly Create Test Data</title>
		<published>2018-02-20T00:00:00+00:00</published>
		<updated>2018-02-20T00:00:00+00:00</updated>
		<link href="https://ajguerrer.github.io/blog/tott/cleanly-create-test-data/" type="text/html"/>
		<id>https://ajguerrer.github.io/blog/tott/cleanly-create-test-data/</id>
		<content type="html">&lt;p&gt;Helper methods make it easier to create test data, but they don&#x27;t age well.&lt;&#x2F;p&gt;
&lt;blockquote class=&quot;note bad&quot;&gt;
    &lt;div class=&quot;header&quot;&gt;
        &lt;i class=&quot;ri-thumb-down-line ri-lg&quot;&gt;&lt;&#x2F;i&gt;
        
        &lt;p&gt;&lt;strong&gt;Bad&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
        
    &lt;&#x2F;div&gt; 
    &lt;div class=&quot;content&quot;&gt;
        &lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#303136;color:#afb0b6;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#797b86;&quot;&gt;&#x2F;&#x2F; Starts simple
&lt;&#x2F;span&gt;&lt;span&gt;Company company = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;NewCompany&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;kPublic&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#797b86;&quot;&gt;&#x2F;&#x2F; But soon acquires more parameters
&lt;&#x2F;span&gt;&lt;span&gt;Company small = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;NewCompany&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;nullptr&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;kPublic&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;Company privately_owned = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;NewCompany&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;nullptr&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;kPrivate&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;Company bankrupt = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;NewCompany&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;kPastDate&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;kPublic&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#797b86;&quot;&gt;&#x2F;&#x2F; Or more methods
&lt;&#x2F;span&gt;&lt;span&gt;Company small = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;NewCompanyWithEmployeesAndBoardMembers&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;kPublic&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;Company privately_owned = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;NewCompanyWithType&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;kPrivate&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;Company bankrupt = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;NewCompanyWithBankruptcyDate&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;kPastDate&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;kPublic&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;

    &lt;&#x2F;div&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Try the builder pattern.&lt;&#x2F;p&gt;
&lt;blockquote class=&quot;note good&quot;&gt;
    &lt;div class=&quot;header&quot;&gt;
        &lt;i class=&quot;ri-thumb-up-line ri-lg&quot;&gt;&lt;&#x2F;i&gt;
        
        &lt;p&gt;&lt;strong&gt;Good&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
        
    &lt;&#x2F;div&gt; 
    &lt;div class=&quot;content&quot;&gt;
        &lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#303136;color:#afb0b6;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span&gt;Company small = Company::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;Builder&lt;&#x2F;span&gt;&lt;span&gt;{}.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;SetEmployees&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;SetBoardMembers&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;Build&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;Company privately_owned = Company::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;Builder&lt;&#x2F;span&gt;&lt;span&gt;{}.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;SetType&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;kPrivate&lt;&#x2F;span&gt;&lt;span&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;Build&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;Company bankrupt = Company::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;Builder&lt;&#x2F;span&gt;&lt;span&gt;{}.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;SetBankruptcyDate&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;kPastDate&lt;&#x2F;span&gt;&lt;span&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;Build&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;Company default_company = Company::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;Builder&lt;&#x2F;span&gt;&lt;span&gt;{}.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;Build&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;Company::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3b3;&quot;&gt;Builder &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;public&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  Builder&lt;&#x2F;span&gt;&lt;span&gt;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3b8c2;&quot;&gt;SetEmployees&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;    employees_ &lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt; n;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  Builder&lt;&#x2F;span&gt;&lt;span&gt;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3b8c2;&quot;&gt;SetBoardMembers&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;    board_members_ &lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt; n;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  Builder&lt;&#x2F;span&gt;&lt;span&gt;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3b8c2;&quot;&gt;SetBankruptcyDate&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;(BankruptcyDate &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;d&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;    date_ &lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt; d;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  Builder&lt;&#x2F;span&gt;&lt;span&gt;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3b8c2;&quot;&gt;SetType&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;(Type &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;t&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;    type_ &lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt; t;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  Company &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3b8c2;&quot;&gt;Build&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;Company&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;(employees_, board_members_, date_, type_);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;private&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt; employees_ &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt; board_members_ &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  BankruptcyDate date_ &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;kBeforeDate&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  Type type_ &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;kPublic&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;

    &lt;&#x2F;div&gt;
&lt;&#x2F;blockquote&gt;</content>
	</entry>
	<entry xml:lang="en">
		<title>Only Expect State-Changing Method Calls</title>
		<published>2017-12-11T00:00:00+00:00</published>
		<updated>2017-12-11T00:00:00+00:00</updated>
		<link href="https://ajguerrer.github.io/blog/tott/only-expect-state-changing-method-calls/" type="text/html"/>
		<id>https://ajguerrer.github.io/blog/tott/only-expect-state-changing-method-calls/</id>
		<content type="html">&lt;p&gt;Expecting calls to methods that don&#x27;t change state can make a test brittle, less readable, and
provide a false sense of security.&lt;&#x2F;p&gt;
&lt;blockquote class=&quot;note bad&quot;&gt;
    &lt;div class=&quot;header&quot;&gt;
        &lt;i class=&quot;ri-thumb-down-line ri-lg&quot;&gt;&lt;&#x2F;i&gt;
        
        &lt;p&gt;&lt;strong&gt;Bad&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
        
    &lt;&#x2F;div&gt; 
    &lt;div class=&quot;content&quot;&gt;
        &lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#303136;color:#afb0b6;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;TEST&lt;&#x2F;span&gt;&lt;span&gt;(UserAuthorizer, AddPermissionToDatabase) {
&lt;&#x2F;span&gt;&lt;span&gt;  UserAuthorizer &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;user_authorizer&lt;&#x2F;span&gt;&lt;span&gt;(mock_user_service_, mock_permission_db_);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;EXPECT_CALL&lt;&#x2F;span&gt;&lt;span&gt;(mock_user_service_, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;IsUserActive&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;kUser&lt;&#x2F;span&gt;&lt;span&gt;));
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;EXPECT_CALL&lt;&#x2F;span&gt;&lt;span&gt;(mock_permission_db_, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;GetPermission&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;kUser&lt;&#x2F;span&gt;&lt;span&gt;));
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;EXPECT_CALL&lt;&#x2F;span&gt;&lt;span&gt;(mock_permission_db_, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;IsValidPermission&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;kReadAccess&lt;&#x2F;span&gt;&lt;span&gt;));
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;EXPECT_CALL&lt;&#x2F;span&gt;&lt;span&gt;(mock_permission_db_, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;AddPermission&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;kUser&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;kReadAccess&lt;&#x2F;span&gt;&lt;span&gt;));
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  user_authorizer.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;GrantPermission&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;kUser&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;kReadAccess&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;

    &lt;&#x2F;div&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;It is fine, however, to use non-state-changing methods for simulating test conditions.&lt;&#x2F;p&gt;
&lt;blockquote class=&quot;note good&quot;&gt;
    &lt;div class=&quot;header&quot;&gt;
        &lt;i class=&quot;ri-thumb-up-line ri-lg&quot;&gt;&lt;&#x2F;i&gt;
        
        &lt;p&gt;&lt;strong&gt;Good&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
        
    &lt;&#x2F;div&gt; 
    &lt;div class=&quot;content&quot;&gt;
        &lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#303136;color:#afb0b6;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;ON_CALL&lt;&#x2F;span&gt;&lt;span&gt;(mock_user_service_, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;IsUserActive&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;kUser&lt;&#x2F;span&gt;&lt;span&gt;)).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;WillByDefault&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;Return&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;));
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;

    &lt;&#x2F;div&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;With unnecessary &lt;code&gt;EXPECT_CALL&lt;&#x2F;code&gt;s removed, the test becomes:&lt;&#x2F;p&gt;
&lt;blockquote class=&quot;note good&quot;&gt;
    &lt;div class=&quot;header&quot;&gt;
        &lt;i class=&quot;ri-thumb-up-line ri-lg&quot;&gt;&lt;&#x2F;i&gt;
        
        &lt;p&gt;&lt;strong&gt;Good&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
        
    &lt;&#x2F;div&gt; 
    &lt;div class=&quot;content&quot;&gt;
        &lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#303136;color:#afb0b6;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;Test&lt;&#x2F;span&gt;&lt;span&gt;(UserAuthorizer, AddPermissionToDatabase) {
&lt;&#x2F;span&gt;&lt;span&gt;  UserAuthorizer &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;user_authorizer&lt;&#x2F;span&gt;&lt;span&gt;(mock_user_service_, mock_permission_db_);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;EXPECT_CALL&lt;&#x2F;span&gt;&lt;span&gt;(mock_permission_db_, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;AddPermission&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;kUser&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;kReadAccess&lt;&#x2F;span&gt;&lt;span&gt;));
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  user_authorizer.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;GrantPermission&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;kUser&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;kReadAccess&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;

    &lt;&#x2F;div&gt;
&lt;&#x2F;blockquote&gt;</content>
	</entry>
	<entry xml:lang="en">
		<title>Obsessed With Primitives?</title>
		<published>2017-11-14T00:00:00+00:00</published>
		<updated>2017-11-14T00:00:00+00:00</updated>
		<link href="https://ajguerrer.github.io/blog/tott/obsessed-with-primitives/" type="text/html"/>
		<id>https://ajguerrer.github.io/blog/tott/obsessed-with-primitives/</id>
		<content type="html">&lt;p&gt;Code that relies too heavily on primitive types instead of custom abstractions can be hard to
understand and maintain.&lt;&#x2F;p&gt;
&lt;blockquote class=&quot;note bad&quot;&gt;
    &lt;div class=&quot;header&quot;&gt;
        &lt;i class=&quot;ri-thumb-down-line ri-lg&quot;&gt;&lt;&#x2F;i&gt;
        
        &lt;p&gt;&lt;strong&gt;Bad&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
        
    &lt;&#x2F;div&gt; 
    &lt;div class=&quot;content&quot;&gt;
        &lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#303136;color:#afb0b6;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span&gt;std::vector&amp;lt;std::pair&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&amp;gt; polygon = {
&lt;&#x2F;span&gt;&lt;span&gt;    std::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;make_pair&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;), std::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;make_pair&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;), std::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;make_pair&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;)};
&lt;&#x2F;span&gt;&lt;span&gt;std::pair&amp;lt;std::pair&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;, std::pair&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&amp;gt; bounding_box =
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;GetBoundingBox&lt;&#x2F;span&gt;&lt;span&gt;(polygon);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; area = (bounding_box.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;second&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;first &lt;&#x2F;span&gt;&lt;span&gt;- bounding_box.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;first&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;first&lt;&#x2F;span&gt;&lt;span&gt;) *
&lt;&#x2F;span&gt;&lt;span&gt;           (bounding_box.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;second&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;second &lt;&#x2F;span&gt;&lt;span&gt;- bounding_box.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;first&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;second&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;

    &lt;&#x2F;div&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Make higher-level abstractions.&lt;&#x2F;p&gt;
&lt;blockquote class=&quot;note good&quot;&gt;
    &lt;div class=&quot;header&quot;&gt;
        &lt;i class=&quot;ri-thumb-up-line ri-lg&quot;&gt;&lt;&#x2F;i&gt;
        
        &lt;p&gt;&lt;strong&gt;Good&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
        
    &lt;&#x2F;div&gt; 
    &lt;div class=&quot;content&quot;&gt;
        &lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#303136;color:#afb0b6;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span&gt;Polygon polygon = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;RightTriangle&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; area = polygon.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;GetBoundingBox&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;GetArea&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;

    &lt;&#x2F;div&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;This advice doesn&#x27;t just apply to primitives and The STL. It&#x27;s possible for any type to be too
primitive for the job.&lt;&#x2F;p&gt;
&lt;blockquote class=&quot;note good&quot;&gt;
    &lt;div class=&quot;header&quot;&gt;
        &lt;i class=&quot;ri-thumb-up-line ri-lg&quot;&gt;&lt;&#x2F;i&gt;
        
        &lt;p&gt;&lt;strong&gt;Good&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
        
    &lt;&#x2F;div&gt; 
    &lt;div class=&quot;content&quot;&gt;
        &lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#303136;color:#afb0b6;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span&gt;Polygon polygon = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;IsoscelesRightTriangle&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; area = polygon.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;GetBoundingBox&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;GetArea&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;

    &lt;&#x2F;div&gt;
&lt;&#x2F;blockquote&gt;</content>
	</entry>
	<entry xml:lang="en">
		<title>IdentifierNamingPostForWorldWideWebBlog</title>
		<published>2017-10-23T00:00:00+00:00</published>
		<updated>2017-10-23T00:00:00+00:00</updated>
		<link href="https://ajguerrer.github.io/blog/tott/identifiernamingpostforworldwidewebblog/" type="text/html"/>
		<id>https://ajguerrer.github.io/blog/tott/identifiernamingpostforworldwidewebblog/</id>
		<content type="html">&lt;p&gt;Names should be clear and precise.&lt;&#x2F;p&gt;
&lt;p&gt;Don&#x27;t mention the type in the variable name. It&#x27;s OK for the name and the type match.&lt;&#x2F;p&gt;
&lt;blockquote class=&quot;note bad&quot;&gt;
    &lt;div class=&quot;header&quot;&gt;
        &lt;i class=&quot;ri-thumb-down-line ri-lg&quot;&gt;&lt;&#x2F;i&gt;
        
        &lt;p&gt;&lt;strong&gt;Bad&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
        
    &lt;&#x2F;div&gt; 
    &lt;div class=&quot;content&quot;&gt;
        &lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#303136;color:#afb0b6;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span&gt;std::string name_string;
&lt;&#x2F;span&gt;&lt;span&gt;std::list&amp;lt;std::time_t&amp;gt; holiday_date_list;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;

    &lt;&#x2F;div&gt;
&lt;&#x2F;blockquote&gt;&lt;blockquote class=&quot;note good&quot;&gt;
    &lt;div class=&quot;header&quot;&gt;
        &lt;i class=&quot;ri-thumb-up-line ri-lg&quot;&gt;&lt;&#x2F;i&gt;
        
        &lt;p&gt;&lt;strong&gt;Good&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
        
    &lt;&#x2F;div&gt; 
    &lt;div class=&quot;content&quot;&gt;
        &lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#303136;color:#afb0b6;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span&gt;std::string name;
&lt;&#x2F;span&gt;&lt;span&gt;std::list&amp;lt;std::time_t&amp;gt; holidays;
&lt;&#x2F;span&gt;&lt;span&gt;Payments payments;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;

    &lt;&#x2F;div&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Don&#x27;t use overly specific names. Get more specific if there is a need for disambiguation.&lt;&#x2F;p&gt;
&lt;blockquote class=&quot;note bad&quot;&gt;
    &lt;div class=&quot;header&quot;&gt;
        &lt;i class=&quot;ri-thumb-down-line ri-lg&quot;&gt;&lt;&#x2F;i&gt;
        
        &lt;p&gt;&lt;strong&gt;Bad&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
        
    &lt;&#x2F;div&gt; 
    &lt;div class=&quot;content&quot;&gt;
        &lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#303136;color:#afb0b6;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span&gt;Monster final_battle_most_dangerous_boss_monster;
&lt;&#x2F;span&gt;&lt;span&gt;Payments non_typical_monthly_payments;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;

    &lt;&#x2F;div&gt;
&lt;&#x2F;blockquote&gt;&lt;blockquote class=&quot;note good&quot;&gt;
    &lt;div class=&quot;header&quot;&gt;
        &lt;i class=&quot;ri-thumb-up-line ri-lg&quot;&gt;&lt;&#x2F;i&gt;
        
        &lt;p&gt;&lt;strong&gt;Good&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
        
    &lt;&#x2F;div&gt; 
    &lt;div class=&quot;content&quot;&gt;
        &lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#303136;color:#afb0b6;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span&gt;Monster boss;
&lt;&#x2F;span&gt;&lt;span&gt;Payments payments;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;

    &lt;&#x2F;div&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Do not repeat context.&lt;&#x2F;p&gt;
&lt;blockquote class=&quot;note bad&quot;&gt;
    &lt;div class=&quot;header&quot;&gt;
        &lt;i class=&quot;ri-thumb-down-line ri-lg&quot;&gt;&lt;&#x2F;i&gt;
        
        &lt;p&gt;&lt;strong&gt;Bad&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
        
    &lt;&#x2F;div&gt; 
    &lt;div class=&quot;content&quot;&gt;
        &lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#303136;color:#afb0b6;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3b3;&quot;&gt;AnnualHolidaySale &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;bool &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3b8c2;&quot;&gt;PromoteHolidaySale&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt; annual_sale_rebate_;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;

    &lt;&#x2F;div&gt;
&lt;&#x2F;blockquote&gt;&lt;blockquote class=&quot;note good&quot;&gt;
    &lt;div class=&quot;header&quot;&gt;
        &lt;i class=&quot;ri-thumb-up-line ri-lg&quot;&gt;&lt;&#x2F;i&gt;
        
        &lt;p&gt;&lt;strong&gt;Good&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
        
    &lt;&#x2F;div&gt; 
    &lt;div class=&quot;content&quot;&gt;
        &lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#303136;color:#afb0b6;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3b3;&quot;&gt;AnnualHolidaySale &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;bool &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3b8c2;&quot;&gt;Promote&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt; rebate_;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;

    &lt;&#x2F;div&gt;
&lt;&#x2F;blockquote&gt;</content>
	</entry>
	<entry xml:lang="en">
		<title>To Comment or Not to Comment</title>
		<published>2017-07-17T00:00:00+00:00</published>
		<updated>2017-07-17T00:00:00+00:00</updated>
		<link href="https://ajguerrer.github.io/blog/tott/to-comment-or-not-to-comment/" type="text/html"/>
		<id>https://ajguerrer.github.io/blog/tott/to-comment-or-not-to-comment/</id>
		<content type="html">&lt;p&gt;Comments are not always helpful.&lt;&#x2F;p&gt;
&lt;blockquote class=&quot;note bad&quot;&gt;
    &lt;div class=&quot;header&quot;&gt;
        &lt;i class=&quot;ri-thumb-down-line ri-lg&quot;&gt;&lt;&#x2F;i&gt;
        
        &lt;p&gt;&lt;strong&gt;Bad&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
        
    &lt;&#x2F;div&gt; 
    &lt;div class=&quot;content&quot;&gt;
        &lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#303136;color:#afb0b6;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#797b86;&quot;&gt;&#x2F;&#x2F; Subtract discount from final price.
&lt;&#x2F;span&gt;&lt;span&gt;final_price = (num_items * item_price) -
&lt;&#x2F;span&gt;&lt;span&gt;              std::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3b8c2;&quot;&gt;min&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;num_items&lt;&#x2F;span&gt;&lt;span&gt;) * item_price *  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;0.1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#797b86;&quot;&gt;&#x2F;&#x2F; Filter offensive words.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(std::string word : words) { ... }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; width = ...; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#797b86;&quot;&gt;&#x2F;&#x2F; Width in pixels.
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#797b86;&quot;&gt;&#x2F;&#x2F; Safe since height is always &amp;gt; 0.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; width &#x2F; height;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;

    &lt;&#x2F;div&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;It&#x27;s often better to make your code self-explanatory.&lt;&#x2F;p&gt;
&lt;blockquote class=&quot;note good&quot;&gt;
    &lt;div class=&quot;header&quot;&gt;
        &lt;i class=&quot;ri-thumb-up-line ri-lg&quot;&gt;&lt;&#x2F;i&gt;
        
        &lt;p&gt;&lt;strong&gt;Good&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
        
    &lt;&#x2F;div&gt; 
    &lt;div class=&quot;content&quot;&gt;
        &lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#303136;color:#afb0b6;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span&gt;price = num_items * item_price;
&lt;&#x2F;span&gt;&lt;span&gt;discount = std::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;min&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;, num_items) * item_price * &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;0.1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;final_price = price - discount;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;FilterOffensiveWords&lt;&#x2F;span&gt;&lt;span&gt;(words);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;Pixels width = ...;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;CheckArgument&lt;&#x2F;span&gt;&lt;span&gt;(height &amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; width &#x2F; height;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;

    &lt;&#x2F;div&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Avoid using comments to explain &lt;em&gt;what&lt;&#x2F;em&gt; code does. Use comments to explain &lt;em&gt;why&lt;&#x2F;em&gt; code does something.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Too Many Comments on Your Code Reviews?</title>
		<published>2017-06-19T00:00:00+00:00</published>
		<updated>2017-06-19T00:00:00+00:00</updated>
		<link href="https://ajguerrer.github.io/blog/tott/too-many-comments-on-your-code-reviews/" type="text/html"/>
		<id>https://ajguerrer.github.io/blog/tott/too-many-comments-on-your-code-reviews/</id>
		<content type="html">&lt;p&gt;Before you send out the code review:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Review your own code first.&lt;&#x2F;li&gt;
&lt;li&gt;Discuss with colleagues.&lt;&#x2F;li&gt;
&lt;li&gt;Make bite-sized reviews.&lt;&#x2F;li&gt;
&lt;li&gt;Add comments to the code if necessary.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;When addressing code review comments:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Review your code after addressing non-trivial comments.&lt;&#x2F;li&gt;
&lt;li&gt;Understand the reviews thought process.&lt;&#x2F;li&gt;
&lt;li&gt;Answer questions in the code.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Reduce Nesting, Reduce Complexity</title>
		<published>2017-06-15T00:00:00+00:00</published>
		<updated>2017-06-15T00:00:00+00:00</updated>
		<link href="https://ajguerrer.github.io/blog/tott/reduce-nesting-reduce-complexity/" type="text/html"/>
		<id>https://ajguerrer.github.io/blog/tott/reduce-nesting-reduce-complexity/</id>
		<content type="html">&lt;p&gt;Deeply nested code is error-prone and hurts readability.&lt;&#x2F;p&gt;
&lt;blockquote class=&quot;note bad&quot;&gt;
    &lt;div class=&quot;header&quot;&gt;
        &lt;i class=&quot;ri-thumb-down-line ri-lg&quot;&gt;&lt;&#x2F;i&gt;
        
        &lt;p&gt;&lt;strong&gt;Bad&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
        
    &lt;&#x2F;div&gt; 
    &lt;div class=&quot;content&quot;&gt;
        &lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#303136;color:#afb0b6;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span&gt;Response response = server.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;Call&lt;&#x2F;span&gt;&lt;span&gt;(request);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(response.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;GetStatus&lt;&#x2F;span&gt;&lt;span&gt;() == Status::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;kOk&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;IsAuthorized&lt;&#x2F;span&gt;&lt;span&gt;(response.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;GetUser&lt;&#x2F;span&gt;&lt;span&gt;())) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(response.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;GetEnc&lt;&#x2F;span&gt;&lt;span&gt;() == &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a8c2a3;&quot;&gt;utf-8&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;) {
&lt;&#x2F;span&gt;&lt;span&gt;      std::vector&amp;lt;Row&amp;gt; rows = response.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;GetRows&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(!rows.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;empty&lt;&#x2F;span&gt;&lt;span&gt;()) {
&lt;&#x2F;span&gt;&lt;span&gt;        avg = std::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;accumulate&lt;&#x2F;span&gt;&lt;span&gt;(rows.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;begin&lt;&#x2F;span&gt;&lt;span&gt;(), rows.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;end&lt;&#x2F;span&gt;&lt;span&gt;(), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, ParseRow) &#x2F; 
&lt;&#x2F;span&gt;&lt;span&gt;              rows.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;size&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; avg;
&lt;&#x2F;span&gt;&lt;span&gt;      } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;throw &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;EmptyException&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;    } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;throw &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;AuthException&lt;&#x2F;span&gt;&lt;span&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a8c2a3;&quot;&gt;unauthorized&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;);
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;  } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;throw &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;ValueException&lt;&#x2F;span&gt;&lt;span&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a8c2a3;&quot;&gt;wrong encoding&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;);
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;throw &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;RpcException&lt;&#x2F;span&gt;&lt;span&gt;(response.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;GetStatus&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;

    &lt;&#x2F;div&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;The code above could be refactored to use guard clauses.&lt;&#x2F;p&gt;
&lt;blockquote class=&quot;note good&quot;&gt;
    &lt;div class=&quot;header&quot;&gt;
        &lt;i class=&quot;ri-thumb-up-line ri-lg&quot;&gt;&lt;&#x2F;i&gt;
        
        &lt;p&gt;&lt;strong&gt;Good&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
        
    &lt;&#x2F;div&gt; 
    &lt;div class=&quot;content&quot;&gt;
        &lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#303136;color:#afb0b6;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span&gt;Response response = server.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;Call&lt;&#x2F;span&gt;&lt;span&gt;(request);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(response.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;GetStatus&lt;&#x2F;span&gt;&lt;span&gt;() != Status::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;kOk&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;throw &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;RpcException&lt;&#x2F;span&gt;&lt;span&gt;(response.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;GetStatus&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;IsAuthorized&lt;&#x2F;span&gt;&lt;span&gt;(response.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;GetUser&lt;&#x2F;span&gt;&lt;span&gt;())) {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;throw &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;ValueException&lt;&#x2F;span&gt;&lt;span&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a8c2a3;&quot;&gt;wrong encoding&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(response.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;GetEnc&lt;&#x2F;span&gt;&lt;span&gt;() != &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a8c2a3;&quot;&gt;utf-8&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;) {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;throw &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;AuthException&lt;&#x2F;span&gt;&lt;span&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a8c2a3;&quot;&gt;unauthorized&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;std::vector&amp;lt;Row&amp;gt; rows = response.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;GetRows&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(rows.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;empty&lt;&#x2F;span&gt;&lt;span&gt;()) {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;throw &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;EmptyException&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;avg = std::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;accumulate&lt;&#x2F;span&gt;&lt;span&gt;(rows.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;begin&lt;&#x2F;span&gt;&lt;span&gt;(), rows.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;end&lt;&#x2F;span&gt;&lt;span&gt;(), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, ParseRow) &#x2F; rows.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;size&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; avg;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;

    &lt;&#x2F;div&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Can you spot the bug now?&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Keep Cause and Effect Clear</title>
		<published>2017-01-31T00:00:00+00:00</published>
		<updated>2017-01-31T00:00:00+00:00</updated>
		<link href="https://ajguerrer.github.io/blog/tott/keep-cause-and-effect-clear/" type="text/html"/>
		<id>https://ajguerrer.github.io/blog/tott/keep-cause-and-effect-clear/</id>
		<content type="html">&lt;p&gt;It&#x27;s difficult to reason about a test when the cause is hidden far away from the effect.&lt;&#x2F;p&gt;
&lt;blockquote class=&quot;note bad&quot;&gt;
    &lt;div class=&quot;header&quot;&gt;
        &lt;i class=&quot;ri-thumb-down-line ri-lg&quot;&gt;&lt;&#x2F;i&gt;
        
        &lt;p&gt;&lt;strong&gt;Bad&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
        
    &lt;&#x2F;div&gt; 
    &lt;div class=&quot;content&quot;&gt;
        &lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#303136;color:#afb0b6;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3b3;&quot;&gt;TallyTest &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;public &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3b3;&quot;&gt;::testing::Test &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;protected&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3b8c2;&quot;&gt;SetUp&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;override &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;    tally_.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;Increment&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a8c2a3;&quot;&gt;key1&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;8&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;    tally_.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;Increment&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a8c2a3;&quot;&gt;key2&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;100&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;    tally_.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;Increment&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a8c2a3;&quot;&gt;key1&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;    tally_.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;Increment&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a8c2a3;&quot;&gt;key1&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  Tally tally_;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#797b86;&quot;&gt;&#x2F;&#x2F; 200 lines of code
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;TEST_F&lt;&#x2F;span&gt;&lt;span&gt;(TallyTest, IncrementExistingKey) {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;EXPECT_EQ&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;9&lt;&#x2F;span&gt;&lt;span&gt;, tally_.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;Get&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a8c2a3;&quot;&gt;key1&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;));
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;

    &lt;&#x2F;div&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Write tests where the effects immediately follow the causes.&lt;&#x2F;p&gt;
&lt;blockquote class=&quot;note good&quot;&gt;
    &lt;div class=&quot;header&quot;&gt;
        &lt;i class=&quot;ri-thumb-up-line ri-lg&quot;&gt;&lt;&#x2F;i&gt;
        
        &lt;p&gt;&lt;strong&gt;Good&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
        
    &lt;&#x2F;div&gt; 
    &lt;div class=&quot;content&quot;&gt;
        &lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#303136;color:#afb0b6;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3b3;&quot;&gt;TallyTest &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;public &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3b3;&quot;&gt;::testing::Test &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;protected&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  Tally tally_;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;TEST_F&lt;&#x2F;span&gt;&lt;span&gt;(TallyTest, NewKey) {
&lt;&#x2F;span&gt;&lt;span&gt;  tally_.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;Increment&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a8c2a3;&quot;&gt;key&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;100&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;EXPECT_EQ&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;100&lt;&#x2F;span&gt;&lt;span&gt;, tally_.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;Get&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a8c2a3;&quot;&gt;key&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;));
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;TEST_F&lt;&#x2F;span&gt;&lt;span&gt;(TallyTest, ExistingKey) {
&lt;&#x2F;span&gt;&lt;span&gt;  tally_.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;Increment&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a8c2a3;&quot;&gt;key&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;8&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;  tally_.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;Increment&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a8c2a3;&quot;&gt;key&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;EXPECT_EQ&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;9&lt;&#x2F;span&gt;&lt;span&gt;, tally_.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;Get&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a8c2a3;&quot;&gt;key&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;));
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;TEST_F&lt;&#x2F;span&gt;&lt;span&gt;(TallyTest, IncrementByZeroDoesNothing) {
&lt;&#x2F;span&gt;&lt;span&gt;  tally_.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;Increment&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a8c2a3;&quot;&gt;key&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;8&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;  tally_.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;Increment&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a8c2a3;&quot;&gt;key&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;EXPECT_EQ&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;8&lt;&#x2F;span&gt;&lt;span&gt;, tally_.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;Get&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a8c2a3;&quot;&gt;key&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;));
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;

    &lt;&#x2F;div&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;It may require a bit more code, but it&#x27;s easier to read and maintain.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>What Makes a Good End-to-End Test?</title>
		<published>2016-09-21T00:00:00+00:00</published>
		<updated>2016-09-21T00:00:00+00:00</updated>
		<link href="https://ajguerrer.github.io/blog/tott/what-makes-a-good-end-to-end-test/" type="text/html"/>
		<id>https://ajguerrer.github.io/blog/tott/what-makes-a-good-end-to-end-test/</id>
		<content type="html">&lt;p&gt;End-to-end tests give confidence about the health of the system when it is in a near production
state, but they tend to be more flaky and expensive to maintain.&lt;&#x2F;p&gt;
&lt;p&gt;To be cost effective, end-to-end tests should focus on aspects of the system that cannot be
evaluated by smaller tests. Minor and&#x2F;or frequently changing details like error messages or visual
layouts should not effect the test.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Change-Detector Tests Considered Harmful</title>
		<published>2015-01-27T00:00:00+00:00</published>
		<updated>2015-01-27T00:00:00+00:00</updated>
		<link href="https://ajguerrer.github.io/blog/tott/change-detector-tests-considered-harmful/" type="text/html"/>
		<id>https://ajguerrer.github.io/blog/tott/change-detector-tests-considered-harmful/</id>
		<content type="html">&lt;p&gt;Tests that break in response to any change to production code without verifying correct behavior
only add to maintenance costs without catching defects.&lt;&#x2F;p&gt;
&lt;blockquote class=&quot;note bad&quot;&gt;
    &lt;div class=&quot;header&quot;&gt;
        &lt;i class=&quot;ri-thumb-down-line ri-lg&quot;&gt;&lt;&#x2F;i&gt;
        
        &lt;p&gt;&lt;strong&gt;Bad&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
        
    &lt;&#x2F;div&gt; 
    &lt;div class=&quot;content&quot;&gt;
        &lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#303136;color:#afb0b6;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span&gt;Processor::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3b8c2;&quot;&gt;Process&lt;&#x2F;span&gt;&lt;span&gt;(Work &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;w&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;  first_part_.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;Process&lt;&#x2F;span&gt;&lt;span&gt;(w);
&lt;&#x2F;span&gt;&lt;span&gt;  second_part_.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;Process&lt;&#x2F;span&gt;&lt;span&gt;(w);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;TEST&lt;&#x2F;span&gt;&lt;span&gt;(ProcessorTest, ProcessWork) {
&lt;&#x2F;span&gt;&lt;span&gt;  MockFirstPart part1;
&lt;&#x2F;span&gt;&lt;span&gt;  MockSecondPart part2;
&lt;&#x2F;span&gt;&lt;span&gt;  Processor &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;p&lt;&#x2F;span&gt;&lt;span&gt;(part1, part2);
&lt;&#x2F;span&gt;&lt;span&gt;  Work w;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;EXPECT_CALL&lt;&#x2F;span&gt;&lt;span&gt;(part1, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;Process&lt;&#x2F;span&gt;&lt;span&gt;(w));
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;EXPECT_CALL&lt;&#x2F;span&gt;&lt;span&gt;(part2, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;Process&lt;&#x2F;span&gt;&lt;span&gt;(w));
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  p.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;Process&lt;&#x2F;span&gt;&lt;span&gt;(w);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;

    &lt;&#x2F;div&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Tests like these should either be re-written or deleted.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Prefer Testing Public APIs Over Implementation-Detail Classes</title>
		<published>2015-01-14T00:00:00+00:00</published>
		<updated>2015-01-14T00:00:00+00:00</updated>
		<link href="https://ajguerrer.github.io/blog/tott/prefer-testing-public-apis-over-implementation-detail-classes/" type="text/html"/>
		<id>https://ajguerrer.github.io/blog/tott/prefer-testing-public-apis-over-implementation-detail-classes/</id>
		<content type="html">&lt;p&gt;Public APIs can be called by many users. Implementation details are only called by public APIs.
If the public APIs are well tested, as they should be, then the implementation details will get
tested by association.&lt;&#x2F;p&gt;
&lt;p&gt;Heavy testing against implementation details can cause a couple problems:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Unlike public APIs, implementation details are vulnerable to refactoring. Tests for implementation
details can fail even though the behavior from the public API is fine.&lt;&#x2F;li&gt;
&lt;li&gt;Testing implementation details can give false confidence. Even if an implementation detail is well
tested, that doesn&#x27;t mean the pubic API behaves properly.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Writing Descriptive Test Names</title>
		<published>2014-10-16T00:00:00+00:00</published>
		<updated>2014-10-16T00:00:00+00:00</updated>
		<link href="https://ajguerrer.github.io/blog/tott/writing-descriptive-test-names/" type="text/html"/>
		<id>https://ajguerrer.github.io/blog/tott/writing-descriptive-test-names/</id>
		<content type="html">&lt;p&gt;Vague test names make it hard to keep track of what is tested.&lt;&#x2F;p&gt;
&lt;blockquote class=&quot;note bad&quot;&gt;
    &lt;div class=&quot;header&quot;&gt;
        &lt;i class=&quot;ri-thumb-down-line ri-lg&quot;&gt;&lt;&#x2F;i&gt;
        
        &lt;p&gt;&lt;strong&gt;Bad&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
        
    &lt;&#x2F;div&gt; 
    &lt;div class=&quot;content&quot;&gt;
        &lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#303136;color:#afb0b6;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;TEST_F&lt;&#x2F;span&gt;&lt;span&gt;(IsUserLockedOutTest, InvalidLogin) {
&lt;&#x2F;span&gt;&lt;span&gt;  authenticator_.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;Authenticate&lt;&#x2F;span&gt;&lt;span&gt;(username_, password_);
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;EXPECT_FALSE&lt;&#x2F;span&gt;&lt;span&gt;(authenticator_.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;IsUserLockedOut&lt;&#x2F;span&gt;&lt;span&gt;(username_));
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  authenticator_.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;Authenticate&lt;&#x2F;span&gt;&lt;span&gt;(username_, password_);
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;EXPECT_FALSE&lt;&#x2F;span&gt;&lt;span&gt;(authenticator_.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;IsUserLockedOut&lt;&#x2F;span&gt;&lt;span&gt;(username_));
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  authenticator_.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;Authenticate&lt;&#x2F;span&gt;&lt;span&gt;(username_, password_);
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;EXPECT_TRUE&lt;&#x2F;span&gt;&lt;span&gt;(authenticator_.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;IsUserLockedOut&lt;&#x2F;span&gt;&lt;span&gt;(username_));
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;

    &lt;&#x2F;div&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Descriptive test names make it easy to tell what behavior is broken without looking at code. Also,
the length of a good test name helps indicate when a test needs to be split apart.&lt;&#x2F;p&gt;
&lt;blockquote class=&quot;note good&quot;&gt;
    &lt;div class=&quot;header&quot;&gt;
        &lt;i class=&quot;ri-thumb-up-line ri-lg&quot;&gt;&lt;&#x2F;i&gt;
        
        &lt;p&gt;&lt;strong&gt;Good&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
        
    &lt;&#x2F;div&gt; 
    &lt;div class=&quot;content&quot;&gt;
        &lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#303136;color:#afb0b6;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;TEST_F&lt;&#x2F;span&gt;&lt;span&gt;(IsUserLockedOutTest, ShouldLockOutUserAfterThreeInvalidLoginAttempts) {
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#797b86;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;

    &lt;&#x2F;div&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;A test&#x27;s name should be all you need to know to understand the behavior being tested. Make sure
the name contains both the scenario being tested and the expected outcome.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Don&#x27;t Put Logic in Tests</title>
		<published>2014-07-31T00:00:00+00:00</published>
		<updated>2014-07-31T00:00:00+00:00</updated>
		<link href="https://ajguerrer.github.io/blog/tott/don-t-put-logic-in-tests/" type="text/html"/>
		<id>https://ajguerrer.github.io/blog/tott/don-t-put-logic-in-tests/</id>
		<content type="html">&lt;p&gt;Tests should be simple by stating I&#x2F;O directly rather than computing them.&lt;&#x2F;p&gt;
&lt;blockquote class=&quot;note bad&quot;&gt;
    &lt;div class=&quot;header&quot;&gt;
        &lt;i class=&quot;ri-thumb-down-line ri-lg&quot;&gt;&lt;&#x2F;i&gt;
        
        &lt;p&gt;&lt;strong&gt;Bad&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
        
    &lt;&#x2F;div&gt; 
    &lt;div class=&quot;content&quot;&gt;
        &lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#303136;color:#afb0b6;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;TEST&lt;&#x2F;span&gt;&lt;span&gt;(NavigatorTest, ShouldNavigateToPhotosPage) {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; std::string baseUrl = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a8c2a3;&quot;&gt;http:&#x2F;&#x2F;plus.google.com&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;  Navigator &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;nav&lt;&#x2F;span&gt;&lt;span&gt;(baseUrl);
&lt;&#x2F;span&gt;&lt;span&gt;  nav.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;GoToPhotosPage&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;EXPECT_EQ&lt;&#x2F;span&gt;&lt;span&gt;(baseUrl + &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a8c2a3;&quot;&gt;&#x2F;u&#x2F;0&#x2F;photos&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, nav.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;GetCurrentUrl&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;

    &lt;&#x2F;div&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Even a simple string concatenation can lead to bugs.&lt;&#x2F;p&gt;
&lt;blockquote class=&quot;note good&quot;&gt;
    &lt;div class=&quot;header&quot;&gt;
        &lt;i class=&quot;ri-thumb-up-line ri-lg&quot;&gt;&lt;&#x2F;i&gt;
        
        &lt;p&gt;&lt;strong&gt;Good&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
        
    &lt;&#x2F;div&gt; 
    &lt;div class=&quot;content&quot;&gt;
        &lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#303136;color:#afb0b6;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;TEST&lt;&#x2F;span&gt;&lt;span&gt;(NavigatorTest, ShouldNavigateToPhotosPage) {
&lt;&#x2F;span&gt;&lt;span&gt;  Navigator &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;nav&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a8c2a3;&quot;&gt;http:&#x2F;&#x2F;plug.google.com&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;  nav.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;GoToPhotosPage&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;EXPECT_EQ&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a8c2a3;&quot;&gt;http:&#x2F;&#x2F;plus.google.com&#x2F;&#x2F;u&#x2F;0&#x2F;photos&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, nav.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;GetCurrentUrl&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;

    &lt;&#x2F;div&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;If a test requires logic, move that logic out of the test body into utilities and helper functions
and write tests for them too.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Risk-Driven Testing</title>
		<published>2014-05-30T00:00:00+00:00</published>
		<updated>2014-05-30T00:00:00+00:00</updated>
		<link href="https://ajguerrer.github.io/blog/tott/risk-driven-testing/" type="text/html"/>
		<id>https://ajguerrer.github.io/blog/tott/risk-driven-testing/</id>
		<content type="html">&lt;p&gt;Blindly writing tests can lead to a false sense of security or wasted effort. Before writing tests,
think about testing. Small tests are cheap, larger tests protect core use-cases and integration.
Manual testing can sometimes be the cheapest, most effective option.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Effective Testing</title>
		<published>2014-05-07T00:00:00+00:00</published>
		<updated>2014-05-07T00:00:00+00:00</updated>
		<link href="https://ajguerrer.github.io/blog/tott/effective-testing/" type="text/html"/>
		<id>https://ajguerrer.github.io/blog/tott/effective-testing/</id>
		<content type="html">&lt;p&gt;To be effective, a test maximizes three important qualities:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Fidelity&lt;&#x2F;strong&gt; - Sensitive to defects in the code under test.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Resilience&lt;&#x2F;strong&gt; - Fails only when a breaking change is made to the code under test.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Precision&lt;&#x2F;strong&gt; - Upon failure reports exactly where the defect lies.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Test Behaviors, Not Methods</title>
		<published>2014-04-14T00:00:00+00:00</published>
		<updated>2014-04-14T00:00:00+00:00</updated>
		<link href="https://ajguerrer.github.io/blog/tott/test-behaviors-not-methods/" type="text/html"/>
		<id>https://ajguerrer.github.io/blog/tott/test-behaviors-not-methods/</id>
		<content type="html">&lt;p&gt;A single method can exhibit many behaviors. Likewise, a single behavior can span multiple methods.&lt;&#x2F;p&gt;
&lt;p&gt;It can be harmful to think that tests and public methods should have a 1:1 relationship.&lt;&#x2F;p&gt;
&lt;blockquote class=&quot;note bad&quot;&gt;
    &lt;div class=&quot;header&quot;&gt;
        &lt;i class=&quot;ri-thumb-down-line ri-lg&quot;&gt;&lt;&#x2F;i&gt;
        
        &lt;p&gt;&lt;strong&gt;Bad&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
        
    &lt;&#x2F;div&gt; 
    &lt;div class=&quot;content&quot;&gt;
        &lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#303136;color:#afb0b6;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;TEST_F&lt;&#x2F;span&gt;&lt;span&gt;(TransactionProcessorTest, ProcessTransaction) {
&lt;&#x2F;span&gt;&lt;span&gt;  User user = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;NewUserWithBalance&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;kLowBalanceThreshold &lt;&#x2F;span&gt;&lt;span&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;Dollars&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;));
&lt;&#x2F;span&gt;&lt;span&gt;  transaction_processor_.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;ProcessTransaction&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;      user, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;Transaction&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a8c2a3;&quot;&gt;Pile of Beanie Babies&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;Dollars&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;)));
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;EXPECT_THAT&lt;&#x2F;span&gt;&lt;span&gt;(ui_.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;GetText&lt;&#x2F;span&gt;&lt;span&gt;(), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;HasSubstr&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a8c2a3;&quot;&gt;You bought a Pile of Beanie Babies&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;));
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;EXPECT_EQ&lt;&#x2F;span&gt;&lt;span&gt;(user.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;GetEmails&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;size&lt;&#x2F;span&gt;&lt;span&gt;(), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;EXPECT_STREQ&lt;&#x2F;span&gt;&lt;span&gt;(user.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;GetEmails&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;at&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;GetSubject&lt;&#x2F;span&gt;&lt;span&gt;(), &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a8c2a3;&quot;&gt;Your balance is low&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;

    &lt;&#x2F;div&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Each test should verify one behavior. Each method may take several tests to verify.&lt;&#x2F;p&gt;
&lt;blockquote class=&quot;note good&quot;&gt;
    &lt;div class=&quot;header&quot;&gt;
        &lt;i class=&quot;ri-thumb-up-line ri-lg&quot;&gt;&lt;&#x2F;i&gt;
        
        &lt;p&gt;&lt;strong&gt;Good&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
        
    &lt;&#x2F;div&gt; 
    &lt;div class=&quot;content&quot;&gt;
        &lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#303136;color:#afb0b6;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;TEST_F&lt;&#x2F;span&gt;&lt;span&gt;(TransactionProcessorTest, ShouldDisplayNotification) {
&lt;&#x2F;span&gt;&lt;span&gt;  transaction_processor_.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;ProcessTransaction&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;User&lt;&#x2F;span&gt;&lt;span&gt;(), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;Transaction&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a8c2a3;&quot;&gt;Pile of Beanie Babies&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;));
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;EXPECT_THAT&lt;&#x2F;span&gt;&lt;span&gt;(ui_.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;GetText&lt;&#x2F;span&gt;&lt;span&gt;(), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;HasSubstr&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a8c2a3;&quot;&gt;You bought a Pile of Beanie Babies&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;));
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;TEST_F&lt;&#x2F;span&gt;&lt;span&gt;(TransactionProcessorTest, ShouldSendEmailWhenBalanceIsLow) {
&lt;&#x2F;span&gt;&lt;span&gt;  User user = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;NewUserWithBalance&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;kLowBalanceThreshold &lt;&#x2F;span&gt;&lt;span&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;Dollars&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;));
&lt;&#x2F;span&gt;&lt;span&gt;  transaction_processor_.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;ProcessTransaction&lt;&#x2F;span&gt;&lt;span&gt;(user, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;Transaction&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;Dollars&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;)));
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;EXPECT_EQ&lt;&#x2F;span&gt;&lt;span&gt;(user.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;GetEmails&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;size&lt;&#x2F;span&gt;&lt;span&gt;(), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;EXPECT_STREQ&lt;&#x2F;span&gt;&lt;span&gt;(user.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;GetEmails&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;at&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;GetSubject&lt;&#x2F;span&gt;&lt;span&gt;(), &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a8c2a3;&quot;&gt;Your balance is low&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;

    &lt;&#x2F;div&gt;
&lt;&#x2F;blockquote&gt;</content>
	</entry>
	<entry xml:lang="en">
		<title>What Makes a Good Test?</title>
		<published>2014-03-18T00:00:00+00:00</published>
		<updated>2014-03-18T00:00:00+00:00</updated>
		<link href="https://ajguerrer.github.io/blog/tott/what-makes-a-good-test/" type="text/html"/>
		<id>https://ajguerrer.github.io/blog/tott/what-makes-a-good-test/</id>
		<content type="html">&lt;p&gt;Tests provide more than verification. They also serve as documentation.&lt;&#x2F;p&gt;
&lt;p&gt;As a source of documentation, test should not be distracting or hide information.&lt;&#x2F;p&gt;
&lt;blockquote class=&quot;note bad&quot;&gt;
    &lt;div class=&quot;header&quot;&gt;
        &lt;i class=&quot;ri-thumb-down-line ri-lg&quot;&gt;&lt;&#x2F;i&gt;
        
        &lt;p&gt;&lt;strong&gt;Bad&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
        
    &lt;&#x2F;div&gt; 
    &lt;div class=&quot;content&quot;&gt;
        &lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#303136;color:#afb0b6;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;TEST&lt;&#x2F;span&gt;&lt;span&gt;(CalculatorTest, ShouldPerformAddition) {
&lt;&#x2F;span&gt;&lt;span&gt;  Calculator &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;calculator&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;RoundingStrategy&lt;&#x2F;span&gt;&lt;span&gt;(),
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a8c2a3;&quot;&gt;unused&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;kEnableCosinFeature&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;0.01&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;kCalculusEngine&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; result = calculator.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;DoComputation&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;MakeTestComputation&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;EXPECT_EQ&lt;&#x2F;span&gt;&lt;span&gt;(result, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;

    &lt;&#x2F;div&gt;
&lt;&#x2F;blockquote&gt;&lt;blockquote class=&quot;note good&quot;&gt;
    &lt;div class=&quot;header&quot;&gt;
        &lt;i class=&quot;ri-thumb-up-line ri-lg&quot;&gt;&lt;&#x2F;i&gt;
        
        &lt;p&gt;&lt;strong&gt;Good&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
        
    &lt;&#x2F;div&gt; 
    &lt;div class=&quot;content&quot;&gt;
        &lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#303136;color:#afb0b6;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;TEST_&lt;&#x2F;span&gt;&lt;span&gt;(CalculatorTest, ShouldPerformAddition) {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;const int&lt;&#x2F;span&gt;&lt;span&gt; result = calculator_.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;DoComputation&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;MakeAdditionComputation&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;));
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;EXPECT_EQ&lt;&#x2F;span&gt;&lt;span&gt;(result, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;

    &lt;&#x2F;div&gt;
&lt;&#x2F;blockquote&gt;</content>
	</entry>
	<entry xml:lang="en">
		<title>Test Behavior, Not Implementation</title>
		<published>2013-08-05T00:00:00+00:00</published>
		<updated>2013-08-05T00:00:00+00:00</updated>
		<link href="https://ajguerrer.github.io/blog/tott/test-behavior-not-implementation/" type="text/html"/>
		<id>https://ajguerrer.github.io/blog/tott/test-behavior-not-implementation/</id>
		<content type="html">&lt;p&gt;Except where explicitly intended, tests should work independent of the implementation details being
tested.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#303136;color:#afb0b6;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3b3;&quot;&gt;Calculator &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;public&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3b8c2;&quot;&gt;Add&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;)  {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt; a &lt;&#x2F;span&gt;&lt;span&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt; b;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3b3;&quot;&gt;Calculator &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;public&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3b8c2;&quot;&gt;Add&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;    Adder adder &lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt; adder_factory_.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;CreateAdder&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;    ReturnValue return_value &lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt; adder.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;Compute&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;Number&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;(a), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;Number&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;(b));
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt; return_value.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;ConvertToInteger&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;private&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  AdderFactory adder_factory_;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;TEST_F&lt;&#x2F;span&gt;&lt;span&gt;(CalculatorTest, ShouldAddIntegers) {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;EXPECT_EQ&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;, calculator_.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;Add&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;));
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;EXPECT_EQ&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;, calculator_.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;Add&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;));
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;EXPECT_EQ&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, calculator_.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;Add&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;, -&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;));
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Know Your Test Doubles</title>
		<published>2013-07-18T00:00:00+00:00</published>
		<updated>2013-07-18T00:00:00+00:00</updated>
		<link href="https://ajguerrer.github.io/blog/tott/know-your-test-doubles/" type="text/html"/>
		<id>https://ajguerrer.github.io/blog/tott/know-your-test-doubles/</id>
		<content type="html">&lt;p&gt;A test double is an object that can stand in for a real object in test. The most common types of
test doubles are:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Stub&lt;&#x2F;strong&gt; - Returns a specific values to promote a specific state.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#303136;color:#afb0b6;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span&gt;AccessManager &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3b8c2;&quot;&gt;access_manager&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;kStubAuthenticationService&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;ON_CALL&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;kStubAuthenticationService&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;IsAuthenticated&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;kUserId&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;WillByDefault&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;Return&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;));
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;EXPECT_FALSE&lt;&#x2F;span&gt;&lt;span&gt;(access_manager.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;UserHasAccess&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;kUserId&lt;&#x2F;span&gt;&lt;span&gt;));
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;ON_CALL&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;kStubAuthenticationService&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;IsAuthenticated&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;kUserId&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;WillByDefault&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;Return&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;));
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;EXPECT_TRUE&lt;&#x2F;span&gt;&lt;span&gt;(access_manager.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;UserHasAccess&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;kUserId&lt;&#x2F;span&gt;&lt;span&gt;));
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Mock&lt;&#x2F;strong&gt; - Sets expectations about how other objects should interact with it.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#303136;color:#afb0b6;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span&gt;AccessManager &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3b8c2;&quot;&gt;access_manager&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;mockAuthenticationService&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;EXPECT_CALL&lt;&#x2F;span&gt;&lt;span&gt;(mockAuthenticationService, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;IsAuthenticated&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;kUserId&lt;&#x2F;span&gt;&lt;span&gt;));
&lt;&#x2F;span&gt;&lt;span&gt;access_manager.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;UserHasAccess&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;kUserId&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Fake&lt;&#x2F;strong&gt; - A lightweight implementation when the real implementation is unsuitable for test.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#303136;color:#afb0b6;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span&gt;FakeAuthenticationService fake_authentication_service;
&lt;&#x2F;span&gt;&lt;span&gt;AccessManager &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3b8c2;&quot;&gt;access_manager&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;fake_authentication_service&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;EXPECT_FALSE&lt;&#x2F;span&gt;&lt;span&gt;(access_manager.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;UserHasAccess&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;kUserId&lt;&#x2F;span&gt;&lt;span&gt;));
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;fake_authentication_service.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;AddAuthenticatedUser&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;kUser&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;EXPECT_TRUE&lt;&#x2F;span&gt;&lt;span&gt;(access_manager.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;UserHasAccess&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;kUserId&lt;&#x2F;span&gt;&lt;span&gt;));
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Fake Your Way To Better Tests</title>
		<published>2013-06-28T00:00:00+00:00</published>
		<updated>2013-06-28T00:00:00+00:00</updated>
		<link href="https://ajguerrer.github.io/blog/tott/fake-your-way-to-better-tests/" type="text/html"/>
		<id>https://ajguerrer.github.io/blog/tott/fake-your-way-to-better-tests/</id>
		<content type="html">&lt;p&gt;Suppose you would like to test your blog platform API, but you don&#x27;t want your tests talking to a
remote server.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#303136;color:#afb0b6;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3b8c2;&quot;&gt;DeletePostsWithTag&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; Tag&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;tag&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; Post post : blog_service_-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;GetAllPosts&lt;&#x2F;span&gt;&lt;span&gt;()) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(post.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;HasTag&lt;&#x2F;span&gt;&lt;span&gt;(tag)) {
&lt;&#x2F;span&gt;&lt;span&gt;      blog_service_-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;DeletePost&lt;&#x2F;span&gt;&lt;span&gt;(post.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;GetId&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;A fake is a lightweight implementation of an API that behaves like the real implementation, but
isn&#x27;t suitable for production.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#303136;color:#afb0b6;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3b3;&quot;&gt;FakeBlogService &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;public &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3b3;&quot;&gt;BlogService &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;public&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3b8c2;&quot;&gt;AddPost&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt; Post&lt;&#x2F;span&gt;&lt;span&gt;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;post&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;) { posts.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;insert&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;(post); }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3b8c2;&quot;&gt;DeletePost&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;const int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;auto&lt;&#x2F;span&gt;&lt;span&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt; post &lt;&#x2F;span&gt;&lt;span&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt; posts) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;(post.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;GetId&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;() &lt;&#x2F;span&gt;&lt;span&gt;==&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt; id) { posts.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;erase&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;(post); &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;; }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;    }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  std::set&amp;lt;Post&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3b8c2;&quot;&gt;GetAllPosts&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt; posts; }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;private&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  std::set&amp;lt;Post&amp;gt; posts;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Fakes should be created and maintained by the person or team that owns the real implementation.&lt;&#x2F;p&gt;
&lt;p&gt;Fakes should have their own tests to make sure they behave like the real implementation.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Don&#x27;t Overuse Mocks</title>
		<published>2013-05-28T00:00:00+00:00</published>
		<updated>2013-05-28T00:00:00+00:00</updated>
		<link href="https://ajguerrer.github.io/blog/tott/don-t-overuse-mocks/" type="text/html"/>
		<id>https://ajguerrer.github.io/blog/tott/don-t-overuse-mocks/</id>
		<content type="html">&lt;p&gt;Mocks are powerful, but easy to abuse.&lt;&#x2F;p&gt;
&lt;blockquote class=&quot;note bad&quot;&gt;
    &lt;div class=&quot;header&quot;&gt;
        &lt;i class=&quot;ri-thumb-down-line ri-lg&quot;&gt;&lt;&#x2F;i&gt;
        
        &lt;p&gt;&lt;strong&gt;Bad&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
        
    &lt;&#x2F;div&gt; 
    &lt;div class=&quot;content&quot;&gt;
        &lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#303136;color:#afb0b6;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;TEST_F&lt;&#x2F;span&gt;&lt;span&gt;(PaymentProcessorTest, ShouldChargeCreditCard) {
&lt;&#x2F;span&gt;&lt;span&gt;  PaymentProcessor &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;payment_processor&lt;&#x2F;span&gt;&lt;span&gt;(mock_credit_card_server_);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  InSequence s;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;EXPECT_CALL&lt;&#x2F;span&gt;&lt;span&gt;(mock_credit_card_server_, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;IsServerAvailable&lt;&#x2F;span&gt;&lt;span&gt;())
&lt;&#x2F;span&gt;&lt;span&gt;      .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;WillOnce&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;Return&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;));
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;EXPECT_CALL&lt;&#x2F;span&gt;&lt;span&gt;(mock_credit_card_server_, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;BeginTransaction&lt;&#x2F;span&gt;&lt;span&gt;())
&lt;&#x2F;span&gt;&lt;span&gt;      .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;WillOnce&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;Return&lt;&#x2F;span&gt;&lt;span&gt;(mock_transaction_manager_));
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;EXPECT_CALL&lt;&#x2F;span&gt;&lt;span&gt;(mock_transaction_manager_, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;GetTransaction&lt;&#x2F;span&gt;&lt;span&gt;())
&lt;&#x2F;span&gt;&lt;span&gt;      .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;WillOnce&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;Return&lt;&#x2F;span&gt;&lt;span&gt;(transaction_));
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;EXPECT_CALL&lt;&#x2F;span&gt;&lt;span&gt;(mock_credit_card_server_, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;Pay&lt;&#x2F;span&gt;&lt;span&gt;(transaction_, credit_card_, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;500&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;span&gt;      .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;WillOnce&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;Return&lt;&#x2F;span&gt;&lt;span&gt;(mock_payment_));
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;EXPECT_CALL&lt;&#x2F;span&gt;&lt;span&gt;(mock_payment_, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;IsOverMaxBalance&lt;&#x2F;span&gt;&lt;span&gt;()).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;WillOnce&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;Return&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;));
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  payment_processor.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;ProcessPayment&lt;&#x2F;span&gt;&lt;span&gt;(credit_card_, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;Dollars&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;500&lt;&#x2F;span&gt;&lt;span&gt;));
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;

    &lt;&#x2F;div&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Overusing mocks makes tests harder to understand, maintain, and provides less insurance that your
code is working properly.&lt;&#x2F;p&gt;
&lt;p&gt;If you don&#x27;t need a mock, don&#x27;t use one. Understanding when to use a mock comes from understanding
what you want to test.&lt;&#x2F;p&gt;
&lt;blockquote class=&quot;note good&quot;&gt;
    &lt;div class=&quot;header&quot;&gt;
        &lt;i class=&quot;ri-thumb-up-line ri-lg&quot;&gt;&lt;&#x2F;i&gt;
        
        &lt;p&gt;&lt;strong&gt;Good&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
        
    &lt;&#x2F;div&gt; 
    &lt;div class=&quot;content&quot;&gt;
        &lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#303136;color:#afb0b6;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;TEST_F&lt;&#x2F;span&gt;&lt;span&gt;(PaymentProcessorTest, ShouldChargeCreditCard) {
&lt;&#x2F;span&gt;&lt;span&gt;  PaymentProcessor &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;payment_processor&lt;&#x2F;span&gt;&lt;span&gt;(credit_card_server_);
&lt;&#x2F;span&gt;&lt;span&gt;  payment_processor.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;ProcessPayment&lt;&#x2F;span&gt;&lt;span&gt;(credit_card_, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;Dollars&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;500&lt;&#x2F;span&gt;&lt;span&gt;));
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;EXPECT_EQ&lt;&#x2F;span&gt;&lt;span&gt;(credit_card_server_.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;GetMostRecentCharge&lt;&#x2F;span&gt;&lt;span&gt;(credit_card_), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;500&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;

    &lt;&#x2F;div&gt;
&lt;&#x2F;blockquote&gt;</content>
	</entry>
	<entry xml:lang="en">
		<title>Testing State vs. Testing Interactions</title>
		<published>2013-03-22T00:00:00+00:00</published>
		<updated>2013-03-22T00:00:00+00:00</updated>
		<link href="https://ajguerrer.github.io/blog/tott/testing-state-vs-testing-interactions/" type="text/html"/>
		<id>https://ajguerrer.github.io/blog/tott/testing-state-vs-testing-interactions/</id>
		<content type="html">&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Testing State&lt;&#x2F;strong&gt; - Verifying the code under test returns the correct results.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#303136;color:#afb0b6;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;TEST&lt;&#x2F;span&gt;&lt;span&gt;(NumberSorterTest, ShouldSortIntegers) {
&lt;&#x2F;span&gt;&lt;span&gt;  NumberSorter &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;number_sorter&lt;&#x2F;span&gt;&lt;span&gt;({quicksort, bubblesort});
&lt;&#x2F;span&gt;&lt;span&gt;  std::vector&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; numbers = {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;};
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;EXPECT_EQ&lt;&#x2F;span&gt;&lt;span&gt;({&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;}, number_sorter.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;SortNumbers&lt;&#x2F;span&gt;&lt;span&gt;(numbers));
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Testing Interaction&lt;&#x2F;strong&gt; - Verifying the code under test calls methods correctly.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#303136;color:#afb0b6;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;TEST&lt;&#x2F;span&gt;&lt;span&gt;(NumberSorterTest, ShouldUseQuicksort) {
&lt;&#x2F;span&gt;&lt;span&gt;  NumberSorter &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;number_sorter&lt;&#x2F;span&gt;&lt;span&gt;({mock_quicksort, mock_bubblesort});
&lt;&#x2F;span&gt;&lt;span&gt;  std::vector&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; numbers = {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;};
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;EXPECT_CALL&lt;&#x2F;span&gt;&lt;span&gt;(mock_quicksort, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;Sort&lt;&#x2F;span&gt;&lt;span&gt;(numbers));
&lt;&#x2F;span&gt;&lt;span&gt;  number_sorter.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;SortNumbers&lt;&#x2F;span&gt;&lt;span&gt;(numbers);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Most of the time you want to test state. Occasionally interactions need to be tested when the number
of calls or order of calls matter.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Code coverage goal: 80% and no less!</title>
		<published>2010-07-20T00:00:00+00:00</published>
		<updated>2010-07-20T00:00:00+00:00</updated>
		<link href="https://ajguerrer.github.io/blog/tott/code-coverage-goal-80-and-no-less/" type="text/html"/>
		<id>https://ajguerrer.github.io/blog/tott/code-coverage-goal-80-and-no-less/</id>
		<content type="html">&lt;p&gt;Early one morning, a young programmer asked the great master, “I am ready to write some unit tests.
What code coverage should I aim for?”&lt;&#x2F;p&gt;
&lt;p&gt;The great master replied, “Don’t worry about coverage, just write some good tests.”&lt;&#x2F;p&gt;
&lt;p&gt;The young programmer smiled, bowed, and left.&lt;&#x2F;p&gt;
&lt;p&gt;Later that day, a second programmer asked the same question. The great master pointed at a pot of
boiling water and asked, “How many grains of rice should I put in that pot?”&lt;&#x2F;p&gt;
&lt;p&gt;The programmer, looking puzzled, replied, “How can I possibly tell you? It depends on how many
people you need to feed, how hungry they are, what other food you are serving, how much rice you
have available, and so on.”&lt;&#x2F;p&gt;
&lt;p&gt;“Exactly,” said the great master.&lt;&#x2F;p&gt;
&lt;p&gt;The second programmer smiled, bowed, and left.&lt;&#x2F;p&gt;
&lt;p&gt;Toward the end of the day, a third programmer came and asked the same question about code coverage.&lt;&#x2F;p&gt;
&lt;p&gt;“Eighty percent and no less!” Replied the master in a stern voice, pounding his fist on the table.&lt;&#x2F;p&gt;
&lt;p&gt;The third programmer smiled, bowed, and left.&lt;&#x2F;p&gt;
&lt;p&gt;After this last reply, a young apprentice approached the great master, “Great master, today I
overheard you answer the same question about code coverage with three different answers. Why?”&lt;&#x2F;p&gt;
&lt;p&gt;The great master stood up from his chair. “Come get some fresh tea with me and let’s talk about it.”
After they filled their cups with smoking hot green tea, the great master began:&lt;&#x2F;p&gt;
&lt;p&gt;“The first programmer is new and just getting started with testing. Right now he has a lot of code
and no tests. He has a long way to go; focusing on code coverage at this time would be depressing
and quite useless. He’s better off just getting used to writing and running some tests. He can worry
about coverage later.&lt;&#x2F;p&gt;
&lt;p&gt;&amp;quot;The second programmer, on the other hand, is quite experienced both at programming and testing.
When I replied by asking her how many grains of rice I should put in a pot, I helped her realize
that the amount of testing necessary depends on a number of factors, and she knows those factors
better than I do – it’s her code after all. There is no single, simple, answer, and she’s smart
enough to handle the truth and work with that.”&lt;&#x2F;p&gt;
&lt;p&gt;“I see,” said the young apprentice, “but if there is no single simple answer, then why did you tell
the third programmer ‘Eighty percent and no less’?”&lt;&#x2F;p&gt;
&lt;p&gt;The great master laughed so hard and loud that his belly, evidence that he drank more than just
green tea, flopped up and down. “The third programmer wants only simple answers – even when there
are no simple answers … and then does not follow them anyway.”&lt;&#x2F;p&gt;
&lt;p&gt;The young apprentice and the grizzled great master finished drinking their tea in contemplative
silence.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Data Driven Traps!</title>
		<published>2008-09-04T00:00:00+00:00</published>
		<updated>2008-09-04T00:00:00+00:00</updated>
		<link href="https://ajguerrer.github.io/blog/tott/data-driven-traps/" type="text/html"/>
		<id>https://ajguerrer.github.io/blog/tott/data-driven-traps/</id>
		<content type="html">&lt;p&gt;Data driven tests are efficient, but easy to abuse.&lt;&#x2F;p&gt;
&lt;blockquote class=&quot;note bad&quot;&gt;
    &lt;div class=&quot;header&quot;&gt;
        &lt;i class=&quot;ri-thumb-down-line ri-lg&quot;&gt;&lt;&#x2F;i&gt;
        
        &lt;p&gt;&lt;strong&gt;Bad&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
        
    &lt;&#x2F;div&gt; 
    &lt;div class=&quot;content&quot;&gt;
        &lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#303136;color:#afb0b6;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;TestData {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; std::string word;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;const bool&lt;&#x2F;span&gt;&lt;span&gt; is_word;
&lt;&#x2F;span&gt;&lt;span&gt;};
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; std::vector&amp;lt;TestData&amp;gt; test_data = {
&lt;&#x2F;span&gt;&lt;span&gt;    {&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a8c2a3;&quot;&gt;milk&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;},
&lt;&#x2F;span&gt;&lt;span&gt;    {&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a8c2a3;&quot;&gt;centre&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;},
&lt;&#x2F;span&gt;&lt;span&gt;    {&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a8c2a3;&quot;&gt;jklm&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;},
&lt;&#x2F;span&gt;&lt;span&gt;};
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;TEST&lt;&#x2F;span&gt;&lt;span&gt;(IsWordTest, TestEverything) {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;const auto&lt;&#x2F;span&gt;&lt;span&gt;&amp;amp; entry : test_data) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;EXPECT_EQ&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;IsWord&lt;&#x2F;span&gt;&lt;span&gt;(entry.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;word&lt;&#x2F;span&gt;&lt;span&gt;), entry.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;is_word&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;

    &lt;&#x2F;div&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Data-driven tests make debugging and understanding failures, let alone false positives, more
difficult.&lt;&#x2F;p&gt;
&lt;p&gt;As the code grows in complexity, data tends to grow even faster. It quickly becomes impossible to
discern what behavior each piece of data is meant to test.&lt;&#x2F;p&gt;
&lt;blockquote class=&quot;note bad&quot;&gt;
    &lt;div class=&quot;header&quot;&gt;
        &lt;i class=&quot;ri-thumb-down-line ri-lg&quot;&gt;&lt;&#x2F;i&gt;
        
        &lt;p&gt;&lt;strong&gt;Bad&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
        
    &lt;&#x2F;div&gt; 
    &lt;div class=&quot;content&quot;&gt;
        &lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#303136;color:#afb0b6;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; std::vector&amp;lt;Locale&amp;gt; locales = { Word::US, Word::UK, Word::France, ... };
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;TestData {
&lt;&#x2F;span&gt;&lt;span&gt;  std::string word;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;bool&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;kNumLocales&lt;&#x2F;span&gt;&lt;span&gt;] is_word;
&lt;&#x2F;span&gt;&lt;span&gt;};
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; std::vector&amp;lt;TestData&amp;gt; test_data = {
&lt;&#x2F;span&gt;&lt;span&gt;    {&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a8c2a3;&quot;&gt;milk&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;, ...},
&lt;&#x2F;span&gt;&lt;span&gt;    {&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a8c2a3;&quot;&gt;centre&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;, ...}},
&lt;&#x2F;span&gt;&lt;span&gt;    {&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a8c2a3;&quot;&gt;jklm&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;, ...}},
&lt;&#x2F;span&gt;&lt;span&gt;};
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;TEST&lt;&#x2F;span&gt;&lt;span&gt;(IsWordTest, TestEverything) {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;const auto&lt;&#x2F;span&gt;&lt;span&gt;&amp;amp; entry : test_data) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;const auto&lt;&#x2F;span&gt;&lt;span&gt;* locale: locales) {
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;EXPECT_EQ&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;IsWord&lt;&#x2F;span&gt;&lt;span&gt;(entry.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;word&lt;&#x2F;span&gt;&lt;span&gt;, locale), entry.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;is_word&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;

    &lt;&#x2F;div&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Instead, think critically about what behaviors are worth testing.&lt;&#x2F;p&gt;
&lt;blockquote class=&quot;note good&quot;&gt;
    &lt;div class=&quot;header&quot;&gt;
        &lt;i class=&quot;ri-thumb-up-line ri-lg&quot;&gt;&lt;&#x2F;i&gt;
        
        &lt;p&gt;&lt;strong&gt;Good&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
        
    &lt;&#x2F;div&gt; 
    &lt;div class=&quot;content&quot;&gt;
        &lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#303136;color:#afb0b6;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;TEST&lt;&#x2F;span&gt;&lt;span&gt;(IsWordTest, ShouldExistInMultipleLocales) {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;EXPECT_TRUE&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;IsWord&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a8c2a3;&quot;&gt;milk&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, Word::US));
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;EXPECT_TRUE&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;IsWord&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a8c2a3;&quot;&gt;milk&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, Word::UK));
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;EXPECT_FALSE&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;IsWord&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a8c2a3;&quot;&gt;milk&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, Word::France));
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;TEST&lt;&#x2F;span&gt;&lt;span&gt;(IsWordTest, ShouldNotExist) {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#797b86;&quot;&gt;&#x2F;&#x2F; &amp;quot;jklm&amp;quot; test not repeated as it uses the same code path
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;EXPECT_FALSE&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;IsWord&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a8c2a3;&quot;&gt;jklm&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, Word::US));
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;

    &lt;&#x2F;div&gt;
&lt;&#x2F;blockquote&gt;</content>
	</entry>
	<entry xml:lang="en">
		<title>Sleeping != Synchronization</title>
		<published>2008-08-21T00:00:00+00:00</published>
		<updated>2008-08-21T00:00:00+00:00</updated>
		<link href="https://ajguerrer.github.io/blog/tott/sleeping-synchronization/" type="text/html"/>
		<id>https://ajguerrer.github.io/blog/tott/sleeping-synchronization/</id>
		<content type="html">&lt;p&gt;Beware of &lt;code&gt;sleep&lt;&#x2F;code&gt;. &lt;code&gt;sleep&lt;&#x2F;code&gt; should never be used for synchronization, or in test.&lt;&#x2F;p&gt;
&lt;blockquote class=&quot;note bad&quot;&gt;
    &lt;div class=&quot;header&quot;&gt;
        &lt;i class=&quot;ri-thumb-down-line ri-lg&quot;&gt;&lt;&#x2F;i&gt;
        
        &lt;p&gt;&lt;strong&gt;Bad&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
        
    &lt;&#x2F;div&gt; 
    &lt;div class=&quot;content&quot;&gt;
        &lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#303136;color:#afb0b6;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3b3;&quot;&gt;CoffeeMaker &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;public&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;virtual &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3b8c2;&quot;&gt;~CoffeeMaker&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;() &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;default&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;virtual void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3b8c2;&quot;&gt;MakeCoffee&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt; std::function&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;()&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;callback&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3b3;&quot;&gt;Intern &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;public &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3b3;&quot;&gt;CoffeeMaker &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;public&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3b8c2;&quot;&gt;MakeCoffee&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt; std::function&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;()&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;callback&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#797b86;&quot;&gt;&#x2F;&#x2F; make coffee, hopefully within 60 seconds.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;callback&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3b3;&quot;&gt;Employee &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;public&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3b8c2;&quot;&gt;DrinkCoffee&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;() { caffeinated_ &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;; }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;bool &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3b8c2;&quot;&gt;IsCaffeinated&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;() { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt; caffeinated_; }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3b8c2;&quot;&gt;DemandCoffee&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;(CoffeeMaker&lt;&#x2F;span&gt;&lt;span&gt;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;cm&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;    std::thread &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;t&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;CoffeeMaker::MakeCoffee, &lt;&#x2F;span&gt;&lt;span&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;cm,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;                  std::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;bind&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;Employee::DrinkCoffee, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;));
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;    t.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;detach&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;private&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;bool&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt; caffeinated_ &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;TEST&lt;&#x2F;span&gt;&lt;span&gt;(EmployeeTest, ShouldBeCaffeinatedOnlyAfterDrinkingCoffee) {
&lt;&#x2F;span&gt;&lt;span&gt;  Employee e;
&lt;&#x2F;span&gt;&lt;span&gt;  Intern i;
&lt;&#x2F;span&gt;&lt;span&gt;  e.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;DemandCoffee&lt;&#x2F;span&gt;&lt;span&gt;(i);
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;EXPECT_FALSE&lt;&#x2F;span&gt;&lt;span&gt;(e.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;IsCaffeinated&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;  std::this_thread::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;sleep_for&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;60&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;EXPECT_TRUE&lt;&#x2F;span&gt;&lt;span&gt;(e.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;IsCaffeinated&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;

    &lt;&#x2F;div&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Code that sleeps can be improved by waiting on a &lt;code&gt;std::future&lt;&#x2F;code&gt; or a &lt;code&gt;std::condition_variable&lt;&#x2F;code&gt;.
As always, if your waiting on a non-trivial operation, like &lt;code&gt;Intern::MakeCoffee&lt;&#x2F;code&gt;, use a fake.&lt;&#x2F;p&gt;
&lt;blockquote class=&quot;note good&quot;&gt;
    &lt;div class=&quot;header&quot;&gt;
        &lt;i class=&quot;ri-thumb-up-line ri-lg&quot;&gt;&lt;&#x2F;i&gt;
        
        &lt;p&gt;&lt;strong&gt;Good&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
        
    &lt;&#x2F;div&gt; 
    &lt;div class=&quot;content&quot;&gt;
        &lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#303136;color:#afb0b6;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3b3;&quot;&gt;FakeIntern &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;public &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3b3;&quot;&gt;CoffeeMaker &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;public&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3b8c2;&quot;&gt;MakeCoffee&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt; std::function&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;()&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;callback&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;    std::unique_lock&amp;lt;std::mutex&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;lock&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;(mut_);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;    cv_.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;wait&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;(lock, [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;] { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt; ready_; });
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;callback&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;    done_ &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;    lock.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;unlock&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;    cv_.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;notify_one&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3b8c2;&quot;&gt;SignalAndWait&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;() {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;    std::unique_lock&amp;lt;std::mutex&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;lock&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;(mut_);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;    ready_ &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;    cv_.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;notify_one&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;    cv_.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;wait&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;(lock, [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;] { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt; done_; });
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;private&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;bool&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt; ready_ &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;bool&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt; done_ &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  std::condition_variable cv_;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  std::mutex mut_;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;TEST&lt;&#x2F;span&gt;&lt;span&gt;(EmployeeTest, ShouldBeCaffeinatedOnlyAfterDrinkingCoffee) {
&lt;&#x2F;span&gt;&lt;span&gt;  Employee e;
&lt;&#x2F;span&gt;&lt;span&gt;  FakeIntern i;
&lt;&#x2F;span&gt;&lt;span&gt;  e.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;DemandCoffee&lt;&#x2F;span&gt;&lt;span&gt;(i);
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;EXPECT_FALSE&lt;&#x2F;span&gt;&lt;span&gt;(e.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;IsCaffeinated&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;  i.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;SignalAndWait&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;EXPECT_TRUE&lt;&#x2F;span&gt;&lt;span&gt;(e.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;IsCaffeinated&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;

    &lt;&#x2F;div&gt;
&lt;&#x2F;blockquote&gt;</content>
	</entry>
	<entry xml:lang="en">
		<title>Defeat &quot;Static Cling&quot;</title>
		<published>2008-06-26T00:00:00+00:00</published>
		<updated>2008-06-26T00:00:00+00:00</updated>
		<link href="https://ajguerrer.github.io/blog/tott/defeat-static-cling/" type="text/html"/>
		<id>https://ajguerrer.github.io/blog/tott/defeat-static-cling/</id>
		<content type="html">&lt;p&gt;Static functions, like this singleton &lt;code&gt;GetInstance&lt;&#x2F;code&gt; method, are a sign of tight coupling.&lt;&#x2F;p&gt;
&lt;blockquote class=&quot;note bad&quot;&gt;
    &lt;div class=&quot;header&quot;&gt;
        &lt;i class=&quot;ri-thumb-down-line ri-lg&quot;&gt;&lt;&#x2F;i&gt;
        
        &lt;p&gt;&lt;strong&gt;Bad&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
        
    &lt;&#x2F;div&gt; 
    &lt;div class=&quot;content&quot;&gt;
        &lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#303136;color:#afb0b6;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3b3;&quot;&gt;MyObject &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;public&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3b8c2;&quot;&gt;DoSomething&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;TheirEntity::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;GetInstance&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;GetSomething&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;(id);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;

    &lt;&#x2F;div&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;There is a way around this using the Repository Pattern.&lt;&#x2F;p&gt;
&lt;blockquote class=&quot;note good&quot;&gt;
    &lt;div class=&quot;header&quot;&gt;
        &lt;i class=&quot;ri-thumb-up-line ri-lg&quot;&gt;&lt;&#x2F;i&gt;
        
        &lt;p&gt;&lt;strong&gt;Good&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
        
    &lt;&#x2F;div&gt; 
    &lt;div class=&quot;content&quot;&gt;
        &lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#303136;color:#afb0b6;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3b3;&quot;&gt;TheirEntityRepository &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;public&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;virtual &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3b8c2;&quot;&gt;~TheirEntityRepository&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;() &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;default&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;virtual&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt; TheirEntity&lt;&#x2F;span&gt;&lt;span&gt;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3b8c2;&quot;&gt;GetInstance&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;() &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#797b86;&quot;&gt;&#x2F;&#x2F; Other static methods here
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3b3;&quot;&gt;TheirEntityStaticRepository &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;public &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3b3;&quot;&gt;TheirEntityRepository &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;public&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  TheirEntity&lt;&#x2F;span&gt;&lt;span&gt;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3b8c2;&quot;&gt;GetInstance&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;() { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;TheirEntity::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;GetInstance&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;(); }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3b3;&quot;&gt;MyObject &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;public&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;explicit &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3b8c2;&quot;&gt;MyObject&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;(std::unique_ptr&amp;lt;TheirEntityRepository&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;repository&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;      : &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;repository_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;(std::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;move&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;(repository)) {}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3b8c2;&quot;&gt;DoSomething&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;) { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt; repository_-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;GetInstance&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;GetSomething&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;(); }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;private&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  std::unique_ptr&amp;lt;TheirEntityRepository&amp;gt; repository_;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;

    &lt;&#x2F;div&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;All thats left is to derive a &lt;code&gt;MockTheirEntityRepository&lt;&#x2F;code&gt; suitable for your testing needs.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Testable Contracts Make Exceptional Neighbors</title>
		<published>2008-05-28T00:00:00+00:00</published>
		<updated>2008-05-28T00:00:00+00:00</updated>
		<link href="https://ajguerrer.github.io/blog/tott/testable-contracts-make-exceptional-neighbors/" type="text/html"/>
		<id>https://ajguerrer.github.io/blog/tott/testable-contracts-make-exceptional-neighbors/</id>
		<content type="html">&lt;p&gt;Modify external visible state only after completing all operations which could possibly fail.&lt;&#x2F;p&gt;
&lt;blockquote class=&quot;note bad&quot;&gt;
    &lt;div class=&quot;header&quot;&gt;
        &lt;i class=&quot;ri-thumb-down-line ri-lg&quot;&gt;&lt;&#x2F;i&gt;
        
        &lt;p&gt;&lt;strong&gt;Bad&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
        
    &lt;&#x2F;div&gt; 
    &lt;div class=&quot;content&quot;&gt;
        &lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#303136;color:#afb0b6;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;bool &lt;&#x2F;span&gt;&lt;span&gt;SomeCollection::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3b8c2;&quot;&gt;GetObjects&lt;&#x2F;span&gt;&lt;span&gt;(std::vector&amp;lt;Object&amp;gt;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;objects&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  objects.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;clear&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;const auto&lt;&#x2F;span&gt;&lt;span&gt;&amp;amp; object : collection_) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(object.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;IsFubarred&lt;&#x2F;span&gt;&lt;span&gt;()) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    objects.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;push_back&lt;&#x2F;span&gt;&lt;span&gt;(object);
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;

    &lt;&#x2F;div&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;In these situations, the &lt;code&gt;swap&lt;&#x2F;code&gt; trick comes in handy.&lt;&#x2F;p&gt;
&lt;blockquote class=&quot;note good&quot;&gt;
    &lt;div class=&quot;header&quot;&gt;
        &lt;i class=&quot;ri-thumb-up-line ri-lg&quot;&gt;&lt;&#x2F;i&gt;
        
        &lt;p&gt;&lt;strong&gt;Good&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
        
    &lt;&#x2F;div&gt; 
    &lt;div class=&quot;content&quot;&gt;
        &lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#303136;color:#afb0b6;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;bool &lt;&#x2F;span&gt;&lt;span&gt;SomeCollection::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3b8c2;&quot;&gt;GetObjects&lt;&#x2F;span&gt;&lt;span&gt;(std::vector&amp;lt;Object&amp;gt;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;objects&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  std::vector&amp;lt;Object&amp;gt; known_good_objects;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;const auto&lt;&#x2F;span&gt;&lt;span&gt;&amp;amp; object : collection_) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(object.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;IsFubarred&lt;&#x2F;span&gt;&lt;span&gt;()) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    known_good_objects.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;push_back&lt;&#x2F;span&gt;&lt;span&gt;(object);
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;  objects.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;swap&lt;&#x2F;span&gt;&lt;span&gt;(known_good_objects);
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;

    &lt;&#x2F;div&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Now, the caller has good objects on success, or unchanged objects on failure.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Understanding Your Coverage Data</title>
		<published>2008-03-06T00:00:00+00:00</published>
		<updated>2008-03-06T00:00:00+00:00</updated>
		<link href="https://ajguerrer.github.io/blog/tott/understanding-your-coverage-data/" type="text/html"/>
		<id>https://ajguerrer.github.io/blog/tott/understanding-your-coverage-data/</id>
		<content type="html">&lt;p&gt;High test coverage is necessary but not sufficient.&lt;&#x2F;p&gt;
&lt;p&gt;Use your test coverage results to look for unexpected coverage patterns, which usually indicate
bugs, and add test cases to address them.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Too Many Tests</title>
		<published>2008-02-21T00:00:00+00:00</published>
		<updated>2008-02-21T00:00:00+00:00</updated>
		<link href="https://ajguerrer.github.io/blog/tott/too-many-tests/" type="text/html"/>
		<id>https://ajguerrer.github.io/blog/tott/too-many-tests/</id>
		<content type="html">&lt;p&gt;How many tests? Answering this question requires a good grasp of the context.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#303136;color:#afb0b6;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3b8c2;&quot;&gt;Decide&lt;&#x2F;span&gt;&lt;span&gt;(int32_t &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span&gt;, int32_t &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span&gt;, int32_t &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;c&lt;&#x2F;span&gt;&lt;span&gt;, int32_t &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;d&lt;&#x2F;span&gt;&lt;span&gt;, int32_t &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;e&lt;&#x2F;span&gt;&lt;span&gt;, int32_t &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;d&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(a &amp;gt; b || c &amp;gt; d || e &amp;gt; f) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;DoOneThing&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;  } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;DoAnother&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;Testing every possible input would require 2&lt;sup&gt;192&lt;&#x2F;sup&gt; tests. Thats too many.&lt;&#x2F;li&gt;
&lt;li&gt;Testing enough to get full line coverage would require 2 tests. Thats too few.&lt;&#x2F;li&gt;
&lt;li&gt;Testing each logical expression (e.g &lt;code&gt;a &amp;gt; b&lt;&#x2F;code&gt;, &lt;code&gt;a == b&lt;&#x2F;code&gt;, &lt;code&gt;a &amp;lt; b&lt;&#x2F;code&gt;) independently is 27 tests. Still
probably too many.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;More context can focus the decision.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#303136;color:#afb0b6;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3b8c2;&quot;&gt;Decide&lt;&#x2F;span&gt;&lt;span&gt;(int32_t &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span&gt;, int32_t &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span&gt;, int32_t &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;c&lt;&#x2F;span&gt;&lt;span&gt;, int32_t &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;d&lt;&#x2F;span&gt;&lt;span&gt;, int32_t &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;e&lt;&#x2F;span&gt;&lt;span&gt;, int32_t &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;d&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;TallerThan&lt;&#x2F;span&gt;&lt;span&gt;(a, b) || &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;HarderThan&lt;&#x2F;span&gt;&lt;span&gt;(c, d) || &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;HeavierThan&lt;&#x2F;span&gt;&lt;span&gt;(e, f)) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;DoOneThing&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;  } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;DoAnother&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;bool &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3b8c2;&quot;&gt;TallerThan&lt;&#x2F;span&gt;&lt;span&gt;(int32_t &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span&gt;, int32_t &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span&gt;) { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; a &amp;gt; b; }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;bool &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3b8c2;&quot;&gt;HarderThan&lt;&#x2F;span&gt;&lt;span&gt;(int32_t &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;c&lt;&#x2F;span&gt;&lt;span&gt;, int32_t &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;d&lt;&#x2F;span&gt;&lt;span&gt;) { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; d &amp;gt; d; }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;bool &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3b8c2;&quot;&gt;HeavierThan&lt;&#x2F;span&gt;&lt;span&gt;(int32_t &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;e&lt;&#x2F;span&gt;&lt;span&gt;, int32_t &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;) { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; e &amp;gt; f; }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Testing the cases where each extracted function is true, they all are false, and writing 2 tests for
each of the extracted functions would require 4 + 3*2 = 10 tests. Considering the number of inputs,
thats just enough tests.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Avoiding Friend Twister in C++</title>
		<published>2007-10-30T00:00:00+00:00</published>
		<updated>2007-10-30T00:00:00+00:00</updated>
		<link href="https://ajguerrer.github.io/blog/tott/avoiding-friend-twister-in-c/" type="text/html"/>
		<id>https://ajguerrer.github.io/blog/tott/avoiding-friend-twister-in-c/</id>
		<content type="html">&lt;p&gt;&amp;quot;Testing private members requires more &lt;code&gt;friend&lt;&#x2F;code&gt; contortions than a game of Twister®.&amp;quot;&lt;&#x2F;p&gt;
&lt;p&gt;If you find yourself saying that, theres a better way.&lt;&#x2F;p&gt;
&lt;blockquote class=&quot;note bad&quot;&gt;
    &lt;div class=&quot;header&quot;&gt;
        &lt;i class=&quot;ri-thumb-down-line ri-lg&quot;&gt;&lt;&#x2F;i&gt;
        
        &lt;p&gt;&lt;strong&gt;Bad&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
        
    &lt;&#x2F;div&gt; 
    &lt;div class=&quot;content&quot;&gt;
        &lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#303136;color:#afb0b6;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#797b86;&quot;&gt;&#x2F;&#x2F; include&#x2F;my_project&#x2F;dashboard.h
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3b3;&quot;&gt;Dashboard &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;private&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#797b86;&quot;&gt;&#x2F;&#x2F; Declaration of functions getResults(), GetResultsFromCache(),
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#797b86;&quot;&gt;&#x2F;&#x2F; GetResultsFromDatabase(), and CountPassFail()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  std::unique_ptr&amp;lt;Database&amp;gt; database_; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#797b86;&quot;&gt;&#x2F;&#x2F; instantiated in constructor
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;friend class&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt; DashboardTest; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#797b86;&quot;&gt;&#x2F;&#x2F; one friend declaration per test fixture
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;

    &lt;&#x2F;div&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Instead, make a helper class by extracting a helper class (a variant of the Pimple idiom).&lt;&#x2F;p&gt;
&lt;p&gt;To preserve privacy, the helper class is tucked away in a private implementation directory separate
from the public API.&lt;&#x2F;p&gt;
&lt;blockquote class=&quot;note good&quot;&gt;
    &lt;div class=&quot;header&quot;&gt;
        &lt;i class=&quot;ri-thumb-up-line ri-lg&quot;&gt;&lt;&#x2F;i&gt;
        
        &lt;p&gt;&lt;strong&gt;Good&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
        
    &lt;&#x2F;div&gt; 
    &lt;div class=&quot;content&quot;&gt;
        &lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#303136;color:#afb0b6;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#797b86;&quot;&gt;&#x2F;&#x2F; include&#x2F;my_project&#x2F;dashboard.h
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3b3;&quot;&gt;ResultsLog&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#797b86;&quot;&gt;&#x2F;&#x2F; Foreword declare extracted helper interface
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3b3;&quot;&gt;Dashboard &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;public&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;explicit &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3b8c2;&quot;&gt;Dashboard&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;(std::unique_ptr&amp;lt;ResultsLog&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;results&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;      : &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;results_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;(std::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;move&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;(results)) {}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;private&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;   std::unique_ptr&amp;lt;ResultsLog&amp;gt; results_;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#797b86;&quot;&gt;&#x2F;&#x2F; src&#x2F;results_log.h
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3b3;&quot;&gt;ResultsLog &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;public&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#797b86;&quot;&gt;&#x2F;&#x2F; Declaration of functions getResults(), GetResultsFromCache(),
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#797b86;&quot;&gt;&#x2F;&#x2F; GetResultsFromDatabase(), and CountPassFail()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#797b86;&quot;&gt;&#x2F;&#x2F; src&#x2F;live_results_log.h
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3b3;&quot;&gt;LiveResultsLog &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;public &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3b3;&quot;&gt;ResultsLog &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;public&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;explicit &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3b8c2;&quot;&gt;LiveResultsLog&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;(std::unique&amp;lt;Database&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;database&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;      : &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;database_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;(std::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;move&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;(database)) {}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;

    &lt;&#x2F;div&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;As an added bonus, now you can inject a &lt;code&gt;MockResultsLog&lt;&#x2F;code&gt; or a &lt;code&gt;FakeDatabase&lt;&#x2F;code&gt; for testing the
&lt;code&gt;Dashboard&lt;&#x2F;code&gt; class.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Refactoring Tests in the Red</title>
		<published>2007-04-26T00:00:00+00:00</published>
		<updated>2007-04-26T00:00:00+00:00</updated>
		<link href="https://ajguerrer.github.io/blog/tott/refactoring-tests-in-the-red/" type="text/html"/>
		<id>https://ajguerrer.github.io/blog/tott/refactoring-tests-in-the-red/</id>
		<content type="html">&lt;p&gt;As your test suite grows, you will find yourself needing to refactor your tests. However,
your tests don&#x27;t have tests!&lt;&#x2F;p&gt;
&lt;p&gt;One thing you can do is intentionally break the test, refactor the test, and make sure the test
still fails as expected.&lt;&#x2F;p&gt;
&lt;p&gt;Just remember to revert your code under test!&lt;&#x2F;p&gt;
</content>
	</entry>
</feed>