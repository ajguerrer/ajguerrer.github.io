<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
	<title>ajguerrer::blog</title>
	<subtitle>Andrew Guerrero&#x27;s blog.</subtitle>
	<link href="https://ajguerrer.github.io/blog/feed.xml" rel="self" type="application/atom+xml"/>
    <link href="https://ajguerrer.github.io/blog/"/>
	<updated>2022-02-07T00:00:00+00:00</updated>
	<id>https://ajguerrer.github.io/blog/feed.xml</id>
	<entry xml:lang="en">
		<title>Now You&#x27;re Thinking With Functions</title>
		<published>2022-02-07T00:00:00+00:00</published>
		<updated>2022-02-07T00:00:00+00:00</updated>
		<link href="https://ajguerrer.github.io/blog/tott/now-youre-thinking-with-functions/" type="text/html"/>
		<id>https://ajguerrer.github.io/blog/tott/now-youre-thinking-with-functions/</id>
		<content type="html">&lt;p&gt;Creating &lt;code&gt;for&lt;&#x2F;code&gt; loops with the same repeated pattern contributes to maintenance burden.&lt;&#x2F;p&gt;
&lt;blockquote class=&quot;note bad&quot;&gt;
    &lt;div class=&quot;header&quot;&gt;
        &lt;i class=&quot;ri-thumb-down-line ri-lg&quot;&gt;&lt;&#x2F;i&gt;
        
        &lt;p&gt;&lt;strong&gt;Bad&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
        
    &lt;&#x2F;div&gt; 
    &lt;div class=&quot;content&quot;&gt;
        &lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#303136;color:#afb0b6;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;bool&lt;&#x2F;span&gt;&lt;span&gt; every_request_valid = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; Request request : requests)
&lt;&#x2F;span&gt;&lt;span&gt;  {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;IsValid&lt;&#x2F;span&gt;&lt;span&gt;(request))
&lt;&#x2F;span&gt;&lt;span&gt;    {
&lt;&#x2F;span&gt;&lt;span&gt;      every_request_valid = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;break&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(every_request_valid)
&lt;&#x2F;span&gt;&lt;span&gt;  {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#797b86;&quot;&gt;&#x2F;&#x2F; do something
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#303136;color:#afb0b6;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;bool&lt;&#x2F;span&gt;&lt;span&gt; every_user_valid = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; User user : users)
&lt;&#x2F;span&gt;&lt;span&gt;  {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;IsValid&lt;&#x2F;span&gt;&lt;span&gt;(user))
&lt;&#x2F;span&gt;&lt;span&gt;    {
&lt;&#x2F;span&gt;&lt;span&gt;      every_user_valid = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;break&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(every_user_valid)
&lt;&#x2F;span&gt;&lt;span&gt;  {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#797b86;&quot;&gt;&#x2F;&#x2F; do something
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;

    &lt;&#x2F;div&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Using higher-order functions can help reduce duplication and make the code easier to read.&lt;&#x2F;p&gt;
&lt;blockquote class=&quot;note good&quot;&gt;
    &lt;div class=&quot;header&quot;&gt;
        &lt;i class=&quot;ri-thumb-up-line ri-lg&quot;&gt;&lt;&#x2F;i&gt;
        
        &lt;p&gt;&lt;strong&gt;Good&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
        
    &lt;&#x2F;div&gt; 
    &lt;div class=&quot;content&quot;&gt;
        &lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#303136;color:#afb0b6;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(std::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;all_of&lt;&#x2F;span&gt;&lt;span&gt;(requests.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;begin&lt;&#x2F;span&gt;&lt;span&gt;(), requests.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;end&lt;&#x2F;span&gt;&lt;span&gt;(), IsValid))
&lt;&#x2F;span&gt;&lt;span&gt;  {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#797b86;&quot;&gt;&#x2F;&#x2F; do something
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#303136;color:#afb0b6;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(std::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;all_of&lt;&#x2F;span&gt;&lt;span&gt;(users.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;begin&lt;&#x2F;span&gt;&lt;span&gt;(), users.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;end&lt;&#x2F;span&gt;&lt;span&gt;(), IsValid))
&lt;&#x2F;span&gt;&lt;span&gt;  {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#797b86;&quot;&gt;&#x2F;&#x2F; do something
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;

    &lt;&#x2F;div&gt;
&lt;&#x2F;blockquote&gt;&lt;blockquote class=&quot;note info&quot;&gt;
    &lt;div class=&quot;header&quot;&gt;
        &lt;i class=&quot;ri-information-line ri-lg&quot;&gt;&lt;&#x2F;i&gt;
        
        &lt;p&gt;&lt;strong&gt;Note&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
        
    &lt;&#x2F;div&gt; 
    &lt;div class=&quot;content&quot;&gt;
        &lt;p&gt;This is not to say that &lt;code&gt;for&lt;&#x2F;code&gt; loops are considered harmful and should never be used. In each case,
consider the right tool for the job.&lt;&#x2F;p&gt;

    &lt;&#x2F;div&gt;
&lt;&#x2F;blockquote&gt;</content>
	</entry>
	<entry xml:lang="en">
		<title>Separation of Concerns? That&#x27;s a Wrap!</title>
		<published>2020-12-09T00:00:00+00:00</published>
		<updated>2020-12-09T00:00:00+00:00</updated>
		<link href="https://ajguerrer.github.io/blog/tott/separation-of-concerns-thats-a-wrap/" type="text/html"/>
		<id>https://ajguerrer.github.io/blog/tott/separation-of-concerns-thats-a-wrap/</id>
		<content type="html">&lt;p&gt;Combining domain logic with third party API calls makes code that is harder to understand especially
if the API details creep outside of the call site.&lt;&#x2F;p&gt;
&lt;blockquote class=&quot;note bad&quot;&gt;
    &lt;div class=&quot;header&quot;&gt;
        &lt;i class=&quot;ri-thumb-down-line ri-lg&quot;&gt;&lt;&#x2F;i&gt;
        
        &lt;p&gt;&lt;strong&gt;Bad&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
        
    &lt;&#x2F;div&gt; 
    &lt;div class=&quot;content&quot;&gt;
        &lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#303136;color:#afb0b6;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span&gt;absl::StatusOr&amp;lt;speedy_img::Image&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3b8c2;&quot;&gt;GetThumbnails&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    absl::Span&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; speedy_img::Decoder&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;decoders&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    absl::Span&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; std::byte&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;data&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; speedy_img::Options options = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;GetDefaultConvertOptions&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; speedy_img::Decoder decoder : decoders) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; speedy_img::Result decode_result =
&lt;&#x2F;span&gt;&lt;span&gt;        decoder.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;Decode&lt;&#x2F;span&gt;&lt;span&gt;(decoder.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;FormatBytes&lt;&#x2F;span&gt;&lt;span&gt;(data));
&lt;&#x2F;span&gt;&lt;span&gt;    speedy_img::Image image = decode_result.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;GetImage&lt;&#x2F;span&gt;&lt;span&gt;(options);
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    absl::Status result = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;ValidateGoodImage&lt;&#x2F;span&gt;&lt;span&gt;(image);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(result.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;ok&lt;&#x2F;span&gt;&lt;span&gt;()) {
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;absl::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;StatusOr&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;speedy_img::Image&amp;gt;(std::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;move&lt;&#x2F;span&gt;&lt;span&gt;(image));
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;absl::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;InvalidArgumentError&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a8c2a3;&quot;&gt;unable to decode image with any decoder&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;

    &lt;&#x2F;div&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Encapsulate the external API in a wrapper with a readable interface that insulates the API from the
rest of the codebase. &lt;&#x2F;p&gt;
&lt;blockquote class=&quot;note good&quot;&gt;
    &lt;div class=&quot;header&quot;&gt;
        &lt;i class=&quot;ri-thumb-up-line ri-lg&quot;&gt;&lt;&#x2F;i&gt;
        
        &lt;p&gt;&lt;strong&gt;Good&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
        
    &lt;&#x2F;div&gt; 
    &lt;div class=&quot;content&quot;&gt;
        &lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#303136;color:#afb0b6;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span&gt;absl::StatusOr&amp;lt;Image&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3b8c2;&quot;&gt;GetThumbnails&lt;&#x2F;span&gt;&lt;span&gt;(absl::Span&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; ImageDecoder&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;decoders&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;                                    absl::Span&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; std::byte&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;data&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; ImageDecoder decoder : decoders) {
&lt;&#x2F;span&gt;&lt;span&gt;    absl::StatusOr&amp;lt;Image&amp;gt; result = decoder.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;Decode&lt;&#x2F;span&gt;&lt;span&gt;(data);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(result.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;ok&lt;&#x2F;span&gt;&lt;span&gt;()) {
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; result;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;absl::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;InvalidArgumentError&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a8c2a3;&quot;&gt;unable to decode image with any decoder&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;

    &lt;&#x2F;div&gt;
&lt;&#x2F;blockquote&gt;&lt;blockquote class=&quot;note info&quot;&gt;
    &lt;div class=&quot;header&quot;&gt;
        &lt;i class=&quot;ri-information-line ri-lg&quot;&gt;&lt;&#x2F;i&gt;
        
        &lt;p&gt;&lt;strong&gt;Note&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
        
    &lt;&#x2F;div&gt; 
    &lt;div class=&quot;content&quot;&gt;
        &lt;p&gt;Not all external APIs need to be wrapped. For example, the &lt;code&gt;absl&lt;&#x2F;code&gt; library provides fundamental
library types; wrapping the API would not make a clear improvement to the code.&lt;&#x2F;p&gt;

    &lt;&#x2F;div&gt;
&lt;&#x2F;blockquote&gt;</content>
	</entry>
	<entry xml:lang="en">
		<title>Avoid Hardcoding Values for Better Libraries</title>
		<published>2020-08-19T00:00:00+00:00</published>
		<updated>2020-08-19T00:00:00+00:00</updated>
		<link href="https://ajguerrer.github.io/blog/tott/avoid-hardcoding-values-for-better-libraries/" type="text/html"/>
		<id>https://ajguerrer.github.io/blog/tott/avoid-hardcoding-values-for-better-libraries/</id>
		<content type="html">&lt;p&gt;Naming constants is good practice, but they are still hardcoded values that can make library code
less reusable and less predictable.&lt;&#x2F;p&gt;
&lt;blockquote class=&quot;note bad&quot;&gt;
    &lt;div class=&quot;header&quot;&gt;
        &lt;i class=&quot;ri-thumb-down-line ri-lg&quot;&gt;&lt;&#x2F;i&gt;
        
        &lt;p&gt;&lt;strong&gt;Bad&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
        
    &lt;&#x2F;div&gt; 
    &lt;div class=&quot;content&quot;&gt;
        &lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#303136;color:#afb0b6;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;constexpr int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;kThumbnailSizes&lt;&#x2F;span&gt;&lt;span&gt;[] = {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;480&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;576&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;720&lt;&#x2F;span&gt;&lt;span&gt;};
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#797b86;&quot;&gt;&#x2F;&#x2F; Returns thumbnails of various sizes for the given image.
&lt;&#x2F;span&gt;&lt;span&gt;std::vector&amp;lt;Image&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3b8c2;&quot;&gt;GetThumbnails&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; Image&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;image&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;  std::vector&amp;lt;Image&amp;gt; thumbnails;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;const int&lt;&#x2F;span&gt;&lt;span&gt; size : &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;kThumbnailSizes&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    thumbnails.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;push_back&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;ResizeImage&lt;&#x2F;span&gt;&lt;span&gt;(image, size));
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; thumbnails;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;

    &lt;&#x2F;div&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Instead, let the caller decide.&lt;&#x2F;p&gt;
&lt;blockquote class=&quot;note good&quot;&gt;
    &lt;div class=&quot;header&quot;&gt;
        &lt;i class=&quot;ri-thumb-up-line ri-lg&quot;&gt;&lt;&#x2F;i&gt;
        
        &lt;p&gt;&lt;strong&gt;Good&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
        
    &lt;&#x2F;div&gt; 
    &lt;div class=&quot;content&quot;&gt;
        &lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#303136;color:#afb0b6;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#797b86;&quot;&gt;&#x2F;&#x2F; Returns thumbnails of various sizes for the given image.
&lt;&#x2F;span&gt;&lt;span&gt;std::vector&amp;lt;Image&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3b8c2;&quot;&gt;GetThumbnails&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; Image&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;image&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;                                 absl::Span&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;const int&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;sizes&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;  std::vector&amp;lt;Image&amp;gt; thumbnails;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;const int&lt;&#x2F;span&gt;&lt;span&gt; size : sizes) {
&lt;&#x2F;span&gt;&lt;span&gt;    thumbnails.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;push_back&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;ResizeImage&lt;&#x2F;span&gt;&lt;span&gt;(image, size));
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; thumbnails;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#303136;color:#afb0b6;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#797b86;&quot;&gt;&#x2F;&#x2F; Declared in the public header.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;inline constexpr int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;kDefaultThumbnailSizes&lt;&#x2F;span&gt;&lt;span&gt;[] = {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;480&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;576&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;720&lt;&#x2F;span&gt;&lt;span&gt;};
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#797b86;&quot;&gt;&#x2F;&#x2F; Default argument allows the function to be used without specifying a size.
&lt;&#x2F;span&gt;&lt;span&gt;std::vector&amp;lt;Image&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3b8c2;&quot;&gt;GetThumbnails&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; Image&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;image&lt;&#x2F;span&gt;&lt;span&gt;, absl::Span&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;const int&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;sizes &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;kDefaultThumbnailSizes&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;

    &lt;&#x2F;div&gt;
&lt;&#x2F;blockquote&gt;</content>
	</entry>
	<entry xml:lang="en">
		<title>Part 1: The Bigger Picture</title>
		<published>2020-01-06T00:00:00+00:00</published>
		<updated>2020-01-06T00:00:00+00:00</updated>
		<link href="https://ajguerrer.github.io/blog/unit-testing/1-bigger-picture/" type="text/html"/>
		<id>https://ajguerrer.github.io/blog/unit-testing/1-bigger-picture/</id>
		<content type="html">&lt;h2 id=&quot;what-makes-a-good-or-bad-test&quot;&gt;What Makes a Good or Bad Test?&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;Unit testing enables &lt;em&gt;sustainable&lt;&#x2F;em&gt; growth in software projects by acting as a form of insurance 
against regressions. A good test has a lower maintenance cost than the cost of fixing the bugs it 
prevents.&lt;&#x2F;li&gt;
&lt;li&gt;Code is a liability, not an asset, and tests are code too. Tests that don&#x27;t verify business value, 
raise false alarms, run slow, and are difficult to maintain, do more harm than good.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;code-coverage-metrics&quot;&gt;Code Coverage Metrics&lt;&#x2F;h2&gt;
&lt;p&gt;Coverage metrics are a good negative indicator for test quality, but a bad positive one.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;curly-braces&quot;&gt;Curly Braces&lt;&#x2F;h4&gt;
&lt;p&gt;Curly braces count.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#303136;color:#afb0b6;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;bool &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3b8c2;&quot;&gt;IsStringLong&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; std::string&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;input&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(input.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;length&lt;&#x2F;span&gt;&lt;span&gt;() &amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;TEST&lt;&#x2F;span&gt;&lt;span&gt;(IsStringLong, ShortString) {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;bool&lt;&#x2F;span&gt;&lt;span&gt; result = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;IsStringLong&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a8c2a3;&quot;&gt;abc&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;EXPECT_EQ&lt;&#x2F;span&gt;&lt;span&gt;(result, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;75% of 4 lines covered.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;refactoring&quot;&gt;Refactoring&lt;&#x2F;h4&gt;
&lt;p&gt;Refactoring can be used to &amp;quot;game&amp;quot; coverage by condensing the code.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#303136;color:#afb0b6;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;bool &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3b8c2;&quot;&gt;IsStringLong&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; std::string&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;input&lt;&#x2F;span&gt;&lt;span&gt;) { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; input.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;length&lt;&#x2F;span&gt;&lt;span&gt;() &amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;; }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;100% of 1 line covered.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;test-quality&quot;&gt;Test Quality&lt;&#x2F;h4&gt;
&lt;p&gt;Coverage metrics say nothing about the quality of the test.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#303136;color:#afb0b6;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;bool &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3b8c2;&quot;&gt;IsStringLong&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; std::string&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;input&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(input.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;length&lt;&#x2F;span&gt;&lt;span&gt;() &amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;TEST&lt;&#x2F;span&gt;&lt;span&gt;(IsStringLong, ShortString) {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;bool&lt;&#x2F;span&gt;&lt;span&gt; result1 = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;IsStringLong&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a8c2a3;&quot;&gt;abc&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;bool&lt;&#x2F;span&gt;&lt;span&gt; result2 = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;IsStringLong&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a8c2a3;&quot;&gt;abcdef&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;100% of 4 lines covered.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;external-dependencies&quot;&gt;External Dependencies&lt;&#x2F;h4&gt;
&lt;p&gt;Coverage metrics do not include coverage of external libraries.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#303136;color:#afb0b6;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3b8c2;&quot;&gt;Parse&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; std::string&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;input&lt;&#x2F;span&gt;&lt;span&gt;) { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;std::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3b8c2;&quot;&gt;atoi&lt;&#x2F;span&gt;&lt;span&gt;(input.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;c_str&lt;&#x2F;span&gt;&lt;span&gt;()); }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;TEST&lt;&#x2F;span&gt;&lt;span&gt;(IsStringLong, ShortString) {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; result = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;Parse&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a8c2a3;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;EXPECT_EQ&lt;&#x2F;span&gt;&lt;span&gt;(result, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;100% of 1 line covered.&lt;&#x2F;p&gt;
&lt;blockquote class=&quot;note tip&quot;&gt;
    &lt;div class=&quot;header&quot;&gt;
        &lt;i class=&quot;ri-lightbulb-line ri-lg&quot;&gt;&lt;&#x2F;i&gt;
        
        &lt;p&gt;&lt;strong&gt;Tip&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
        
    &lt;&#x2F;div&gt; 
    &lt;div class=&quot;content&quot;&gt;
        &lt;p&gt;&lt;strong&gt;Hospital Analogy&lt;&#x2F;strong&gt; - Temperature is another good negative indicator, but a bad positive indicator. 
Nurses take temperature measurements to see if a patient&#x27;s body is unwell. But, regulating the 
patient&#x27;s temperature is never &lt;em&gt;the goal&lt;&#x2F;em&gt;. Otherwise, hospitals would tend towards more &amp;quot;effective&amp;quot; 
strategies, like dumping patients with fevers into ice baths. Instead, nurses continuously monitor 
a patients temperature while focusing on the root cause of the illness.&lt;&#x2F;p&gt;

    &lt;&#x2F;div&gt;
&lt;&#x2F;blockquote&gt;&lt;h2 id=&quot;what-makes-a-successful-test-suite&quot;&gt;What Makes a Successful Test Suite&lt;&#x2F;h2&gt;
&lt;p&gt;A successful test suite has the following properties:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Integrated into the development cycle.&lt;&#x2F;li&gt;
&lt;li&gt;Targets only the most important parts of the code base.&lt;&#x2F;li&gt;
&lt;li&gt;Provides maximum value with minimum maintenance costs.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;Enforcing test quality is a tough problem; one that requires personal judgement and skill.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;dependency-classification&quot;&gt;Dependency Classification&lt;&#x2F;h2&gt;
&lt;p&gt;Dependencies may be shared or private; mutable or immutable; internal or external.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Private&lt;&#x2F;strong&gt; - Managed and consumed exclusively by the executable.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Shared&lt;&#x2F;strong&gt; -  Managed and&#x2F;or consumed by another executable.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Immutable&lt;&#x2F;strong&gt; - State cannot change in the lifetime of the executable.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Mutable&lt;&#x2F;strong&gt; - State may change in the lifetime of the executable.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Internal&lt;&#x2F;strong&gt; - Exists within the executable.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;External&lt;&#x2F;strong&gt; Exists outside the executable.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;blockquote class=&quot;note info&quot;&gt;
    &lt;div class=&quot;header&quot;&gt;
        &lt;i class=&quot;ri-information-line ri-lg&quot;&gt;&lt;&#x2F;i&gt;
        
        &lt;p&gt;&lt;strong&gt;Info&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
        
    &lt;&#x2F;div&gt; 
    &lt;div class=&quot;content&quot;&gt;
        &lt;p&gt;Executable in this context may refer to a production application or a test executable containing a
suite of test(s).&lt;&#x2F;p&gt;

    &lt;&#x2F;div&gt;
&lt;&#x2F;blockquote&gt;&lt;h2 id=&quot;test-isolation&quot;&gt;Test Isolation&lt;&#x2F;h2&gt;
&lt;p&gt;Varying degrees of isolation can be used when writing tests:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Heavy Isolation&lt;&#x2F;strong&gt; - Replace all mutable dependencies with test doubles. Development tends to
start at the top of the object graph and work it&#x27;s way down.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Light Isolation&lt;&#x2F;strong&gt; - Replace all mutable, shared dependencies with test doubles. Development 
tends to start at the bottom of the object graph and work it&#x27;s way up.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;granularity&quot;&gt;Granularity&lt;&#x2F;h4&gt;
&lt;p&gt;Heavy isolation helps increase granularity. However, it is easy to fall into the trap of testing
&lt;em&gt;implementation details&lt;&#x2F;em&gt; instead of &lt;em&gt;behavior&lt;&#x2F;em&gt;. &lt;&#x2F;p&gt;
&lt;blockquote class=&quot;note bad&quot;&gt;
    &lt;div class=&quot;header&quot;&gt;
        &lt;i class=&quot;ri-thumb-down-line ri-lg&quot;&gt;&lt;&#x2F;i&gt;
        
        &lt;p&gt;&lt;strong&gt;Bad&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
        
    &lt;&#x2F;div&gt; 
    &lt;div class=&quot;content&quot;&gt;
        &lt;pre style=&quot;background-color:#303136;color:#afb0b6;&quot;&gt;&lt;code&gt;&lt;span&gt;When I call my dog, he moves his front left leg, 
&lt;&#x2F;span&gt;&lt;span&gt;followed by his front right leg, 
&lt;&#x2F;span&gt;&lt;span&gt;then the back right leg, 
&lt;&#x2F;span&gt;&lt;span&gt;his head turns, 
&lt;&#x2F;span&gt;&lt;span&gt;and the tail starts wagging.
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;

    &lt;&#x2F;div&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;What is the purpose of those movements?&lt;&#x2F;p&gt;
&lt;blockquote class=&quot;note good&quot;&gt;
    &lt;div class=&quot;header&quot;&gt;
        &lt;i class=&quot;ri-thumb-up-line ri-lg&quot;&gt;&lt;&#x2F;i&gt;
        
        &lt;p&gt;&lt;strong&gt;Good&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
        
    &lt;&#x2F;div&gt; 
    &lt;div class=&quot;content&quot;&gt;
        &lt;pre style=&quot;background-color:#303136;color:#afb0b6;&quot;&gt;&lt;code&gt;&lt;span&gt;When I call my dog, he comes right to me.
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;

    &lt;&#x2F;div&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;A test should tell a story about the problem your code helps to solve, and this story should be 
cohesive and meaningful to a business expert.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;coupling&quot;&gt;Coupling&lt;&#x2F;h4&gt;
&lt;p&gt;Heavy isolation can make it easier to test coupled classes. Substituting a classes dependencies with
test doubles can help break up coupling in a large graph of dependencies. However, dependance on 
test doubles is a good negative indicator of quality code design.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;feedback&quot;&gt;Feedback&lt;&#x2F;h4&gt;
&lt;p&gt;Heavy isolation makes it easier to narrow down bugs, while light isolation tends to produce 
cascades of failing tests. However, this issue can be mitigated by running tests regularly.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;test-structure&quot;&gt;Test Structure&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Arrange&lt;&#x2F;em&gt;, &lt;em&gt;Act&lt;&#x2F;em&gt;, then &lt;em&gt;Assert&lt;&#x2F;em&gt; (AAA).&lt;&#x2F;li&gt;
&lt;li&gt;Watch out for &lt;em&gt;Act&lt;&#x2F;em&gt; and &lt;em&gt;Assert&lt;&#x2F;em&gt; sections larger than one line, which may indicate the test: 
&lt;ul&gt;
&lt;li&gt;Verifies more than one behavior and needs to be split.&lt;&#x2F;li&gt;
&lt;li&gt;Requires verification of more than one outcome, a.k.a &lt;em&gt;invariant violation&lt;&#x2F;em&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;em&gt;Arrange&lt;&#x2F;em&gt; sections should not be placed inside test fixtures. Doing so:
&lt;ul&gt;
&lt;li&gt;Introduces coupling between tests.&lt;&#x2F;li&gt;
&lt;li&gt;Decreases readability.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Simplify tedious &lt;em&gt;Arrange&lt;&#x2F;em&gt; sections with the &lt;em&gt;factory pattern&lt;&#x2F;em&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;Avoid using conditional logic, including loop conditions.&lt;&#x2F;li&gt;
&lt;li&gt;Name tests using plain english, describing behavior from the perspective of a business expert.&lt;&#x2F;li&gt;
&lt;li&gt;Tests that verify the same behavior with different values may be parameterized, but never at the
expense of readability.&lt;&#x2F;li&gt;
&lt;li&gt;Consider an assertion library that reads fluently.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Part 2: Making your Tests Work for You</title>
		<published>2020-01-06T00:00:00+00:00</published>
		<updated>2020-01-06T00:00:00+00:00</updated>
		<link href="https://ajguerrer.github.io/blog/unit-testing/2-making-tests-work/" type="text/html"/>
		<id>https://ajguerrer.github.io/blog/unit-testing/2-making-tests-work/</id>
		<content type="html">&lt;h2 id=&quot;four-pillars-of-a-good-test&quot;&gt;Four Pillars of a Good Test&lt;&#x2F;h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Protection against regressions&lt;&#x2F;strong&gt; - Ability to indicate the presence of regressions.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Resistance to refactoring&lt;&#x2F;strong&gt; - Degree to which a test can sustain refactoring without producing
a false positive.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Fast feedback&lt;&#x2F;strong&gt; - Measure of how quickly the test executes.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Maintainability&lt;&#x2F;strong&gt; - Ability to read and run the test.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Error Types&lt;&#x2F;th&gt;&lt;th&gt;Functionality is Correct&lt;&#x2F;th&gt;&lt;th&gt;Functionality is Broken&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;Test Passes&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;True negative&lt;&#x2F;td&gt;&lt;td&gt;False negative (indicates poor protection against regressions)&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;Test Fails&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;False positive (indicates poor resistance to refactoring)&lt;&#x2F;td&gt;&lt;td&gt;True positive&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;p&gt;$$Test\ accuracy = {Signal \over Noise} = {True\ positives \over False\ positives}$$&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-ideal-test&quot;&gt;The Ideal Test&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Protection Against Regressions&lt;&#x2F;em&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;em&gt;Resistance to Refactoring&lt;&#x2F;em&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;em&gt;Fast Feedback&lt;&#x2F;em&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Choose two. &lt;&#x2F;p&gt;
&lt;div class=&quot;svg-content&quot;&gt;
&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;!DOCTYPE svg PUBLIC &quot;-&#x2F;&#x2F;W3C&#x2F;&#x2F;DTD SVG 1.1&#x2F;&#x2F;EN&quot; &quot;http:&#x2F;&#x2F;www.w3.org&#x2F;Graphics&#x2F;SVG&#x2F;1.1&#x2F;DTD&#x2F;svg11.dtd&quot;&gt;
&lt;svg xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot;
   xmlns:xlink=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;1999&#x2F;xlink&quot; version=&quot;1.1&quot; width=&quot;811px&quot; height=&quot;791px&quot; viewBox=&quot;-0.5 -0.5 811 791&quot;&gt;
   &lt;g&gt;
      &lt;ellipse cx=&quot;410.5&quot; cy=&quot;540.5&quot; rx=&quot;250&quot; ry=&quot;250&quot; fill-opacity=&quot;0.5&quot; class=&quot;yellow-circle&quot; stroke=&quot;none&quot; pointer-events=&quot;all&quot;&#x2F;&gt;
      &lt;ellipse cx=&quot;250.5&quot; cy=&quot;250.5&quot; rx=&quot;250&quot; ry=&quot;250&quot; fill-opacity=&quot;0.5&quot; class=&quot;blue-circle&quot; stroke=&quot;none&quot; pointer-events=&quot;all&quot;&#x2F;&gt;
      &lt;ellipse cx=&quot;560.5&quot; cy=&quot;250.5&quot; rx=&quot;250&quot; ry=&quot;250&quot; fill-opacity=&quot;0.5&quot; class=&quot;red-circle&quot; stroke=&quot;none&quot; pointer-events=&quot;all&quot;&#x2F;&gt;
      &lt;foreignObject pointer-events=&quot;none&quot; width=&quot;100%&quot; height=&quot;100%&quot; requiredFeatures=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;TR&#x2F;SVG11&#x2F;feature#Extensibility&quot; style=&quot;overflow: visible; text-align: left;&quot;&gt;
         &lt;div xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;1999&#x2F;xhtml&quot; style=&quot;display: flex; align-items: unsafe center; justify-content: unsafe center; width: 258px; height: 1px; padding-top: 221px; margin-left: 42px;&quot;&gt;
            &lt;div style=&quot;box-sizing: border-box; font-size: 0px; text-align: center;&quot;&gt;
               &lt;div style=&quot;display: inline-block; font-size: 24px; line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;&quot;&gt;
                  &lt;font style=&quot;font-size: 42px&quot;&gt;Protection Against Regressions&lt;&#x2F;font&gt;
               &lt;&#x2F;div&gt;
            &lt;&#x2F;div&gt;
         &lt;&#x2F;div&gt;
      &lt;&#x2F;foreignObject&gt;
      &lt;rect x=&quot;541&quot; y=&quot;132&quot; width=&quot;210&quot; height=&quot;178.5&quot; fill=&quot;none&quot; stroke=&quot;none&quot; pointer-events=&quot;all&quot;&#x2F;&gt;
      &lt;foreignObject pointer-events=&quot;none&quot; width=&quot;100%&quot; height=&quot;100%&quot; requiredFeatures=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;TR&#x2F;SVG11&#x2F;feature#Extensibility&quot; style=&quot;overflow: visible; text-align: left;&quot;&gt;
         &lt;div xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;1999&#x2F;xhtml&quot; style=&quot;display: flex; align-items: unsafe center; justify-content: unsafe center; width: 208px; height: 1px; padding-top: 221px; margin-left: 542px;&quot;&gt;
            &lt;div style=&quot;box-sizing: border-box; font-size: 0px; text-align: center;&quot;&gt;
               &lt;div style=&quot;display: inline-block; font-size: 42px; line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;&quot;&gt;Fast Feedback&lt;&#x2F;div&gt;
            &lt;&#x2F;div&gt;
         &lt;&#x2F;div&gt;
      &lt;&#x2F;foreignObject&gt;
      &lt;rect x=&quot;275.25&quot; y=&quot;532&quot; width=&quot;270.5&quot; height=&quot;161.5&quot; fill=&quot;none&quot; stroke=&quot;none&quot; pointer-events=&quot;all&quot;&#x2F;&gt;
      &lt;foreignObject pointer-events=&quot;none&quot; width=&quot;100%&quot; height=&quot;100%&quot; requiredFeatures=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;TR&#x2F;SVG11&#x2F;feature#Extensibility&quot; style=&quot;overflow: visible; text-align: left;&quot;&gt;
         &lt;div xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;1999&#x2F;xhtml&quot; style=&quot;display: flex; align-items: unsafe center; justify-content: unsafe center; width: 269px; height: 1px; padding-top: 613px; margin-left: 276px;&quot;&gt;
            &lt;div style=&quot;box-sizing: border-box; font-size: 0px; text-align: center;&quot;&gt;
               &lt;div style=&quot;display: inline-block; font-size: 42px; line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;&quot;&gt;Resistance to Refactoring&lt;&#x2F;div&gt;
            &lt;&#x2F;div&gt;
         &lt;&#x2F;div&gt;
      &lt;&#x2F;foreignObject&gt;
      &lt;rect x=&quot;355.25&quot; y=&quot;180.5&quot; width=&quot;110.5&quot; height=&quot;81.5&quot; fill=&quot;none&quot; stroke=&quot;none&quot; pointer-events=&quot;all&quot;&#x2F;&gt;
      &lt;foreignObject pointer-events=&quot;none&quot; width=&quot;100%&quot; height=&quot;100%&quot; requiredFeatures=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;TR&#x2F;SVG11&#x2F;feature#Extensibility&quot; style=&quot;overflow: visible; text-align: left;&quot;&gt;
         &lt;div xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;1999&#x2F;xhtml&quot; style=&quot;display: flex; align-items: unsafe flex-start; justify-content: unsafe center; width: 109px; height: 1px; padding-top: 188px; margin-left: 356px;&quot;&gt;
            &lt;div style=&quot;box-sizing: border-box; font-size: 0px; text-align: center;&quot;&gt;
               &lt;div style=&quot;display: inline-block; font-size: 28px; line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;&quot;&gt;Brittle Tests&lt;&#x2F;div&gt;
            &lt;&#x2F;div&gt;
         &lt;&#x2F;div&gt;
      &lt;&#x2F;foreignObject&gt;
      &lt;rect x=&quot;191&quot; y=&quot;412&quot; width=&quot;170&quot; height=&quot;50&quot; fill=&quot;none&quot; stroke=&quot;none&quot; pointer-events=&quot;all&quot;&#x2F;&gt;
      &lt;foreignObject pointer-events=&quot;none&quot; width=&quot;100%&quot; height=&quot;100%&quot; requiredFeatures=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;TR&#x2F;SVG11&#x2F;feature#Extensibility&quot; style=&quot;overflow: visible; text-align: left;&quot;&gt;
         &lt;div xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;1999&#x2F;xhtml&quot; style=&quot;display: flex; align-items: unsafe flex-start; justify-content: unsafe center; width: 168px; height: 1px; padding-top: 419px; margin-left: 192px;&quot;&gt;
            &lt;div style=&quot;box-sizing: border-box; font-size: 0px; text-align: center;&quot;&gt;
               &lt;div style=&quot;display: inline-block; font-size: 28px; line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;&quot;&gt;Large Tests&lt;&#x2F;div&gt;
            &lt;&#x2F;div&gt;
         &lt;&#x2F;div&gt;
      &lt;&#x2F;foreignObject&gt;
      &lt;rect x=&quot;441&quot; y=&quot;412&quot; width=&quot;180&quot; height=&quot;50&quot; fill=&quot;none&quot; stroke=&quot;none&quot; pointer-events=&quot;all&quot;&#x2F;&gt;
      &lt;foreignObject pointer-events=&quot;none&quot; width=&quot;100%&quot; height=&quot;100%&quot; requiredFeatures=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;TR&#x2F;SVG11&#x2F;feature#Extensibility&quot; style=&quot;overflow: visible; text-align: left;&quot;&gt;
         &lt;div xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;1999&#x2F;xhtml&quot; style=&quot;display: flex; align-items: unsafe flex-start; justify-content: unsafe center; width: 178px; height: 1px; padding-top: 419px; margin-left: 442px;&quot;&gt;
            &lt;div style=&quot;box-sizing: border-box; font-size: 0px; text-align: center;&quot;&gt;
               &lt;div style=&quot;display: inline-block; font-size: 28px; line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;&quot;&gt;Trivial Tests&lt;&#x2F;div&gt;
            &lt;&#x2F;div&gt;
         &lt;&#x2F;div&gt;
      &lt;&#x2F;foreignObject&gt;
      &lt;rect x=&quot;360.25&quot; y=&quot;310.5&quot; width=&quot;100.5&quot; height=&quot;70&quot; fill=&quot;none&quot; stroke=&quot;none&quot; pointer-events=&quot;all&quot;&#x2F;&gt;
      &lt;foreignObject pointer-events=&quot;none&quot; width=&quot;100%&quot; height=&quot;100%&quot; requiredFeatures=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;TR&#x2F;SVG11&#x2F;feature#Extensibility&quot; style=&quot;overflow: visible; text-align: left;&quot;&gt;
         &lt;div xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;1999&#x2F;xhtml&quot; style=&quot;display: flex; align-items: unsafe flex-start; justify-content: unsafe center; width: 1px; height: 1px; padding-top: 318px; margin-left: 411px;&quot;&gt;
            &lt;div style=&quot;box-sizing: border-box; font-size: 0px; text-align: center;&quot;&gt;
               &lt;div style=&quot;display: inline-block; font-size: 42px; line-height: 1.2; pointer-events: all; white-space: nowrap;&quot;&gt;
                  &lt;span style=&quot;font-size: 28px&quot;&gt;N&#x2F;A&lt;&#x2F;span&gt;
               &lt;&#x2F;div&gt;
            &lt;&#x2F;div&gt;
         &lt;&#x2F;div&gt;
      &lt;&#x2F;foreignObject&gt;
   &lt;&#x2F;g&gt;
   &lt;switch&gt;
      &lt;g requiredFeatures=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;TR&#x2F;SVG11&#x2F;feature#Extensibility&quot;&#x2F;&gt;
      &lt;a transform=&quot;translate(0,-5)&quot; xlink:href=&quot;https:&#x2F;&#x2F;www.diagrams.net&#x2F;doc&#x2F;faq&#x2F;svg-export-text-problems&quot; target=&quot;_blank&quot;&gt;
         &lt;text text-anchor=&quot;middle&quot; font-size=&quot;10px&quot; x=&quot;50%&quot; y=&quot;100%&quot;&gt;Text is not SVG - cannot display&lt;&#x2F;text&gt;
      &lt;&#x2F;a&gt;
   &lt;&#x2F;switch&gt;
&lt;&#x2F;svg&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Always chose to maximize &lt;em&gt;resistance to refactoring&lt;&#x2F;em&gt;. Then, test size becomes a slider between 
&lt;em&gt;protection against regressions&lt;&#x2F;em&gt; and &lt;em&gt;fast feedback&lt;&#x2F;em&gt;.&lt;&#x2F;p&gt;
&lt;div class=&quot;svg-content&quot;&gt;
&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;!DOCTYPE svg PUBLIC &quot;-&#x2F;&#x2F;W3C&#x2F;&#x2F;DTD SVG 1.1&#x2F;&#x2F;EN&quot; &quot;http:&#x2F;&#x2F;www.w3.org&#x2F;Graphics&#x2F;SVG&#x2F;1.1&#x2F;DTD&#x2F;svg11.dtd&quot;&gt;
&lt;svg xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot;
  xmlns:xlink=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;1999&#x2F;xlink&quot; version=&quot;1.1&quot; width=&quot;801px&quot; height=&quot;491px&quot; viewBox=&quot;-0.5 -0.5 801 491&quot;&gt;
  &lt;g&gt;
    &lt;ellipse cx=&quot;400&quot; cy=&quot;150&quot; rx=&quot;50&quot; ry=&quot;50&quot; class=&quot;outline-text&quot; stroke-width=&quot;3&quot; pointer-events=&quot;all&quot;&#x2F;&gt;
    &lt;ellipse cx=&quot;530&quot; cy=&quot;310&quot; rx=&quot;50&quot; ry=&quot;50&quot; class=&quot;outline-text&quot; stroke-width=&quot;3&quot; pointer-events=&quot;all&quot;&#x2F;&gt;
    &lt;ellipse cx=&quot;270&quot; cy=&quot;310&quot; rx=&quot;50&quot; ry=&quot;50&quot; class=&quot;outline-text&quot; stroke-width=&quot;3&quot; pointer-events=&quot;all&quot;&#x2F;&gt;
    &lt;path d=&quot;M 494.64 274.64 L 435.36 185.36&quot; class=&quot;outline-text&quot; stroke-width=&quot;3&quot; stroke-miterlimit=&quot;10&quot; pointer-events=&quot;stroke&quot;&#x2F;&gt;
    &lt;path d=&quot;M 480 310 L 320 310&quot; class=&quot;outline-text&quot; stroke-width=&quot;3&quot; stroke-miterlimit=&quot;10&quot; pointer-events=&quot;stroke&quot;&#x2F;&gt;
    &lt;path d=&quot;M 305.36 274.64 L 364.64 185.36&quot; class=&quot;outline-text&quot; stroke-width=&quot;3&quot; stroke-miterlimit=&quot;10&quot; pointer-events=&quot;stroke&quot;&#x2F;&gt;
    &lt;rect x=&quot;265&quot; y=&quot;370&quot; width=&quot;10&quot; height=&quot;60&quot; class=&quot;solid-text&quot; stroke-width=&quot;3&quot; pointer-events=&quot;all&quot;&#x2F;&gt;
    &lt;rect x=&quot;395&quot; y=&quot;370&quot; width=&quot;10&quot; height=&quot;60&quot; class=&quot;solid-text&quot; stroke-width=&quot;3&quot; pointer-events=&quot;all&quot;&#x2F;&gt;
    &lt;rect x=&quot;525&quot; y=&quot;370&quot; width=&quot;10&quot; height=&quot;60&quot; class=&quot;solid-text&quot; stroke-width=&quot;3&quot; pointer-events=&quot;all&quot;&#x2F;&gt;
    &lt;path d=&quot;M 222.5 406 L 222.5 417.5 L 201.5 400 L 222.5 382.5 L 222.5 394 L 577.5 394 L 577.5 382.5 L 598.5 400 L 577.5 417.5 L 577.5 406 Z&quot; class=&quot;outline-text&quot; stroke-width=&quot;3&quot; stroke-linejoin=&quot;round&quot; stroke-miterlimit=&quot;10&quot; pointer-events=&quot;all&quot;&#x2F;&gt;
    &lt;foreignObject pointer-events=&quot;none&quot; width=&quot;100%&quot; height=&quot;100%&quot; requiredFeatures=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;TR&#x2F;SVG11&#x2F;feature#Extensibility&quot; style=&quot;overflow: visible; text-align: left;&quot;&gt;
      &lt;div xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;1999&#x2F;xhtml&quot; style=&quot;display: flex; align-items: unsafe center; justify-content: unsafe center; width: 158px; height: 1px; padding-top: 50px; margin-left: 321px;&quot;&gt;
        &lt;div style=&quot;box-sizing: border-box; font-size: 0px; text-align: center;&quot;&gt;
          &lt;div style=&quot;display: inline-block; font-size: 28px; line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;&quot;&gt;Resistance to Refactoring&lt;&#x2F;div&gt;
        &lt;&#x2F;div&gt;
      &lt;&#x2F;div&gt;
    &lt;&#x2F;foreignObject&gt;
    &lt;rect x=&quot;0&quot; y=&quot;260&quot; width=&quot;220&quot; height=&quot;80&quot; fill=&quot;none&quot; stroke=&quot;none&quot; pointer-events=&quot;all&quot;&#x2F;&gt;
    &lt;foreignObject pointer-events=&quot;none&quot; width=&quot;100%&quot; height=&quot;100%&quot; requiredFeatures=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;TR&#x2F;SVG11&#x2F;feature#Extensibility&quot; style=&quot;overflow: visible; text-align: left;&quot;&gt;
      &lt;div xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;1999&#x2F;xhtml&quot; style=&quot;display: flex; align-items: unsafe center; justify-content: unsafe center; width: 218px; height: 1px; padding-top: 300px; margin-left: 1px;&quot;&gt;
        &lt;div style=&quot;box-sizing: border-box; font-size: 0px; text-align: center;&quot;&gt;
          &lt;div style=&quot;display: inline-block; font-size: 28px; line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;&quot;&gt;
            &lt;font style=&quot;font-size: 28px&quot;&gt;Protection Against Regressions&lt;&#x2F;font&gt;
          &lt;&#x2F;div&gt;
        &lt;&#x2F;div&gt;
      &lt;&#x2F;div&gt;
    &lt;&#x2F;foreignObject&gt;
    &lt;foreignObject pointer-events=&quot;none&quot; width=&quot;100%&quot; height=&quot;100%&quot; requiredFeatures=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;TR&#x2F;SVG11&#x2F;feature#Extensibility&quot; style=&quot;overflow: visible; text-align: left;&quot;&gt;
      &lt;div xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;1999&#x2F;xhtml&quot; style=&quot;display: flex; align-items: unsafe center; justify-content: unsafe center; width: 118px; height: 1px; padding-top: 310px; margin-left: 601px;&quot;&gt;
        &lt;div style=&quot;box-sizing: border-box; font-size: 0px; text-align: center;&quot;&gt;
          &lt;div style=&quot;display: inline-block; font-size: 28px; line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;&quot;&gt;Fast Feedback&lt;&#x2F;div&gt;
        &lt;&#x2F;div&gt;
      &lt;&#x2F;div&gt;
    &lt;&#x2F;foreignObject&gt;
    &lt;foreignObject pointer-events=&quot;none&quot; width=&quot;100%&quot; height=&quot;100%&quot; requiredFeatures=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;TR&#x2F;SVG11&#x2F;feature#Extensibility&quot; style=&quot;overflow: visible; text-align: left;&quot;&gt;
      &lt;div xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;1999&#x2F;xhtml&quot; style=&quot;display: flex; align-items: unsafe center; justify-content: unsafe center; width: 143px; height: 1px; padding-top: 455px; margin-left: 329px;&quot;&gt;
        &lt;div style=&quot;box-sizing: border-box; font-size: 0px; text-align: center;&quot;&gt;
          &lt;div style=&quot;display: inline-block; font-size: 28px; line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;&quot;&gt;
            &lt;font style=&quot;font-size: 28px&quot;&gt;Medium&lt;&#x2F;font&gt;
          &lt;&#x2F;div&gt;
        &lt;&#x2F;div&gt;
      &lt;&#x2F;div&gt;
    &lt;&#x2F;foreignObject&gt;
    &lt;foreignObject pointer-events=&quot;none&quot; width=&quot;100%&quot; height=&quot;100%&quot; requiredFeatures=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;TR&#x2F;SVG11&#x2F;feature#Extensibility&quot; style=&quot;overflow: visible; text-align: left;&quot;&gt;
      &lt;div xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;1999&#x2F;xhtml&quot; style=&quot;display: flex; align-items: unsafe center; justify-content: unsafe center; width: 83px; height: 1px; padding-top: 455px; margin-left: 229px;&quot;&gt;
        &lt;div style=&quot;box-sizing: border-box; font-size: 0px; text-align: center;&quot;&gt;
          &lt;div style=&quot;display: inline-block; font-size: 28px; line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;&quot;&gt;
            &lt;font style=&quot;font-size: 28px&quot;&gt;Large&lt;&#x2F;font&gt;
          &lt;&#x2F;div&gt;
        &lt;&#x2F;div&gt;
      &lt;&#x2F;div&gt;
    &lt;&#x2F;foreignObject&gt;
    &lt;rect x=&quot;487.5&quot; y=&quot;440&quot; width=&quot;85&quot; height=&quot;30&quot; fill=&quot;none&quot; stroke=&quot;none&quot; pointer-events=&quot;all&quot;&#x2F;&gt;
    &lt;foreignObject pointer-events=&quot;none&quot; width=&quot;100%&quot; height=&quot;100%&quot; requiredFeatures=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;TR&#x2F;SVG11&#x2F;feature#Extensibility&quot; style=&quot;overflow: visible; text-align: left;&quot;&gt;
      &lt;div xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;1999&#x2F;xhtml&quot; style=&quot;display: flex; align-items: unsafe center; justify-content: unsafe center; width: 83px; height: 1px; padding-top: 455px; margin-left: 489px;&quot;&gt;
        &lt;div style=&quot;box-sizing: border-box; font-size: 0px; text-align: center;&quot;&gt;
          &lt;div style=&quot;display: inline-block; font-size: 28px; line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;&quot;&gt;Small&lt;&#x2F;div&gt;
        &lt;&#x2F;div&gt;
      &lt;&#x2F;div&gt;
    &lt;&#x2F;foreignObject&gt;
    &lt;foreignObject pointer-events=&quot;none&quot; width=&quot;100%&quot; height=&quot;100%&quot; requiredFeatures=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;TR&#x2F;SVG11&#x2F;feature#Extensibility&quot; style=&quot;overflow: visible; text-align: left;&quot;&gt;
      &lt;div xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;1999&#x2F;xhtml&quot; style=&quot;display: flex; align-items: unsafe center; justify-content: unsafe center; width: 58px; height: 1px; padding-top: 150px; margin-left: 371px;&quot;&gt;
        &lt;div style=&quot;box-sizing: border-box; font-size: 0px; text-align: center;&quot;&gt;
          &lt;div style=&quot;display: inline-block; font-size: 28px; line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;&quot;&gt;Max&lt;&#x2F;div&gt;
        &lt;&#x2F;div&gt;
      &lt;&#x2F;div&gt;
    &lt;&#x2F;foreignObject&gt;
    &lt;switch&gt;
      &lt;g requiredFeatures=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;TR&#x2F;SVG11&#x2F;feature#Extensibility&quot;&#x2F;&gt;
      &lt;a transform=&quot;translate(0,-5)&quot; xlink:href=&quot;https:&#x2F;&#x2F;www.diagrams.net&#x2F;doc&#x2F;faq&#x2F;svg-export-text-problems&quot; target=&quot;_blank&quot;&gt;
        &lt;text text-anchor=&quot;middle&quot; font-size=&quot;10px&quot; x=&quot;50%&quot; y=&quot;100%&quot;&gt;Text is not SVG - cannot display&lt;&#x2F;text&gt;
      &lt;&#x2F;a&gt;
    &lt;&#x2F;switch&gt;
  &lt;&#x2F;g&gt;
&lt;&#x2F;svg&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;A diverse ratio of test sizes provides an ideal amount of both &lt;em&gt;protection against regressions&lt;&#x2F;em&gt; and 
&lt;em&gt;fast feedback&lt;&#x2F;em&gt;. For any non-trivial production system, test counts should form a pyramid where the
test count shrinks as test size grows.&lt;&#x2F;p&gt;
&lt;div class=&quot;svg-content&quot;&gt;
&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;!DOCTYPE svg PUBLIC &quot;-&#x2F;&#x2F;W3C&#x2F;&#x2F;DTD SVG 1.1&#x2F;&#x2F;EN&quot; &quot;http:&#x2F;&#x2F;www.w3.org&#x2F;Graphics&#x2F;SVG&#x2F;1.1&#x2F;DTD&#x2F;svg11.dtd&quot;&gt;
&lt;svg xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot;
  xmlns:xlink=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;1999&#x2F;xlink&quot; version=&quot;1.1&quot; width=&quot;443px&quot; height=&quot;363px&quot; viewBox=&quot;-0.5 -0.5 443 363&quot;&gt;
  &lt;g&gt;
    &lt;path d=&quot;M 41 -39 L 401 181 L 41 401 Z&quot; class=&quot;outline-text&quot; stroke-width=&quot;3&quot; stroke-miterlimit=&quot;10&quot; transform=&quot;rotate(-90,221,181)&quot; pointer-events=&quot;all&quot;&#x2F;&gt;
    &lt;path d=&quot;M 367.96 244 L 74.92 242.92&quot; class=&quot;outline-text&quot; stroke-width=&quot;3&quot; stroke-miterlimit=&quot;10&quot; pointer-events=&quot;stroke&quot;&#x2F;&gt;
    &lt;path d=&quot;M 146.2 124.12 L 297.12 123.4&quot; class=&quot;outline-text&quot; stroke-width=&quot;3&quot; stroke-miterlimit=&quot;10&quot; pointer-events=&quot;stroke&quot;&#x2F;&gt;
    &lt;foreignObject pointer-events=&quot;none&quot; width=&quot;100%&quot; height=&quot;100%&quot; requiredFeatures=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;TR&#x2F;SVG11&#x2F;feature#Extensibility&quot; style=&quot;overflow: visible; text-align: left;&quot;&gt;
      &lt;div xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;1999&#x2F;xhtml&quot; style=&quot;display: flex; align-items: unsafe center; justify-content: unsafe center; width: 118px; height: 1px; padding-top: 306px; margin-left: 162px;&quot;&gt;
        &lt;div style=&quot;box-sizing: border-box; font-size: 0px; text-align: center;&quot;&gt;
          &lt;div style=&quot;display: inline-block; font-size: 28px; line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;&quot;&gt;Small Tests&lt;&#x2F;div&gt;
        &lt;&#x2F;div&gt;
      &lt;&#x2F;div&gt;
    &lt;&#x2F;foreignObject&gt;
    &lt;foreignObject pointer-events=&quot;none&quot; width=&quot;100%&quot; height=&quot;100%&quot; requiredFeatures=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;TR&#x2F;SVG11&#x2F;feature#Extensibility&quot; style=&quot;overflow: visible; text-align: left;&quot;&gt;
      &lt;div xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;1999&#x2F;xhtml&quot; style=&quot;display: flex; align-items: unsafe center; justify-content: unsafe center; width: 128px; height: 1px; padding-top: 181px; margin-left: 157px;&quot;&gt;
        &lt;div style=&quot;box-sizing: border-box; font-size: 0px; text-align: center;&quot;&gt;
          &lt;div style=&quot;display: inline-block; font-size: 28px; line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;&quot;&gt;Medium Tests&lt;&#x2F;div&gt;
        &lt;&#x2F;div&gt;
      &lt;&#x2F;div&gt;
    &lt;&#x2F;foreignObject&gt;
    &lt;foreignObject pointer-events=&quot;none&quot; width=&quot;100%&quot; height=&quot;100%&quot; requiredFeatures=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;TR&#x2F;SVG11&#x2F;feature#Extensibility&quot; style=&quot;overflow: visible; text-align: left;&quot;&gt;
      &lt;div xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;1999&#x2F;xhtml&quot; style=&quot;display: flex; align-items: unsafe center; justify-content: unsafe center; width: 73px; height: 1px; padding-top: 81px; margin-left: 185px;&quot;&gt;
        &lt;div style=&quot;box-sizing: border-box; font-size: 0px; text-align: center;&quot;&gt;
          &lt;div style=&quot;display: inline-block; font-size: 28px; line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;&quot;&gt;Large Tests&lt;&#x2F;div&gt;
        &lt;&#x2F;div&gt;
      &lt;&#x2F;div&gt;
    &lt;&#x2F;foreignObject&gt;
  &lt;&#x2F;g&gt;
  &lt;switch&gt;
    &lt;g requiredFeatures=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;TR&#x2F;SVG11&#x2F;feature#Extensibility&quot;&#x2F;&gt;
    &lt;a transform=&quot;translate(0,-5)&quot; xlink:href=&quot;https:&#x2F;&#x2F;www.diagrams.net&#x2F;doc&#x2F;faq&#x2F;svg-export-text-problems&quot; target=&quot;_blank&quot;&gt;
      &lt;text text-anchor=&quot;middle&quot; font-size=&quot;10px&quot; x=&quot;50%&quot; y=&quot;100%&quot;&gt;Text is not SVG - cannot display&lt;&#x2F;text&gt;
    &lt;&#x2F;a&gt;
  &lt;&#x2F;switch&gt;
&lt;&#x2F;svg&gt;
&lt;&#x2F;div&gt;
&lt;h2 id=&quot;preventing-false-positives&quot;&gt;Preventing False Positives&lt;&#x2F;h2&gt;
&lt;p&gt;When tests fail for the wrong reasons, developers quickly loose trust in their tests. However, 
without trustworthy tests, refactoring is risky. This trap leads to real bugs slipping through.&lt;&#x2F;p&gt;
&lt;p&gt;Fast positives are formed from coupling between the test and implementation details:&lt;&#x2F;p&gt;
&lt;blockquote class=&quot;note bad&quot;&gt;
    &lt;div class=&quot;header&quot;&gt;
        &lt;i class=&quot;ri-thumb-down-line ri-lg&quot;&gt;&lt;&#x2F;i&gt;
        
        &lt;p&gt;&lt;strong&gt;Bad&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
        
    &lt;&#x2F;div&gt; 
    &lt;div class=&quot;content&quot;&gt;
        &lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#303136;color:#afb0b6;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;TEST&lt;&#x2F;span&gt;&lt;span&gt;(Render, IsCorrect) {
&lt;&#x2F;span&gt;&lt;span&gt;  std::ifstream &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;in&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a8c2a3;&quot;&gt;message_renderer.cc&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;  std::stringstream sstr;
&lt;&#x2F;span&gt;&lt;span&gt;  sstr &amp;lt;&amp;lt; in.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;rdbuf&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;EXPECT_EQ&lt;&#x2F;span&gt;&lt;span&gt;(sstr.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span&gt;(), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;R&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a8c2a3;&quot;&gt;#include &amp;quot;message_renderer.h&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a8c2a3;&quot;&gt;#include &amp;quot;body_renderer.h&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a8c2a3;&quot;&gt;#include &amp;quot;title_renderer.h&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a8c2a3;&quot;&gt;#include &amp;quot;footer_renderer.h&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a8c2a3;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a8c2a3;&quot;&gt;#include &amp;lt;memory&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a8c2a3;&quot;&gt;#include &amp;lt;numeric&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a8c2a3;&quot;&gt;#include &amp;lt;string&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a8c2a3;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a8c2a3;&quot;&gt;MessageRenderer::MessageRenderer()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a8c2a3;&quot;&gt;    : sub_renderers_({std::make_unique&amp;lt;TitleRenderer&amp;gt;(),
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a8c2a3;&quot;&gt;                      std::make_unique&amp;lt;BodyRenderer&amp;gt;(),
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a8c2a3;&quot;&gt;                      std::make_unique&amp;lt;FooterRenderer&amp;gt;()}) {}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a8c2a3;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a8c2a3;&quot;&gt;std::string MessageRenderer::Render(const Message&amp;amp; message) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a8c2a3;&quot;&gt;  return std::accumulate(sub_renderers_.begin(), sub_renderers_.end(),
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a8c2a3;&quot;&gt;                         std::string{},
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a8c2a3;&quot;&gt;                         [&amp;amp;](std::string m, std::shared_ptr&amp;lt;Renderer&amp;gt; r) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a8c2a3;&quot;&gt;                           return std::move(m) + r-&amp;gt;Render(message);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a8c2a3;&quot;&gt;                         });
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a8c2a3;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;)&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;

    &lt;&#x2F;div&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Instead of testing the code, test the behavior.&lt;&#x2F;p&gt;
&lt;blockquote class=&quot;note good&quot;&gt;
    &lt;div class=&quot;header&quot;&gt;
        &lt;i class=&quot;ri-thumb-up-line ri-lg&quot;&gt;&lt;&#x2F;i&gt;
        
        &lt;p&gt;&lt;strong&gt;Good&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
        
    &lt;&#x2F;div&gt; 
    &lt;div class=&quot;content&quot;&gt;
        &lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#303136;color:#afb0b6;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;TEST&lt;&#x2F;span&gt;&lt;span&gt;(Render, BasicMessage) {
&lt;&#x2F;span&gt;&lt;span&gt;  MessageRenderer renderer;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; Message &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;message&lt;&#x2F;span&gt;&lt;span&gt;{title : &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a8c2a3;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, body : &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a8c2a3;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, footer : &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a8c2a3;&quot;&gt;c&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;};
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  std::string html = renderer.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;Render&lt;&#x2F;span&gt;&lt;span&gt;(message);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;EXPECT_EQ&lt;&#x2F;span&gt;&lt;span&gt;(html,
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a8c2a3;&quot;&gt;&amp;lt;head&amp;gt;&amp;lt;title&amp;gt;a&amp;lt;&#x2F;title&amp;gt;&amp;lt;&#x2F;head&amp;gt;&amp;lt;body&amp;gt;b&amp;lt;&#x2F;body&amp;gt;&amp;lt;footer&amp;gt;c&amp;lt;&#x2F;footer&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;

    &lt;&#x2F;div&gt;
&lt;&#x2F;blockquote&gt;&lt;h2 id=&quot;types-of-test-doubles&quot;&gt;Types of Test Doubles&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Mock&lt;&#x2F;strong&gt; &lt;em&gt;(mock, spy)&lt;&#x2F;em&gt; - Emulate and verify &lt;em&gt;outgoing&lt;&#x2F;em&gt; interactions from the SUT.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Stub&lt;&#x2F;strong&gt; &lt;em&gt;(stub, dummy, fake)&lt;&#x2F;em&gt; - Emulate &lt;em&gt;incoming&lt;&#x2F;em&gt; interactions to the SUT.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;blockquote class=&quot;note info&quot;&gt;
    &lt;div class=&quot;header&quot;&gt;
        &lt;i class=&quot;ri-information-line ri-lg&quot;&gt;&lt;&#x2F;i&gt;
        
        &lt;p&gt;&lt;strong&gt;Info&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
        
    &lt;&#x2F;div&gt; 
    &lt;div class=&quot;content&quot;&gt;
        &lt;p&gt;The term &lt;em&gt;mock&lt;&#x2F;em&gt; can also refer to the mocking framework itself. Mocking frameworks are also 
generally responsible for creating stubs which can be confusing.&lt;&#x2F;p&gt;

    &lt;&#x2F;div&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Mocks can emulate interactions like stubs, but stubs should never assert interactions like mocks. 
Asserting interactions with stubs is &lt;em&gt;over-specification&lt;&#x2F;em&gt;, a common anti-pattern.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;encapsulation&quot;&gt;Encapsulation&lt;&#x2F;h2&gt;
&lt;p&gt;A well-designed API hides all implementation details behind a private API, leaving only observable 
behavior in the public API. Implementation details should never &lt;em&gt;leak&lt;&#x2F;em&gt; into the public API.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;invariant-violation&quot;&gt;Invariant violation&lt;&#x2F;h4&gt;
&lt;p&gt;API&#x27;s that require several steps to achieve an individual goal are prone to &lt;em&gt;invariant violation&lt;&#x2F;em&gt;.&lt;&#x2F;p&gt;
&lt;blockquote class=&quot;note bad&quot;&gt;
    &lt;div class=&quot;header&quot;&gt;
        &lt;i class=&quot;ri-thumb-down-line ri-lg&quot;&gt;&lt;&#x2F;i&gt;
        
        &lt;p&gt;&lt;strong&gt;Bad&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
        
    &lt;&#x2F;div&gt; 
    &lt;div class=&quot;content&quot;&gt;
        &lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#303136;color:#afb0b6;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3b3;&quot;&gt;User &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;public&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3b8c2;&quot;&gt;SetName&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt; std::string&lt;&#x2F;span&gt;&lt;span&gt;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;) { name_ &lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt; name; }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  std::string &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3b8c2;&quot;&gt;NormalizeName&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt; std::string&lt;&#x2F;span&gt;&lt;span&gt;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;std::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;(absl::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;StripAsciiWhitespace&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;(name)).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;substr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;50&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;private&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  std::string name_;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#797b86;&quot;&gt;&#x2F;&#x2F; Client must remember to `NormalizeName` before `SetName`.
&lt;&#x2F;span&gt;&lt;span&gt;std::string normalized_name = user.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;NormalizeName&lt;&#x2F;span&gt;&lt;span&gt;(new_name);
&lt;&#x2F;span&gt;&lt;span&gt;user.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;SetName&lt;&#x2F;span&gt;&lt;span&gt;(normalized_name);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;

    &lt;&#x2F;div&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;A client should be able to achieve any individual goal atomically.&lt;&#x2F;p&gt;
&lt;blockquote class=&quot;note good&quot;&gt;
    &lt;div class=&quot;header&quot;&gt;
        &lt;i class=&quot;ri-thumb-up-line ri-lg&quot;&gt;&lt;&#x2F;i&gt;
        
        &lt;p&gt;&lt;strong&gt;Good&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
        
    &lt;&#x2F;div&gt; 
    &lt;div class=&quot;content&quot;&gt;
        &lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#303136;color:#afb0b6;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3b3;&quot;&gt;User &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;public&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3b8c2;&quot;&gt;SetName&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt; std::string&lt;&#x2F;span&gt;&lt;span&gt;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;) { name_ &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;NormalizeName&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;(name); }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;private&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  std::string &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3b8c2;&quot;&gt;NormalizeName&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt; std::string&lt;&#x2F;span&gt;&lt;span&gt;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;std::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;(absl::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;StripAsciiWhitespace&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;(name)).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;substr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;50&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  std::string name_;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#797b86;&quot;&gt;&#x2F;&#x2F; Client no longer needs to be concerned about `NormalizeName`.
&lt;&#x2F;span&gt;&lt;span&gt;user.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;SetName&lt;&#x2F;span&gt;&lt;span&gt;(new_name);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;

    &lt;&#x2F;div&gt;
&lt;&#x2F;blockquote&gt;&lt;h4 id=&quot;leaking-state&quot;&gt;Leaking state&lt;&#x2F;h4&gt;
&lt;p&gt;Public access to state that isn&#x27;t directly related to a client&#x27;s goal is considered &lt;em&gt;leaking state&lt;&#x2F;em&gt;. &lt;&#x2F;p&gt;
&lt;blockquote class=&quot;note bad&quot;&gt;
    &lt;div class=&quot;header&quot;&gt;
        &lt;i class=&quot;ri-thumb-down-line ri-lg&quot;&gt;&lt;&#x2F;i&gt;
        
        &lt;p&gt;&lt;strong&gt;Bad&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
        
    &lt;&#x2F;div&gt; 
    &lt;div class=&quot;content&quot;&gt;
        &lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#303136;color:#afb0b6;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3b3;&quot;&gt;MessageRenderer &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;public &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3b3;&quot;&gt;Renderer &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;public&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  std::vector&amp;lt;std::shared_ptr&amp;lt;Renderer&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3b8c2;&quot;&gt;GetSubRenderers&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;() {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt; sub_renderers_;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;virtual&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt; std::string &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3b8c2;&quot;&gt;Render&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt; Message&lt;&#x2F;span&gt;&lt;span&gt;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;message&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;private&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  std::vector&amp;lt;std::shared_ptr&amp;lt;Renderer&amp;gt;&amp;gt; sub_renderers_;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;

    &lt;&#x2F;div&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Keep the public API surface as small as possible while still meeting the clients needs.&lt;&#x2F;p&gt;
&lt;blockquote class=&quot;note good&quot;&gt;
    &lt;div class=&quot;header&quot;&gt;
        &lt;i class=&quot;ri-thumb-up-line ri-lg&quot;&gt;&lt;&#x2F;i&gt;
        
        &lt;p&gt;&lt;strong&gt;Good&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
        
    &lt;&#x2F;div&gt; 
    &lt;div class=&quot;content&quot;&gt;
        &lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#303136;color:#afb0b6;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3b3;&quot;&gt;MessageRenderer &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;public &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3b3;&quot;&gt;Renderer &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;public&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;virtual&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt; std::string &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3b8c2;&quot;&gt;Render&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt; Message&lt;&#x2F;span&gt;&lt;span&gt;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;message&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;private&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  std::vector&amp;lt;std::unique_ptr&amp;lt;Renderer&amp;gt;&amp;gt; sub_renderers_;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;

    &lt;&#x2F;div&gt;
&lt;&#x2F;blockquote&gt;&lt;h2 id=&quot;styles-of-unit-testing&quot;&gt;Styles of Unit Testing&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Output-based&lt;&#x2F;strong&gt; - Verify output with a given input. Requires 
&lt;a href=&quot;https:&#x2F;&#x2F;ajguerrer.github.io&#x2F;blog&#x2F;unit-testing&#x2F;2-making-tests-work&#x2F;#functional-architecture&quot;&gt;pure functions&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;State-based&lt;&#x2F;strong&gt; - Perform operation, then verify state of SUT and collaborators.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Communication-based&lt;&#x2F;strong&gt; - Perform operation, then verify communication with collaborators.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Style&lt;&#x2F;th&gt;&lt;th&gt;Output-based&lt;&#x2F;th&gt;&lt;th&gt;State-based&lt;&#x2F;th&gt;&lt;th&gt;Communication-based&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;Resistance to refactoring&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;High&lt;&#x2F;td&gt;&lt;td&gt;Medium&lt;&#x2F;td&gt;&lt;td&gt;Medium&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;Maintainability&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;High&lt;&#x2F;td&gt;&lt;td&gt;Medium&lt;&#x2F;td&gt;&lt;td&gt;Low&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;h2 id=&quot;hexagonal-architecture&quot;&gt;Hexagonal Architecture&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;em&gt;Hexagonal architecture&lt;&#x2F;em&gt;, proposed by Alistair Cockburn, breaks applications into two layers:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Domain layer&lt;&#x2F;strong&gt; - Logic and models essential to the business domain.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Controller layer&lt;&#x2F;strong&gt; - All other responsibilities of the application.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Interaction between the Domain layer and the Controller layer follows three guidelines: &lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;The Domain layer is isolated from the Controller layer.&lt;&#x2F;li&gt;
&lt;li&gt;The Domain layer may not depend on the Controller layer, but the Controller layer may 
depend on the Domain layer.&lt;&#x2F;li&gt;
&lt;li&gt;Communication with external applications is handled by the Controller layer, not the 
Domain layer.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;div class=&quot;svg-content&quot;&gt;
&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;!DOCTYPE svg PUBLIC &quot;-&#x2F;&#x2F;W3C&#x2F;&#x2F;DTD SVG 1.1&#x2F;&#x2F;EN&quot; &quot;http:&#x2F;&#x2F;www.w3.org&#x2F;Graphics&#x2F;SVG&#x2F;1.1&#x2F;DTD&#x2F;svg11.dtd&quot;&gt;
&lt;svg xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot;
  xmlns:xlink=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;1999&#x2F;xlink&quot; version=&quot;1.1&quot; width=&quot;676px&quot; height=&quot;453px&quot; viewBox=&quot;-0.5 -0.5 676 453&quot;&gt;
  &lt;g&gt;
    &lt;path d=&quot;M 101 91 L 301 91 L 401 271 L 301 451 L 101 451 L 1 271 Z&quot; class=&quot;outline-text&quot; stroke-width=&quot;3&quot; stroke-miterlimit=&quot;10&quot; pointer-events=&quot;all&quot;&#x2F;&gt;
    &lt;path d=&quot;M 369.81 194.05 L 455.43 145.95&quot; class=&quot;outline-text&quot; stroke-width=&quot;3&quot; stroke-miterlimit=&quot;10&quot; pointer-events=&quot;stroke&quot;&#x2F;&gt;
    &lt;path d=&quot;M 363.92 197.36 L 369.57 189.03 L 369.81 194.05 L 373.97 196.87 Z&quot; class=&quot;solid-text&quot; stroke-width=&quot;3&quot; stroke-miterlimit=&quot;10&quot; pointer-events=&quot;all&quot;&#x2F;&gt;
    &lt;path d=&quot;M 461.32 142.64 L 455.68 150.97 L 455.43 145.95 L 451.27 143.13 Z&quot; class=&quot;solid-text&quot; stroke-width=&quot;3&quot; stroke-miterlimit=&quot;10&quot; pointer-events=&quot;all&quot;&#x2F;&gt;
    &lt;path d=&quot;M 499.11 1 L 615.32 1 L 673.42 101 L 615.32 201 L 499.11 201 L 441 101 Z&quot; class=&quot;outline-text&quot; stroke-width=&quot;3&quot; stroke-miterlimit=&quot;10&quot; pointer-events=&quot;all&quot;&#x2F;&gt;
    &lt;ellipse cx=&quot;201.01&quot; cy=&quot;271&quot; rx=&quot;83.75&quot; ry=&quot;83.75&quot; class=&quot;outline-text&quot; stroke-width=&quot;3&quot; pointer-events=&quot;all&quot;&#x2F;&gt;
    &lt;foreignObject pointer-events=&quot;none&quot; width=&quot;100%&quot; height=&quot;100%&quot; requiredFeatures=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;TR&#x2F;SVG11&#x2F;feature#Extensibility&quot; style=&quot;overflow: visible; text-align: left;&quot;&gt;
      &lt;div xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;1999&#x2F;xhtml&quot; style=&quot;display: flex; align-items: unsafe center; justify-content: unsafe center; width: 122px; height: 1px; padding-top: 271px; margin-left: 140px;&quot;&gt;
        &lt;div style=&quot;box-sizing: border-box; font-size: 0px; text-align: center;&quot;&gt;
          &lt;div style=&quot;display: inline-block; font-size: 28px; line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;&quot;&gt;Domain Layer&lt;&#x2F;div&gt;
        &lt;&#x2F;div&gt;
      &lt;&#x2F;div&gt;
    &lt;&#x2F;foreignObject&gt;
    &lt;foreignObject pointer-events=&quot;none&quot; width=&quot;100%&quot; height=&quot;100%&quot; requiredFeatures=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;TR&#x2F;SVG11&#x2F;feature#Extensibility&quot; style=&quot;overflow: visible; text-align: left;&quot;&gt;
      &lt;div xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;1999&#x2F;xhtml&quot; style=&quot;display: flex; align-items: unsafe center; justify-content: unsafe center; width: 152px; height: 1px; padding-top: 136px; margin-left: 125px;&quot;&gt;
        &lt;div style=&quot;box-sizing: border-box; font-size: 0px; text-align: center;&quot;&gt;
          &lt;div style=&quot;display: inline-block; font-size: 28px; line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;&quot;&gt;Controller Layer&lt;&#x2F;div&gt;
        &lt;&#x2F;div&gt;
      &lt;&#x2F;div&gt;
    &lt;&#x2F;foreignObject&gt;
    &lt;foreignObject pointer-events=&quot;none&quot; width=&quot;100%&quot; height=&quot;100%&quot; requiredFeatures=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;TR&#x2F;SVG11&#x2F;feature#Extensibility&quot; style=&quot;overflow: visible; text-align: left;&quot;&gt;
      &lt;div xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;1999&#x2F;xhtml&quot; style=&quot;display: flex; align-items: unsafe center; justify-content: unsafe center; width: 181px; height: 1px; padding-top: 101px; margin-left: 467px;&quot;&gt;
        &lt;div style=&quot;box-sizing: border-box; font-size: 0px; text-align: center;&quot;&gt;
          &lt;div style=&quot;display: inline-block; font-size: 28px; line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;&quot;&gt;External&lt;br &#x2F;&gt;
Dependency&lt;&#x2F;div&gt;
        &lt;&#x2F;div&gt;
      &lt;&#x2F;div&gt;
    &lt;&#x2F;foreignObject&gt;
  &lt;&#x2F;g&gt;
  &lt;switch&gt;
    &lt;g requiredFeatures=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;TR&#x2F;SVG11&#x2F;feature#Extensibility&quot;&#x2F;&gt;
    &lt;a transform=&quot;translate(0,-5)&quot; xlink:href=&quot;https:&#x2F;&#x2F;www.diagrams.net&#x2F;doc&#x2F;faq&#x2F;svg-export-text-problems&quot; target=&quot;_blank&quot;&gt;
      &lt;text text-anchor=&quot;middle&quot; font-size=&quot;10px&quot; x=&quot;50%&quot; y=&quot;100%&quot;&gt;Text is not SVG - cannot display&lt;&#x2F;text&gt;
    &lt;&#x2F;a&gt;
  &lt;&#x2F;switch&gt;
&lt;&#x2F;svg&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;The Domain layer has high cyclomatic complexity and domain significance, while the Controller layer 
has a large number of collaborators. Code that is both complex and involves many collaborators is 
overcomplicated and what Hexagonal architecture aims to dissolve. &lt;&#x2F;p&gt;
&lt;h2 id=&quot;communication&quot;&gt;Communication&lt;&#x2F;h2&gt;
&lt;p&gt;Communication can be classified into two different types:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Intra-process&lt;&#x2F;strong&gt; - Communication within the application; implementation details.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Inter-process&lt;&#x2F;strong&gt; - Communication with other applications; observable behavior.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Mocks are necessary for emulating external applications and verifying inter-system communication 
patterns. However, mocks couple tests to implementation details, reducing their resistance to 
refactoring. For this reason, the use of mocks should be avoided when dealing with intra-system 
communication. External dependencies only accessible by the application, are implementation 
details too, and should not be mocked either.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;functional-architecture&quot;&gt;Functional Architecture&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;em&gt;Functional architecture&lt;&#x2F;em&gt; builds off of Hexagonal architecture with an added guideline that business 
logic is written in a functional paradigm. The architecture generally flows in a three step process:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;The Controller layer gathers and prepare input.&lt;&#x2F;li&gt;
&lt;li&gt;The Domain layer makes decisions based on prepared input.&lt;&#x2F;li&gt;
&lt;li&gt;The Controller layer converts decisions into side effects.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;div class=&quot;svg-content&quot;&gt;
&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;!DOCTYPE svg PUBLIC &quot;-&#x2F;&#x2F;W3C&#x2F;&#x2F;DTD SVG 1.1&#x2F;&#x2F;EN&quot; &quot;http:&#x2F;&#x2F;www.w3.org&#x2F;Graphics&#x2F;SVG&#x2F;1.1&#x2F;DTD&#x2F;svg11.dtd&quot;&gt;
&lt;svg xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot;
  xmlns:xlink=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;1999&#x2F;xlink&quot; version=&quot;1.1&quot; width=&quot;458px&quot; height=&quot;427px&quot; viewBox=&quot;-0.5 -0.5 458 427&quot;&gt;
  &lt;g&gt;
    &lt;rect x=&quot;301&quot; y=&quot;193&quot; width=&quot;200&quot; height=&quot;40&quot; rx=&quot;6&quot; ry=&quot;6&quot; class=&quot;background-fill-outline-text&quot; stroke-width=&quot;3&quot; transform=&quot;rotate(90,401,213)&quot; pointer-events=&quot;all&quot;&#x2F;&gt;
    &lt;path d=&quot;M 241 203 Q 311 203 311 138 Q 311 73 356 73 Q 401 73 401 102.9&quot; class=&quot;outline-text&quot; stroke-width=&quot;3&quot; stroke-miterlimit=&quot;10&quot; pointer-events=&quot;stroke&quot;&#x2F;&gt;
    &lt;path d=&quot;M 401 109.65 L 396.5 100.65 L 401 102.9 L 405.5 100.65 Z&quot; class=&quot;solid-text&quot; stroke-width=&quot;3&quot; stroke-miterlimit=&quot;10&quot; pointer-events=&quot;all&quot;&#x2F;&gt;
    &lt;rect x=&quot;1&quot; y=&quot;193&quot; width=&quot;240&quot; height=&quot;40&quot; rx=&quot;6&quot; ry=&quot;6&quot; class=&quot;background-fill-outline-text&quot; stroke-width=&quot;3&quot; pointer-events=&quot;all&quot;&#x2F;&gt;
    &lt;path d=&quot;M 251 213 Q 321 213 321 148 Q 321 83 366 83 Q 411 83 411 112.9&quot; class=&quot;outline-text&quot; stroke-width=&quot;3&quot; stroke-miterlimit=&quot;10&quot; pointer-events=&quot;stroke&quot;&#x2F;&gt;
    &lt;path d=&quot;M 411 119.65 L 406.5 110.65 L 411 112.9 L 415.5 110.65 Z&quot; class=&quot;solid-text&quot; stroke-width=&quot;3&quot; stroke-miterlimit=&quot;10&quot; pointer-events=&quot;all&quot;&#x2F;&gt;
    &lt;path d=&quot;M 41 53 L 41.07 182.9&quot; class=&quot;outline-text&quot; stroke-width=&quot;3&quot; stroke-miterlimit=&quot;10&quot; pointer-events=&quot;stroke&quot;&#x2F;&gt;
    &lt;path d=&quot;M 41.08 189.65 L 36.57 180.65 L 41.07 182.9 L 45.57 180.64 Z&quot; class=&quot;solid-text&quot; stroke-width=&quot;3&quot; stroke-miterlimit=&quot;10&quot; pointer-events=&quot;all&quot;&#x2F;&gt;
    &lt;path d=&quot;M 81 63 L 81.07 192.22&quot; class=&quot;outline-text&quot; stroke-width=&quot;3&quot; stroke-miterlimit=&quot;10&quot; pointer-events=&quot;stroke&quot;&#x2F;&gt;
    &lt;path d=&quot;M 81.08 198.97 L 76.57 189.97 L 81.07 192.22 L 85.57 189.96 Z&quot; class=&quot;solid-text&quot; stroke-width=&quot;3&quot; stroke-miterlimit=&quot;10&quot; pointer-events=&quot;all&quot;&#x2F;&gt;
    &lt;path d=&quot;M 161 63 L 161 189.74&quot; class=&quot;outline-text&quot; stroke-width=&quot;3&quot; stroke-miterlimit=&quot;10&quot; pointer-events=&quot;stroke&quot;&#x2F;&gt;
    &lt;path d=&quot;M 161 196.49 L 156.5 187.49 L 161 189.74 L 165.5 187.49 Z&quot; class=&quot;solid-text&quot; stroke-width=&quot;3&quot; stroke-miterlimit=&quot;10&quot; pointer-events=&quot;all&quot;&#x2F;&gt;
    &lt;path d=&quot;M 201 53 L 201.07 182.9&quot; class=&quot;outline-text&quot; stroke-width=&quot;3&quot; stroke-miterlimit=&quot;10&quot; pointer-events=&quot;stroke&quot;&#x2F;&gt;
    &lt;path d=&quot;M 201.08 189.65 L 196.57 180.65 L 201.07 182.9 L 205.57 180.64 Z&quot; class=&quot;solid-text&quot; stroke-width=&quot;3&quot; stroke-miterlimit=&quot;10&quot; pointer-events=&quot;all&quot;&#x2F;&gt;
    &lt;path d=&quot;M 41 233 L 41 342.9&quot; class=&quot;outline-text&quot; stroke-width=&quot;3&quot; stroke-miterlimit=&quot;10&quot; pointer-events=&quot;stroke&quot;&#x2F;&gt;
    &lt;path d=&quot;M 41 349.65 L 36.5 340.65 L 41 342.9 L 45.5 340.65 Z&quot; class=&quot;solid-text&quot; stroke-width=&quot;3&quot; stroke-miterlimit=&quot;10&quot; pointer-events=&quot;all&quot;&#x2F;&gt;
    &lt;path d=&quot;M 81 233 L 81 352.9&quot; class=&quot;outline-text&quot; stroke-width=&quot;3&quot; stroke-miterlimit=&quot;10&quot; pointer-events=&quot;stroke&quot;&#x2F;&gt;
    &lt;path d=&quot;M 81 359.65 L 76.5 350.65 L 81 352.9 L 85.5 350.65 Z&quot; class=&quot;solid-text&quot; stroke-width=&quot;3&quot; stroke-miterlimit=&quot;10&quot; pointer-events=&quot;all&quot;&#x2F;&gt;
    &lt;path d=&quot;M 120.5 233 L 120.57 362.9&quot; class=&quot;outline-text&quot; stroke-width=&quot;3&quot; stroke-miterlimit=&quot;10&quot; pointer-events=&quot;stroke&quot;&#x2F;&gt;
    &lt;path d=&quot;M 120.58 369.65 L 116.07 360.65 L 120.57 362.9 L 125.07 360.64 Z&quot; class=&quot;solid-text&quot; stroke-width=&quot;3&quot; stroke-miterlimit=&quot;10&quot; pointer-events=&quot;all&quot;&#x2F;&gt;
    &lt;path d=&quot;M 161 233 L 161 352.9&quot; class=&quot;outline-text&quot; stroke-width=&quot;3&quot; stroke-miterlimit=&quot;10&quot; pointer-events=&quot;stroke&quot;&#x2F;&gt;
    &lt;path d=&quot;M 161 359.65 L 156.5 350.65 L 161 352.9 L 165.5 350.65 Z&quot; class=&quot;solid-text&quot; stroke-width=&quot;3&quot; stroke-miterlimit=&quot;10&quot; pointer-events=&quot;all&quot;&#x2F;&gt;
    &lt;path d=&quot;M 201 233 L 201 342.9&quot; class=&quot;outline-text&quot; stroke-width=&quot;3&quot; stroke-miterlimit=&quot;10&quot; pointer-events=&quot;stroke&quot;&#x2F;&gt;
    &lt;path d=&quot;M 201 349.65 L 196.5 340.65 L 201 342.9 L 205.5 340.65 Z&quot; class=&quot;solid-text&quot; stroke-width=&quot;3&quot; stroke-miterlimit=&quot;10&quot; pointer-events=&quot;all&quot;&#x2F;&gt;
    &lt;foreignObject pointer-events=&quot;none&quot; width=&quot;100%&quot; height=&quot;100%&quot; requiredFeatures=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;TR&#x2F;SVG11&#x2F;feature#Extensibility&quot; style=&quot;overflow: visible; text-align: left;&quot;&gt;
      &lt;div xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;1999&#x2F;xhtml&quot; style=&quot;display: flex; align-items: unsafe center; justify-content: unsafe center; width: 152px; height: 1px; padding-top: 33px; margin-left: 45px;&quot;&gt;
        &lt;div style=&quot;box-sizing: border-box; font-size: 0px; text-align: center;&quot;&gt;
          &lt;div style=&quot;display: inline-block; font-size: 28px; line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;&quot;&gt;Input&lt;&#x2F;div&gt;
        &lt;&#x2F;div&gt;
      &lt;&#x2F;div&gt;
    &lt;&#x2F;foreignObject&gt;
    &lt;foreignObject pointer-events=&quot;none&quot; width=&quot;100%&quot; height=&quot;100%&quot; requiredFeatures=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;TR&#x2F;SVG11&#x2F;feature#Extensibility&quot; style=&quot;overflow: visible; text-align: left;&quot;&gt;
      &lt;div xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;1999&#x2F;xhtml&quot; style=&quot;display: flex; align-items: unsafe center; justify-content: unsafe center; width: 152px; height: 1px; padding-top: 393px; margin-left: 45px;&quot;&gt;
        &lt;div style=&quot;box-sizing: border-box; font-size: 0px; text-align: center;&quot;&gt;
          &lt;div style=&quot;display: inline-block; font-size: 28px; line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;&quot;&gt;Side effects&lt;&#x2F;div&gt;
        &lt;&#x2F;div&gt;
      &lt;&#x2F;div&gt;
    &lt;&#x2F;foreignObject&gt;
    &lt;foreignObject pointer-events=&quot;none&quot; width=&quot;100%&quot; height=&quot;100%&quot; requiredFeatures=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;TR&#x2F;SVG11&#x2F;feature#Extensibility&quot; style=&quot;overflow: visible; text-align: left;&quot;&gt;
      &lt;div xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;1999&#x2F;xhtml&quot; style=&quot;display: flex; align-items: unsafe center; justify-content: unsafe center; width: 183px; height: 1px; padding-top: 33px; margin-left: 272px;&quot;&gt;
        &lt;div style=&quot;box-sizing: border-box; font-size: 0px; text-align: center;&quot;&gt;
          &lt;div style=&quot;display: inline-block; font-size: 28px; line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;&quot;&gt;Prepared input&lt;&#x2F;div&gt;
        &lt;&#x2F;div&gt;
      &lt;&#x2F;div&gt;
    &lt;&#x2F;foreignObject&gt;
    &lt;foreignObject pointer-events=&quot;none&quot; width=&quot;100%&quot; height=&quot;100%&quot; requiredFeatures=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;TR&#x2F;SVG11&#x2F;feature#Extensibility&quot; style=&quot;overflow: visible; text-align: left;&quot;&gt;
      &lt;div xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;1999&#x2F;xhtml&quot; style=&quot;display: flex; align-items: unsafe center; justify-content: unsafe center; width: 183px; height: 1px; padding-top: 393px; margin-left: 265px;&quot;&gt;
        &lt;div style=&quot;box-sizing: border-box; font-size: 0px; text-align: center;&quot;&gt;
          &lt;div style=&quot;display: inline-block; font-size: 28px; line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;&quot;&gt;Decisions&lt;&#x2F;div&gt;
        &lt;&#x2F;div&gt;
      &lt;&#x2F;div&gt;
    &lt;&#x2F;foreignObject&gt;
    &lt;path d=&quot;M 421 333 Q 421 353 366 353 Q 311 353 311 298 Q 311 243 274.23 243&quot; class=&quot;outline-text&quot; stroke-width=&quot;3&quot; stroke-miterlimit=&quot;10&quot; pointer-events=&quot;stroke&quot;&#x2F;&gt;
    &lt;path d=&quot;M 267.48 243 L 276.48 238.5 L 274.23 243 L 276.48 247.5 Z&quot; class=&quot;solid-text&quot; stroke-width=&quot;3&quot; stroke-miterlimit=&quot;10&quot; pointer-events=&quot;all&quot;&#x2F;&gt;
    &lt;path d=&quot;M 411 323 Q 411 343 366 343 Q 321 343 321 288 Q 321 233 261.1 233&quot; class=&quot;outline-text&quot; stroke-width=&quot;3&quot; stroke-miterlimit=&quot;10&quot; pointer-events=&quot;stroke&quot;&#x2F;&gt;
    &lt;path d=&quot;M 254.35 233 L 263.35 228.5 L 261.1 233 L 263.35 237.5 Z&quot; class=&quot;solid-text&quot; stroke-width=&quot;3&quot; stroke-miterlimit=&quot;10&quot; pointer-events=&quot;all&quot;&#x2F;&gt;
    &lt;path d=&quot;M 401 313 Q 401 333 366 333 Q 331 333 331 278 Q 331 223 251.1 223&quot; class=&quot;outline-text&quot; stroke-width=&quot;3&quot; stroke-miterlimit=&quot;10&quot; pointer-events=&quot;stroke&quot;&#x2F;&gt;
    &lt;path d=&quot;M 244.35 223 L 253.35 218.5 L 251.1 223 L 253.35 227.5 Z&quot; class=&quot;solid-text&quot; stroke-width=&quot;3&quot; stroke-miterlimit=&quot;10&quot; pointer-events=&quot;all&quot;&#x2F;&gt;
    &lt;rect x=&quot;11&quot; y=&quot;203&quot; width=&quot;240&quot; height=&quot;40&quot; rx=&quot;6&quot; ry=&quot;6&quot; class=&quot;background-fill-outline-text&quot; stroke-width=&quot;3&quot; pointer-events=&quot;all&quot;&#x2F;&gt;
    &lt;rect x=&quot;24.13&quot; y=&quot;213&quot; width=&quot;240&quot; height=&quot;40&quot; rx=&quot;6&quot; ry=&quot;6&quot; class=&quot;background-fill-outline-text&quot; stroke-width=&quot;3&quot; pointer-events=&quot;all&quot;&#x2F;&gt;
    &lt;foreignObject pointer-events=&quot;none&quot; width=&quot;100%&quot; height=&quot;100%&quot; requiredFeatures=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;TR&#x2F;SVG11&#x2F;feature#Extensibility&quot; style=&quot;overflow: visible; text-align: left;&quot;&gt;
      &lt;div xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;1999&#x2F;xhtml&quot; style=&quot;display: flex; align-items: unsafe center; justify-content: unsafe center; width: 238px; height: 1px; padding-top: 233px; margin-left: 25px;&quot;&gt;
        &lt;div style=&quot;box-sizing: border-box; font-size: 0px; text-align: center;&quot;&gt;
          &lt;div style=&quot;display: inline-block; font-size: 28px; line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;&quot;&gt;Controller&lt;&#x2F;div&gt;
        &lt;&#x2F;div&gt;
      &lt;&#x2F;div&gt;
    &lt;&#x2F;foreignObject&gt;
    &lt;path d=&quot;M 121 73 L 121.08 202.22&quot; class=&quot;outline-text&quot; stroke-width=&quot;3&quot; stroke-miterlimit=&quot;10&quot; pointer-events=&quot;stroke&quot;&#x2F;&gt;
    &lt;path d=&quot;M 121.09 208.97 L 116.58 199.97 L 121.08 202.22 L 125.58 199.96 Z&quot; class=&quot;solid-text&quot; stroke-width=&quot;3&quot; stroke-miterlimit=&quot;10&quot; pointer-events=&quot;all&quot;&#x2F;&gt;
    &lt;rect x=&quot;311&quot; y=&quot;203&quot; width=&quot;200&quot; height=&quot;40&quot; rx=&quot;6&quot; ry=&quot;6&quot; class=&quot;background-fill-outline-text&quot; stroke-width=&quot;3&quot; transform=&quot;rotate(90,411,223)&quot; pointer-events=&quot;all&quot;&#x2F;&gt;
    &lt;rect x=&quot;321&quot; y=&quot;213&quot; width=&quot;200&quot; height=&quot;40&quot; rx=&quot;6&quot; ry=&quot;6&quot; class=&quot;background-fill-outline-text&quot; stroke-width=&quot;3&quot; transform=&quot;rotate(90,421,233)&quot; pointer-events=&quot;all&quot;&#x2F;&gt;
    &lt;g transform=&quot;rotate(90 421 233)&quot;&gt;
      &lt;foreignObject pointer-events=&quot;none&quot; width=&quot;100%&quot; height=&quot;100%&quot; requiredFeatures=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;TR&#x2F;SVG11&#x2F;feature#Extensibility&quot; style=&quot;overflow: visible; text-align: left;&quot;&gt;
        &lt;div xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;1999&#x2F;xhtml&quot; style=&quot;display: flex; align-items: unsafe center; justify-content: unsafe center; width: 198px; height: 1px; padding-top: 233px; margin-left: 322px;&quot;&gt;
          &lt;div style=&quot;box-sizing: border-box; font-size: 0px; text-align: center;&quot;&gt;
            &lt;div style=&quot;display: inline-block; font-size: 28px; line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;&quot;&gt;Domain Logic&lt;&#x2F;div&gt;
          &lt;&#x2F;div&gt;
        &lt;&#x2F;div&gt;
      &lt;&#x2F;foreignObject&gt;
    &lt;&#x2F;g&gt;
    &lt;path d=&quot;M 264.13 223 Q 331 223 331 158 Q 331 93 376 93 Q 421 93 421 122.9&quot; class=&quot;outline-text&quot; stroke-width=&quot;3&quot; stroke-miterlimit=&quot;10&quot; pointer-events=&quot;stroke&quot;&#x2F;&gt;
    &lt;path d=&quot;M 421 129.65 L 416.5 120.65 L 421 122.9 L 425.5 120.65 Z&quot; class=&quot;solid-text&quot; stroke-width=&quot;3&quot; stroke-miterlimit=&quot;10&quot; pointer-events=&quot;all&quot;&#x2F;&gt;
  &lt;&#x2F;g&gt;
  &lt;switch&gt;
    &lt;g requiredFeatures=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;TR&#x2F;SVG11&#x2F;feature#Extensibility&quot;&#x2F;&gt;
    &lt;a transform=&quot;translate(0,-5)&quot; xlink:href=&quot;https:&#x2F;&#x2F;www.diagrams.net&#x2F;doc&#x2F;faq&#x2F;svg-export-text-problems&quot; target=&quot;_blank&quot;&gt;
      &lt;text text-anchor=&quot;middle&quot; font-size=&quot;10px&quot; x=&quot;50%&quot; y=&quot;100%&quot;&gt;Text is not SVG - cannot display&lt;&#x2F;text&gt;
    &lt;&#x2F;a&gt;
  &lt;&#x2F;switch&gt;
&lt;&#x2F;svg&gt;
&lt;&#x2F;div&gt;
&lt;blockquote&gt;
&lt;p&gt;Object-oriented programming makes code understandable by encapsulating moving parts. Functional
programming makes code understandable by minimizing moving parts. &lt;em&gt;--Michael Feathers&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Functional architecture trades maintainability for performance; pure functions tend to eagerly load 
data when they could have been lazy.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;controller-orchestration&quot;&gt;Controller Orchestration&lt;&#x2F;h2&gt;
&lt;p&gt;Functional architecture assumes a clearcut pipeline of inputs, decisions, and side effects. However,
production applications are rarely that simple. Decisions may involve gathering more input followed
by making additional decisions. There are three strategies to consider:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Eagerly gather all the input&lt;&#x2F;strong&gt; - Preserve controller simplicity and isolated domain logic, 
but concede performance.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Inject dependencies into the Domain layer&lt;&#x2F;strong&gt; - Preserve controller simplicity and performance, but
concede isolated domain logic.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Allow controller orchestration&lt;&#x2F;strong&gt; - Preserve isolated domain logic and performance, but concede 
controller simplicity.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;Isolated domain logic is an attribute that should always be maximized because it has a huge impact 
on &lt;em&gt;maintainability&lt;&#x2F;em&gt; and &lt;em&gt;resistance to refactoring&lt;&#x2F;em&gt;. Injecting dependencies into the Domain layer
is rule out. &lt;&#x2F;p&gt;
&lt;p&gt;In cases where performance is not critical, feel free to stick to a Functional architecture and 
eagerly gather input. Otherwise, allow controllers to orchestrate gathering input to meet the 
needs of the Domain layer.&lt;&#x2F;p&gt;
&lt;blockquote class=&quot;note info&quot;&gt;
    &lt;div class=&quot;header&quot;&gt;
        &lt;i class=&quot;ri-information-line ri-lg&quot;&gt;&lt;&#x2F;i&gt;
        
        &lt;p&gt;&lt;strong&gt;Info&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
        
    &lt;&#x2F;div&gt; 
    &lt;div class=&quot;content&quot;&gt;
        &lt;p&gt;Controller orchestration will make controllers more complex, but complexity can be mitigated with 
familiar patterns like switching on a result or listening for Domain layer events.&lt;&#x2F;p&gt;

    &lt;&#x2F;div&gt;
&lt;&#x2F;blockquote&gt;</content>
	</entry>
	<entry xml:lang="en">
		<title>Part 3: Integration Testing</title>
		<published>2020-01-06T00:00:00+00:00</published>
		<updated>2020-01-06T00:00:00+00:00</updated>
		<link href="https://ajguerrer.github.io/blog/unit-testing/3-integration-testing/" type="text/html"/>
		<id>https://ajguerrer.github.io/blog/unit-testing/3-integration-testing/</id>
		<content type="html">&lt;h2 id=&quot;role-of-integration-tests&quot;&gt;Role of Integration Tests&lt;&#x2F;h2&gt;
&lt;p&gt;Integration tests are medium sized tests that verify:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Interactions with external dependencies.&lt;&#x2F;li&gt;
&lt;li&gt;Edge cases with resource costs unsuitable for a unit test.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Each integration test should choose a happy path that exercises as many shared external dependencies 
as possible while staying within a single use case. If a single integration test doesn&#x27;t cover all 
shared external dependencies, write more until all external dependencies are covered.&lt;&#x2F;p&gt;
&lt;blockquote class=&quot;note tip&quot;&gt;
    &lt;div class=&quot;header&quot;&gt;
        &lt;i class=&quot;ri-lightbulb-line ri-lg&quot;&gt;&lt;&#x2F;i&gt;
        
        &lt;p&gt;&lt;strong&gt;Tip&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
        
    &lt;&#x2F;div&gt; 
    &lt;div class=&quot;content&quot;&gt;
        &lt;p&gt;To keep maintenance costs low, check as many edge cases as possible with unit tests before resorting 
to an integration test.&lt;&#x2F;p&gt;

    &lt;&#x2F;div&gt;
&lt;&#x2F;blockquote&gt;&lt;blockquote class=&quot;note info&quot;&gt;
    &lt;div class=&quot;header&quot;&gt;
        &lt;i class=&quot;ri-information-line ri-lg&quot;&gt;&lt;&#x2F;i&gt;
        
        &lt;p&gt;&lt;strong&gt;Info&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
        
    &lt;&#x2F;div&gt; 
    &lt;div class=&quot;content&quot;&gt;
        &lt;p&gt;Edge cases that can be checked before starting an operation and changing state, such as
preconditions, adhere to the &lt;em&gt;Fail Fast principle&lt;&#x2F;em&gt; and don&#x27;t require an integration test.&lt;&#x2F;p&gt;

    &lt;&#x2F;div&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;While unit tests are great for testing domain logic, integration tests are great for testing 
controllers.&lt;&#x2F;p&gt;
&lt;div class=&quot;svg-content&quot;&gt;
&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;!DOCTYPE svg PUBLIC &quot;-&#x2F;&#x2F;W3C&#x2F;&#x2F;DTD SVG 1.1&#x2F;&#x2F;EN&quot; &quot;http:&#x2F;&#x2F;www.w3.org&#x2F;Graphics&#x2F;SVG&#x2F;1.1&#x2F;DTD&#x2F;svg11.dtd&quot;&gt;
&lt;svg xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot; xmlns:xlink=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;1999&#x2F;xlink&quot; version=&quot;1.1&quot; width=&quot;593px&quot; height=&quot;472px&quot; viewBox=&quot;-0.5 -0.5 593 472&quot;&gt;
  &lt;g&gt;
    &lt;rect x=&quot;63&quot; y=&quot;88&quot; width=&quot;220&quot; height=&quot;160&quot; class=&quot;outline-text&quot; stroke-width=&quot;3&quot; pointer-events=&quot;all&quot; &#x2F;&gt;
    &lt;rect x=&quot;63&quot; y=&quot;248&quot; width=&quot;220&quot; height=&quot;160&quot; class=&quot;outline-text&quot; stroke-width=&quot;3&quot; pointer-events=&quot;all&quot; &#x2F;&gt;
    &lt;rect x=&quot;283&quot; y=&quot;88&quot; width=&quot;220&quot; height=&quot;160&quot; class=&quot;outline-text&quot; stroke-width=&quot;3&quot; pointer-events=&quot;all&quot; &#x2F;&gt;
    &lt;rect x=&quot;283&quot; y=&quot;248&quot; width=&quot;220&quot; height=&quot;160&quot; class=&quot;outline-text&quot; stroke-width=&quot;3&quot; pointer-events=&quot;all&quot; &#x2F;&gt;
    &lt;path d=&quot;M 63 408 L 572.9 408&quot; class=&quot;outline-text&quot; stroke-width=&quot;3&quot; stroke-miterlimit=&quot;10&quot; pointer-events=&quot;stroke&quot; &#x2F;&gt;
    &lt;path d=&quot;M 63 408 L 63 18.1&quot; class=&quot;outline-text&quot; stroke-width=&quot;3&quot; stroke-miterlimit=&quot;10&quot; pointer-events=&quot;stroke&quot; &#x2F;&gt;
    &lt;path d=&quot;M 579.65 408 L 570.65 412.5 L 572.9 408 L 570.65 403.5 Z&quot; class=&quot;solid-text&quot; stroke-width=&quot;3&quot; stroke-miterlimit=&quot;10&quot; pointer-events=&quot;all&quot; &#x2F;&gt;
    &lt;path d=&quot;M 63 11.35 L 67.5 20.35 L 63 18.1 L 58.5 20.35 Z&quot; class=&quot;solid-text&quot; stroke-width=&quot;3&quot; stroke-miterlimit=&quot;10&quot; pointer-events=&quot;all&quot; &#x2F;&gt;
    &lt;foreignObject pointer-events=&quot;none&quot; width=&quot;100%&quot; height=&quot;100%&quot; requiredFeatures=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;TR&#x2F;SVG11&#x2F;feature#Extensibility&quot; style=&quot;overflow: visible; text-align: left;&quot;&gt;
      &lt;div xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;1999&#x2F;xhtml&quot; style=&quot;display: flex; align-items: unsafe center; justify-content: unsafe center; width: 218px; height: 1px; padding-top: 328px; margin-left: 284px;&quot;&gt;
        &lt;div style=&quot;box-sizing: border-box; font-size: 0px; text-align: center;&quot;&gt;
          &lt;div style=&quot;display: inline-block; font-size: 28px; line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;&quot;&gt;
            &lt;font style=&quot;font-size: 28px&quot;&gt;
              Controller layer
              &lt;br &#x2F;&gt;
              -
              &lt;br &#x2F;&gt;
              Integration test
            &lt;&#x2F;font&gt;
          &lt;&#x2F;div&gt;
        &lt;&#x2F;div&gt;
      &lt;&#x2F;div&gt;
    &lt;&#x2F;foreignObject&gt;
    &lt;foreignObject pointer-events=&quot;none&quot; width=&quot;100%&quot; height=&quot;100%&quot; requiredFeatures=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;TR&#x2F;SVG11&#x2F;feature#Extensibility&quot; style=&quot;overflow: visible; text-align: left;&quot;&gt;
      &lt;div xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;1999&#x2F;xhtml&quot; style=&quot;display: flex; align-items: unsafe center; justify-content: unsafe center; width: 218px; height: 1px; padding-top: 168px; margin-left: 64px;&quot;&gt;
        &lt;div style=&quot;box-sizing: border-box; font-size: 0px; text-align: center;&quot;&gt;
          &lt;div style=&quot;display: inline-block; font-size: 28px; line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;&quot;&gt;
            &lt;font style=&quot;font-size: 28px&quot;&gt;
              Domain layer
              &lt;br &#x2F;&gt;
              -
              &lt;br &#x2F;&gt;
              Unit test
            &lt;&#x2F;font&gt;
          &lt;&#x2F;div&gt;
        &lt;&#x2F;div&gt;
      &lt;&#x2F;div&gt;
    &lt;&#x2F;foreignObject&gt;
    &lt;foreignObject pointer-events=&quot;none&quot; width=&quot;100%&quot; height=&quot;100%&quot; requiredFeatures=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;TR&#x2F;SVG11&#x2F;feature#Extensibility&quot; style=&quot;overflow: visible; text-align: left;&quot;&gt;
      &lt;div xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;1999&#x2F;xhtml&quot; style=&quot;display: flex; align-items: unsafe center; justify-content: unsafe center; width: 218px; height: 1px; padding-top: 328px; margin-left: 64px;&quot;&gt;
        &lt;div style=&quot;box-sizing: border-box; font-size: 0px; text-align: center;&quot;&gt;
          &lt;div style=&quot;display: inline-block; font-size: 28px; line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;&quot;&gt;
            &lt;font style=&quot;font-size: 28px&quot;&gt;
              Trivial code
              &lt;br &#x2F;&gt;
              -
              &lt;br &#x2F;&gt;
              Don&#x27;t test
            &lt;&#x2F;font&gt;
          &lt;&#x2F;div&gt;
        &lt;&#x2F;div&gt;
      &lt;&#x2F;div&gt;
    &lt;&#x2F;foreignObject&gt;
    &lt;foreignObject pointer-events=&quot;none&quot; width=&quot;100%&quot; height=&quot;100%&quot; requiredFeatures=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;TR&#x2F;SVG11&#x2F;feature#Extensibility&quot; style=&quot;overflow: visible; text-align: left;&quot;&gt;
      &lt;div xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;1999&#x2F;xhtml&quot; style=&quot;display: flex; align-items: unsafe center; justify-content: unsafe center; width: 218px; height: 1px; padding-top: 168px; margin-left: 284px;&quot;&gt;
        &lt;div style=&quot;box-sizing: border-box; font-size: 0px; text-align: center;&quot;&gt;
          &lt;div style=&quot;display: inline-block; font-size: 28px; line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;&quot;&gt;
            &lt;font style=&quot;font-size: 28px&quot;&gt;
              Overcomplicated Code
              &lt;br &#x2F;&gt;
              -
              &lt;br &#x2F;&gt;
              Avoid writing
            &lt;&#x2F;font&gt;
          &lt;&#x2F;div&gt;
        &lt;&#x2F;div&gt;
      &lt;&#x2F;div&gt;
    &lt;&#x2F;foreignObject&gt;
    &lt;foreignObject pointer-events=&quot;none&quot; width=&quot;100%&quot; height=&quot;100%&quot; requiredFeatures=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;TR&#x2F;SVG11&#x2F;feature#Extensibility&quot; style=&quot;overflow: visible; text-align: left;&quot;&gt;
      &lt;div xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;1999&#x2F;xhtml&quot; style=&quot;display: flex; align-items: unsafe center; justify-content: unsafe center; width: 298px; height: 1px; padding-top: 438px; margin-left: 134px;&quot;&gt;
        &lt;div style=&quot;box-sizing: border-box; font-size: 0px; text-align: center;&quot;&gt;
          &lt;div style=&quot;display: inline-block; font-size: 28px; line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;&quot;&gt;Number of collaborators&lt;&#x2F;div&gt;
        &lt;&#x2F;div&gt;
      &lt;&#x2F;div&gt;
    &lt;&#x2F;foreignObject&gt;
    &lt;g transform=&quot;rotate(-90 33 238)&quot;&gt;
      &lt;foreignObject pointer-events=&quot;none&quot; width=&quot;100%&quot; height=&quot;100%&quot; requiredFeatures=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;TR&#x2F;SVG11&#x2F;feature#Extensibility&quot; style=&quot;overflow: visible; text-align: left;&quot;&gt;
        &lt;div xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;1999&#x2F;xhtml&quot; style=&quot;display: flex; align-items: unsafe center; justify-content: unsafe center; width: 298px; height: 1px; padding-top: 238px; margin-left: -116px;&quot;&gt;
          &lt;div style=&quot;box-sizing: border-box; font-size: 0px; text-align: center;&quot;&gt;
            &lt;div style=&quot;display: inline-block; font-size: 28px; line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;&quot;&gt;Control flow complexity&lt;&#x2F;div&gt;
          &lt;&#x2F;div&gt;
        &lt;&#x2F;div&gt;
      &lt;&#x2F;foreignObject&gt;
    &lt;&#x2F;g&gt;
  &lt;&#x2F;g&gt;
  &lt;switch&gt;
    &lt;g requiredFeatures=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;TR&#x2F;SVG11&#x2F;feature#Extensibility&quot; &#x2F;&gt;
    &lt;a transform=&quot;translate(0,-5)&quot; xlink:href=&quot;https:&#x2F;&#x2F;www.diagrams.net&#x2F;doc&#x2F;faq&#x2F;svg-export-text-problems&quot; target=&quot;_blank&quot;&gt;
      &lt;text text-anchor=&quot;middle&quot; font-size=&quot;10px&quot; x=&quot;50%&quot; y=&quot;100%&quot;&gt;Text is not SVG - cannot display&lt;&#x2F;text&gt;
    &lt;&#x2F;a&gt;
  &lt;&#x2F;switch&gt;
&lt;&#x2F;svg&gt;
&lt;&#x2F;div&gt;
&lt;h4 id=&quot;interfaces&quot;&gt;Interfaces&lt;&#x2F;h4&gt;
&lt;p&gt;Genuine abstractions are &lt;em&gt;discovered&lt;&#x2F;em&gt;, not &lt;em&gt;invented&lt;&#x2F;em&gt;. For an interface to be genuine, it must have 
at least two implementations. Otherwise, the the added cognitive complexity isn&#x27;t worth it.&lt;&#x2F;p&gt;
&lt;p&gt;Interfaces enable mocking. Write an interface to mock shared external dependencies. 
However, not all external dependencies need an interface. Private external dependencies 
don&#x27;t need mocks and therefore don&#x27;t benefit from an interface, unless there is a need to be to swap
them with another implementation in production.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;layering&quot;&gt;Layering&lt;&#x2F;h4&gt;
&lt;p&gt;Adding layers of indirection where they are not appropriate makes code hard to reason with. Aim
to have as few layers as possible. Most applications only need three layers: Domain, Controller, and 
Infrastructure. The Domain and Controller Layers are already familiar. The Infrastructure Layer
provides utility libraries such as logging and networking.&lt;&#x2F;p&gt;
&lt;div class=&quot;svg-content&quot;&gt;
&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;!DOCTYPE svg PUBLIC &quot;-&#x2F;&#x2F;W3C&#x2F;&#x2F;DTD SVG 1.1&#x2F;&#x2F;EN&quot; &quot;http:&#x2F;&#x2F;www.w3.org&#x2F;Graphics&#x2F;SVG&#x2F;1.1&#x2F;DTD&#x2F;svg11.dtd&quot;&gt;
&lt;svg xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot; xmlns:xlink=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;1999&#x2F;xlink&quot; version=&quot;1.1&quot; width=&quot;502px&quot; height=&quot;212px&quot; viewBox=&quot;-0.5 -0.5 502 212&quot;&gt;
  &lt;g&gt;
    &lt;rect x=&quot;270&quot; y=&quot;50&quot; width=&quot;20&quot; height=&quot;160&quot; rx=&quot;3&quot; ry=&quot;3&quot; class=&quot;background-fill-outline-text&quot; stroke-width=&quot;3&quot; pointer-events=&quot;all&quot; &#x2F;&gt;
    &lt;rect x=&quot;330&quot; y=&quot;50&quot; width=&quot;20&quot; height=&quot;160&quot; rx=&quot;3&quot; ry=&quot;3&quot; class=&quot;background-fill-outline-text&quot; stroke-width=&quot;3&quot; pointer-events=&quot;all&quot; &#x2F;&gt;
    &lt;rect x=&quot;390&quot; y=&quot;50&quot; width=&quot;20&quot; height=&quot;160&quot; rx=&quot;3&quot; ry=&quot;3&quot; class=&quot;background-fill-outline-text&quot; stroke-width=&quot;3&quot; pointer-events=&quot;all&quot; &#x2F;&gt;
    &lt;path d=&quot;M 180 165 Q 180 165 209.9 165&quot; class=&quot;outline-text&quot; stroke-width=&quot;3&quot; stroke-miterlimit=&quot;10&quot; pointer-events=&quot;stroke&quot; &#x2F;&gt;
    &lt;path d=&quot;M 216.65 165 L 207.65 169.5 L 209.9 165 L 207.65 160.5 Z&quot; class=&quot;solid-text&quot; stroke-width=&quot;3&quot; stroke-miterlimit=&quot;10&quot; pointer-events=&quot;all&quot; &#x2F;&gt;
    &lt;rect x=&quot;10&quot; y=&quot;70&quot; width=&quot;170&quot; height=&quot;120&quot; rx=&quot;18&quot; ry=&quot;18&quot; class=&quot;outline-text&quot; stroke-width=&quot;3&quot; pointer-events=&quot;all&quot; &#x2F;&gt;
    &lt;foreignObject pointer-events=&quot;none&quot; width=&quot;100%&quot; height=&quot;100%&quot; requiredFeatures=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;TR&#x2F;SVG11&#x2F;feature#Extensibility&quot; style=&quot;overflow: visible; text-align: left;&quot;&gt;
      &lt;div xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;1999&#x2F;xhtml&quot; style=&quot;display: flex; align-items: unsafe center; justify-content: unsafe center; width: 168px; height: 1px; padding-top: 130px; margin-left: 11px;&quot;&gt;
        &lt;div style=&quot;box-sizing: border-box; font-size: 0px; text-align: center;&quot;&gt;
          &lt;div style=&quot;display: inline-block; font-size: 12px; line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;&quot;&gt;
            &lt;span style=&quot;font-size: 28px ; white-space: normal&quot;&gt;Infrastructure Layer&lt;&#x2F;span&gt;
          &lt;&#x2F;div&gt;
        &lt;&#x2F;div&gt;
      &lt;&#x2F;div&gt;
    &lt;&#x2F;foreignObject&gt;
    &lt;rect x=&quot;220&quot; y=&quot;140&quot; width=&quot;240&quot; height=&quot;50&quot; rx=&quot;7.5&quot; ry=&quot;7.5&quot; class=&quot;background-fill-outline-text&quot; stroke-width=&quot;3&quot; pointer-events=&quot;all&quot; &#x2F;&gt;
    &lt;foreignObject pointer-events=&quot;none&quot; width=&quot;100%&quot; height=&quot;100%&quot; requiredFeatures=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;TR&#x2F;SVG11&#x2F;feature#Extensibility&quot; style=&quot;overflow: visible; text-align: left;&quot;&gt;
      &lt;div xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;1999&#x2F;xhtml&quot; style=&quot;display: flex; align-items: unsafe center; justify-content: unsafe center; width: 238px; height: 1px; padding-top: 165px; margin-left: 221px;&quot;&gt;
        &lt;div style=&quot;box-sizing: border-box; font-size: 0px; text-align: center;&quot;&gt;
          &lt;div style=&quot;display: inline-block; font-size: 12px; line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;&quot;&gt;
            &lt;span style=&quot;font-size: 28px ; white-space: normal&quot;&gt;Domain Layer&lt;&#x2F;span&gt;
          &lt;&#x2F;div&gt;
        &lt;&#x2F;div&gt;
      &lt;&#x2F;div&gt;
    &lt;&#x2F;foreignObject&gt;
    &lt;path d=&quot;M 220 95 Q 220 95 190.8 95&quot; class=&quot;outline-text&quot; stroke-width=&quot;3&quot; stroke-miterlimit=&quot;10&quot; pointer-events=&quot;stroke&quot; &#x2F;&gt;
    &lt;path d=&quot;M 184.05 95 L 193.05 90.5 L 190.8 95 L 193.05 99.5 Z&quot; class=&quot;solid-text&quot; stroke-width=&quot;3&quot; stroke-miterlimit=&quot;10&quot; pointer-events=&quot;all&quot; &#x2F;&gt;
    &lt;path d=&quot;M 460 95 Q 500 95 500 130 Q 500 165 470.1 165&quot; class=&quot;outline-text&quot; stroke-width=&quot;3&quot; stroke-miterlimit=&quot;10&quot; pointer-events=&quot;stroke&quot; &#x2F;&gt;
    &lt;path d=&quot;M 463.35 165 L 472.35 160.5 L 470.1 165 L 472.35 169.5 Z&quot; class=&quot;solid-text&quot; stroke-width=&quot;3&quot; stroke-miterlimit=&quot;10&quot; pointer-events=&quot;all&quot; &#x2F;&gt;
    &lt;rect x=&quot;220&quot; y=&quot;70&quot; width=&quot;240&quot; height=&quot;50&quot; rx=&quot;7.5&quot; ry=&quot;7.5&quot; class=&quot;background-fill-outline-text&quot; stroke-width=&quot;3&quot; pointer-events=&quot;all&quot; &#x2F;&gt;
    &lt;foreignObject pointer-events=&quot;none&quot; width=&quot;100%&quot; height=&quot;100%&quot; requiredFeatures=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;TR&#x2F;SVG11&#x2F;feature#Extensibility&quot; style=&quot;overflow: visible; text-align: left;&quot;&gt;
      &lt;div xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;1999&#x2F;xhtml&quot; style=&quot;display: flex; align-items: unsafe center; justify-content: unsafe center; width: 238px; height: 1px; padding-top: 95px; margin-left: 221px;&quot;&gt;
        &lt;div style=&quot;box-sizing: border-box; font-size: 0px; text-align: center;&quot;&gt;
          &lt;div style=&quot;display: inline-block; font-size: 12px; line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;&quot;&gt;
            &lt;span style=&quot;font-size: 28px ; white-space: normal&quot;&gt;Controller Layer&lt;&#x2F;span&gt;
          &lt;&#x2F;div&gt;
        &lt;&#x2F;div&gt;
      &lt;&#x2F;div&gt;
    &lt;&#x2F;foreignObject&gt;
    &lt;foreignObject pointer-events=&quot;none&quot; width=&quot;100%&quot; height=&quot;100%&quot; requiredFeatures=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;TR&#x2F;SVG11&#x2F;feature#Extensibility&quot; style=&quot;overflow: visible; text-align: left;&quot;&gt;
      &lt;div xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;1999&#x2F;xhtml&quot; style=&quot;display: flex; align-items: unsafe center; justify-content: unsafe center; width: 1px; height: 1px; padding-top: 20px; margin-left: 340px;&quot;&gt;
        &lt;div style=&quot;box-sizing: border-box; font-size: 0px; text-align: center;&quot;&gt;
          &lt;div style=&quot;display: inline-block; font-size: 28px; line-height: 1.2; pointer-events: all; white-space: nowrap;&quot;&gt;Use cases&lt;&#x2F;div&gt;
        &lt;&#x2F;div&gt;
      &lt;&#x2F;div&gt;
    &lt;&#x2F;foreignObject&gt;
  &lt;&#x2F;g&gt;
  &lt;switch&gt;
    &lt;g requiredFeatures=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;TR&#x2F;SVG11&#x2F;feature#Extensibility&quot; &#x2F;&gt;
    &lt;a transform=&quot;translate(0,-5)&quot; xlink:href=&quot;https:&#x2F;&#x2F;www.diagrams.net&#x2F;doc&#x2F;faq&#x2F;svg-export-text-problems&quot; target=&quot;_blank&quot;&gt;
      &lt;text text-anchor=&quot;middle&quot; font-size=&quot;10px&quot; x=&quot;50%&quot; y=&quot;100%&quot;&gt;Text is not SVG - cannot display&lt;&#x2F;text&gt;
    &lt;&#x2F;a&gt;
  &lt;&#x2F;switch&gt;
&lt;&#x2F;svg&gt;
&lt;&#x2F;div&gt;
&lt;h4 id=&quot;logging&quot;&gt;Logging&lt;&#x2F;h4&gt;
&lt;p&gt;Logging falls under two categories:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Support logging&lt;&#x2F;strong&gt; - messages are intended to be consumed by support staff and system admins; 
observable behavior.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Diagnostic logging&lt;&#x2F;strong&gt; - messages are intended to be consumed by developers; implementation 
detail.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Since &lt;em&gt;Support&lt;&#x2F;em&gt; logging is observable behavior, it is worth the testing effort. &lt;em&gt;Diagnostic&lt;&#x2F;em&gt; 
logging, however, is an implementation detail and isn&#x27;t worth testing.&lt;&#x2F;p&gt;
&lt;blockquote class=&quot;note tip&quot;&gt;
    &lt;div class=&quot;header&quot;&gt;
        &lt;i class=&quot;ri-lightbulb-line ri-lg&quot;&gt;&lt;&#x2F;i&gt;
        
        &lt;p&gt;&lt;strong&gt;Tip&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
        
    &lt;&#x2F;div&gt; 
    &lt;div class=&quot;content&quot;&gt;
        &lt;p&gt;The Domain layer should not have dependencies, including loggers. The Controller layer may inject a 
logger, or the Domain layer may emit a log event.&lt;&#x2F;p&gt;

    &lt;&#x2F;div&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Effective logging maximizes the signal to noise ratio. &lt;em&gt;Support&lt;&#x2F;em&gt; logging cannot be controlled 
because its a business requirement, but &lt;em&gt;Diagnostic&lt;&#x2F;em&gt; logging can. Minimize diagnostic logging
in the Domain layer, only adding it for debugging and then subsequently removing it once finished.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;mocking-best-practices&quot;&gt;Mocking Best Practices&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Mocks are for integration tests only&lt;&#x2F;strong&gt; - Mentioned in 
&lt;a href=&quot;&#x2F;unit-testing&#x2F;making_tests_work&#x2F;#hexagonal-architecture&quot;&gt;Hexagonal Architecture&lt;&#x2F;a&gt;, only shared 
external dependencies should be mocked. Unit tests target the Domain layer which shouldn&#x27;t
communicate with external dependencies.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Never mock private external dependencies&lt;&#x2F;strong&gt; - When a private external dependency is too 
difficult or prohibitive to setup, don&#x27;t try to mock it out. If that dependency cannot be tested 
as-is, it defeats the point of integration testing and should not be tested at all.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Mock the furthest edges of the system&lt;&#x2F;strong&gt; - Mock the type that directly communicates with a 
shared dependency, not the wrapper. Verify the message sent to a shared dependency, not a call
to a class you wrote. Doing so maximizes resistance against regressions.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Use as many mocks as necessary per test&lt;&#x2F;strong&gt; -  One mock per test is a common misconception. It&#x27;s 
irrelevant how many mocks it takes to verify one unit of behavior. The number of mocks depends
solely on the number of shared external dependencies participating in the unit of behavior.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Verify the absence of unexpected messages too&lt;&#x2F;strong&gt; - It is not enough to verify your system is 
sending the correct messages to shared external dependencies, unexpected messages are a
source of bugs too.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Mock only the types you own&lt;&#x2F;strong&gt; - If your using a third party library to communicate with a shared
external dependency, write a adapter for it and mock the adapter instead. Third-party 
libraries have arcane inner workings, so it&#x27;s futile to try to emulate their behavior.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;testing-the-database&quot;&gt;Testing the Database&lt;&#x2F;h2&gt;
&lt;h4 id=&quot;setup&quot;&gt;Setup&lt;&#x2F;h4&gt;
&lt;p&gt;Be able to build your database from a series of migration scripts checked into source control. This 
includes tables, views, indexes, stored procedures, reference data and anything else critical to 
run the database in production.&lt;&#x2F;p&gt;
&lt;blockquote class=&quot;note info&quot;&gt;
    &lt;div class=&quot;header&quot;&gt;
        &lt;i class=&quot;ri-information-line ri-lg&quot;&gt;&lt;&#x2F;i&gt;
        
        &lt;p&gt;&lt;strong&gt;Info&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
        
    &lt;&#x2F;div&gt; 
    &lt;div class=&quot;content&quot;&gt;
        &lt;p&gt;&lt;em&gt;Reference data&lt;&#x2F;em&gt; is data that is necessary for the application to run, but isn&#x27;t actively modified 
by the application.&lt;&#x2F;p&gt;

    &lt;&#x2F;div&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Migration scripts should be used in both testing and production. Once committed to source control,
don&#x27;t modify them. Make a new migration script instead of fixing the old one, unless fixing the old
one prevents data loss.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;transactions&quot;&gt;Transactions&lt;&#x2F;h4&gt;
&lt;p&gt;Transactions are capable of updating sets of data within the same business operation atomically. 
When transactions are involved, applications need to make two separate types of decisions:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Which data gets updated to what?&lt;&#x2F;li&gt;
&lt;li&gt;Should a set of updates be kept or rolled back?&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;These decisions should be separated into two different responsibilities:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Repositories&lt;&#x2F;strong&gt; - Can access and modify database data; lifetime lasts the duration of the query.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Transactions&lt;&#x2F;strong&gt; - Commits or rolls back a set of updates in full; lifetime lasts the duration of
the business operation.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;blockquote class=&quot;note info&quot;&gt;
    &lt;div class=&quot;header&quot;&gt;
        &lt;i class=&quot;ri-information-line ri-lg&quot;&gt;&lt;&#x2F;i&gt;
        
        &lt;p&gt;&lt;strong&gt;Info&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
        
    &lt;&#x2F;div&gt; 
    &lt;div class=&quot;content&quot;&gt;
        &lt;p&gt;Non-relational databases lack transactions. Instead, updates to the document are atomic. Related 
data should be placed in the same document so that updates don&#x27;t span more than one document.&lt;&#x2F;p&gt;

    &lt;&#x2F;div&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;To replicate the production environment as closely as possible, integration tests should wrap the 
&lt;em&gt;act&lt;&#x2F;em&gt; section in a separate transaction from the &lt;em&gt;arrange&lt;&#x2F;em&gt; and &lt;em&gt;assert&lt;&#x2F;em&gt; sections.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;cleanup&quot;&gt;Cleanup&lt;&#x2F;h4&gt;
&lt;p&gt;There are many ways to cleanup a database between tests:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Restore a backup database before each test&lt;&#x2F;strong&gt; - Works, but is slow.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Cleanup data at the end of the test&lt;&#x2F;strong&gt; - Might be skipped when test fails.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Wrap each test in a transaction and then don&#x27;t commit&lt;&#x2F;strong&gt; - Makes behavior between production and 
testing inconsistent.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Cleanup data at the beginning of the test&lt;&#x2F;strong&gt; - Fast, consistent, and won&#x27;t get skipped.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;best-practices&quot;&gt;Best Practices&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Avoid in-memory databases&lt;&#x2F;strong&gt; - Behavior between production and testing should be consistent.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Reuse code in test sections&lt;&#x2F;strong&gt; - &lt;em&gt;Arrange&lt;&#x2F;em&gt; with factory or builder pattern, &lt;em&gt;act&lt;&#x2F;em&gt; with decorator
pattern, and &lt;em&gt;assert&lt;&#x2F;em&gt; with handmade mocks (a.k.a. Spys).&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Skip trivial database read tests&lt;&#x2F;strong&gt; - Writes are always important because the alter the state of
the database. Reads that important or complex should be tested; disregard the rest.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Don&#x27;t test repositories directly&lt;&#x2F;strong&gt; - Repositories are a controller, so they shouldn&#x27;t be 
complex. The point of an integration test is to cover shared, external dependencies, not 
controllers.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Part 4: Unit Testing Anti-patterns</title>
		<published>2020-01-06T00:00:00+00:00</published>
		<updated>2020-01-06T00:00:00+00:00</updated>
		<link href="https://ajguerrer.github.io/blog/unit-testing/4-antipatterns/" type="text/html"/>
		<id>https://ajguerrer.github.io/blog/unit-testing/4-antipatterns/</id>
		<content type="html">&lt;h3 id=&quot;don-t-test-private-methods-directly&quot;&gt;Don&#x27;t test private methods directly&lt;&#x2F;h3&gt;
&lt;p&gt;Only test observable behavior. Coupling a test to implementation details will reduce the tests 
resistance to refactoring.&lt;&#x2F;p&gt;
&lt;blockquote class=&quot;note bad&quot;&gt;
    &lt;div class=&quot;header&quot;&gt;
        &lt;i class=&quot;ri-thumb-down-line ri-lg&quot;&gt;&lt;&#x2F;i&gt;
        
        &lt;p&gt;&lt;strong&gt;Bad&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
        
    &lt;&#x2F;div&gt; 
    &lt;div class=&quot;content&quot;&gt;
        &lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#303136;color:#afb0b6;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3b3;&quot;&gt;Order &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;public&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  std::string &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3b8c2;&quot;&gt;GenerateDescription&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;private&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;float &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3b8c2;&quot;&gt;GetPrice&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  Customer customer_;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  std::vector&amp;lt;Product&amp;gt; products_;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;std::string Order::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3b8c2;&quot;&gt;GenerateDescription&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;absl::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;StrCat&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a8c2a3;&quot;&gt;Customer name: &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, customer_.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;                      &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a8c2a3;&quot;&gt;, total number of products: &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, products_.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;size&lt;&#x2F;span&gt;&lt;span&gt;(),
&lt;&#x2F;span&gt;&lt;span&gt;                      &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a8c2a3;&quot;&gt;, total price: &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;GetPrice&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;float &lt;&#x2F;span&gt;&lt;span&gt;Order::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3b8c2;&quot;&gt;GetPrice&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;float&lt;&#x2F;span&gt;&lt;span&gt; basePrice =
&lt;&#x2F;span&gt;&lt;span&gt;      std::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;accumulate&lt;&#x2F;span&gt;&lt;span&gt;(products_.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;begin&lt;&#x2F;span&gt;&lt;span&gt;(), products_.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;end&lt;&#x2F;span&gt;&lt;span&gt;(), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;0.0&lt;&#x2F;span&gt;&lt;span&gt;, sum_base_prices);
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;float&lt;&#x2F;span&gt;&lt;span&gt; discount = customer_.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;discount&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;float&lt;&#x2F;span&gt;&lt;span&gt; taxes =
&lt;&#x2F;span&gt;&lt;span&gt;      std::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;accumulate&lt;&#x2F;span&gt;&lt;span&gt;(products_.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;begin&lt;&#x2F;span&gt;&lt;span&gt;(), products_.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;end&lt;&#x2F;span&gt;&lt;span&gt;(), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;0.0&lt;&#x2F;span&gt;&lt;span&gt;, sum_taxes);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; basePrice * discount + taxes;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;

    &lt;&#x2F;div&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;If a private method is hard to test indirectly, then it either has dead code or is in need of an 
abstraction.&lt;&#x2F;p&gt;
&lt;blockquote class=&quot;note good&quot;&gt;
    &lt;div class=&quot;header&quot;&gt;
        &lt;i class=&quot;ri-thumb-up-line ri-lg&quot;&gt;&lt;&#x2F;i&gt;
        
        &lt;p&gt;&lt;strong&gt;Good&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
        
    &lt;&#x2F;div&gt; 
    &lt;div class=&quot;content&quot;&gt;
        &lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#303136;color:#afb0b6;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3b3;&quot;&gt;Order &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;public&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  std::string &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3b8c2;&quot;&gt;GenerateDescription&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;private&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  Customer customer_;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  std::vector&amp;lt;Product&amp;gt; products_;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3b3;&quot;&gt;PriceCalculator &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;public&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;float &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3b8c2;&quot;&gt;Calculate&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;(Customer &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;customer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;, std::vector&amp;lt;Product&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;products&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;std::string Order::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3b8c2;&quot;&gt;GenerateDescription&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;  PriceCalculator calc;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;absl::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;StrCat&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a8c2a3;&quot;&gt;Customer name: &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, customer_.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;                      &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a8c2a3;&quot;&gt;, total number of products: &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, products_.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;size&lt;&#x2F;span&gt;&lt;span&gt;(),
&lt;&#x2F;span&gt;&lt;span&gt;                      &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a8c2a3;&quot;&gt;, total price: &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, calc.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;Calculate&lt;&#x2F;span&gt;&lt;span&gt;(customer_, products_));
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;float &lt;&#x2F;span&gt;&lt;span&gt;PriceCalculator::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3b8c2;&quot;&gt;Calculate&lt;&#x2F;span&gt;&lt;span&gt;(Customer &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;customer&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;                                 std::vector&amp;lt;Product&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;products&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;float&lt;&#x2F;span&gt;&lt;span&gt; basePrice =
&lt;&#x2F;span&gt;&lt;span&gt;      std::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;accumulate&lt;&#x2F;span&gt;&lt;span&gt;(products.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;begin&lt;&#x2F;span&gt;&lt;span&gt;(), products.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;end&lt;&#x2F;span&gt;&lt;span&gt;(), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;0.0&lt;&#x2F;span&gt;&lt;span&gt;, sum_base_prices);
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;float&lt;&#x2F;span&gt;&lt;span&gt; discount = customer.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;discount&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;float&lt;&#x2F;span&gt;&lt;span&gt; taxes =
&lt;&#x2F;span&gt;&lt;span&gt;      std::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;accumulate&lt;&#x2F;span&gt;&lt;span&gt;(products.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;begin&lt;&#x2F;span&gt;&lt;span&gt;(), products.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;end&lt;&#x2F;span&gt;&lt;span&gt;(), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;0.0&lt;&#x2F;span&gt;&lt;span&gt;, sum_taxes);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; basePrice * discount + taxes;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;

    &lt;&#x2F;div&gt;
&lt;&#x2F;blockquote&gt;&lt;h3 id=&quot;don-t-expose-private-state&quot;&gt;Don&#x27;t expose private state&lt;&#x2F;h3&gt;
&lt;p&gt;Its tempting to add a way to access internal state for the sake of testing.&lt;&#x2F;p&gt;
&lt;blockquote class=&quot;note bad&quot;&gt;
    &lt;div class=&quot;header&quot;&gt;
        &lt;i class=&quot;ri-thumb-down-line ri-lg&quot;&gt;&lt;&#x2F;i&gt;
        
        &lt;p&gt;&lt;strong&gt;Bad&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
        
    &lt;&#x2F;div&gt; 
    &lt;div class=&quot;content&quot;&gt;
        &lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#303136;color:#afb0b6;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;enum class &lt;&#x2F;span&gt;&lt;span&gt;CustomerStatus {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;kRegular&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;kPreferred&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;};
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3b3;&quot;&gt;Customer &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;public&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3b8c2;&quot;&gt;Promote&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;() { status_ &lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt; CustomerStatus::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;kPreferred&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;; }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;float &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3b8c2;&quot;&gt;GetDiscount&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;() {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;(status_ &lt;&#x2F;span&gt;&lt;span&gt;==&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt; CustomerStatus::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;kPreferred&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span&gt;? &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;0.95 &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;private&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  CustomerStatus status_;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;

    &lt;&#x2F;div&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;However exposing state will leak implementation details. Instead, look at how the production code 
uses the class and test accordingly.&lt;&#x2F;p&gt;
&lt;blockquote class=&quot;note good&quot;&gt;
    &lt;div class=&quot;header&quot;&gt;
        &lt;i class=&quot;ri-thumb-up-line ri-lg&quot;&gt;&lt;&#x2F;i&gt;
        
        &lt;p&gt;&lt;strong&gt;Good&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
        
    &lt;&#x2F;div&gt; 
    &lt;div class=&quot;content&quot;&gt;
        &lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#303136;color:#afb0b6;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3b3;&quot;&gt;Customer &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;public&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3b8c2;&quot;&gt;Customer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;double &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;starting_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;Promote&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;() { status_ &lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt; CustomerStatus::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;kPreferred&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;; }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;private&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  CustomerStatus status_;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;TEST&lt;&#x2F;span&gt;&lt;span&gt;(Customer, PromotedCustomerReceivesDiscount) {
&lt;&#x2F;span&gt;&lt;span&gt;  Customer customer;
&lt;&#x2F;span&gt;&lt;span&gt;  customer.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;Promote&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;  Product&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;kFujiApple&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; apple;
&lt;&#x2F;span&gt;&lt;span&gt;  customer.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;Purchase&lt;&#x2F;span&gt;&lt;span&gt;(apple);
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;EXPECT_LT&lt;&#x2F;span&gt;&lt;span&gt;(customer.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;Balance&lt;&#x2F;span&gt;&lt;span&gt;(), apple.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;Price&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;

    &lt;&#x2F;div&gt;
&lt;&#x2F;blockquote&gt;&lt;h3 id=&quot;don-t-leak-domain-knowledge-to-tests&quot;&gt;Don&#x27;t leak domain knowledge to tests&lt;&#x2F;h3&gt;
&lt;p&gt;Don&#x27;t base expectations off of implementation details.&lt;&#x2F;p&gt;
&lt;blockquote class=&quot;note bad&quot;&gt;
    &lt;div class=&quot;header&quot;&gt;
        &lt;i class=&quot;ri-thumb-down-line ri-lg&quot;&gt;&lt;&#x2F;i&gt;
        
        &lt;p&gt;&lt;strong&gt;Bad&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
        
    &lt;&#x2F;div&gt; 
    &lt;div class=&quot;content&quot;&gt;
        &lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#303136;color:#afb0b6;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3b3;&quot;&gt;Calculator &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;public&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3b8c2;&quot;&gt;Add&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;) { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt; a &lt;&#x2F;span&gt;&lt;span&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt; b; }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;TEST&lt;&#x2F;span&gt;&lt;span&gt;(Calculator, Add) {
&lt;&#x2F;span&gt;&lt;span&gt;  Calculator calc;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; a = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; b = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; expected = a + b;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; actual = calc.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;Add&lt;&#x2F;span&gt;&lt;span&gt;(a, b);
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;EXPECT_EQ&lt;&#x2F;span&gt;&lt;span&gt;(actual, expected);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;

    &lt;&#x2F;div&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;While it may sound counterintuitive at first, using hardcoded values in your tests is a good thing.&lt;&#x2F;p&gt;
&lt;blockquote class=&quot;note good&quot;&gt;
    &lt;div class=&quot;header&quot;&gt;
        &lt;i class=&quot;ri-thumb-up-line ri-lg&quot;&gt;&lt;&#x2F;i&gt;
        
        &lt;p&gt;&lt;strong&gt;Good&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
        
    &lt;&#x2F;div&gt; 
    &lt;div class=&quot;content&quot;&gt;
        &lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#303136;color:#afb0b6;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;TEST&lt;&#x2F;span&gt;&lt;span&gt;(Calculator, Add) {
&lt;&#x2F;span&gt;&lt;span&gt;  Calculator calc;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;EXPECT_EQ&lt;&#x2F;span&gt;&lt;span&gt;(calc.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;Add&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;

    &lt;&#x2F;div&gt;
&lt;&#x2F;blockquote&gt;&lt;h3 id=&quot;don-t-add-production-code-for-tests-only&quot;&gt;Don&#x27;t add production code for tests only&lt;&#x2F;h3&gt;
&lt;p&gt;Mixing test code with production code only adds to maintenance costs.&lt;&#x2F;p&gt;
&lt;blockquote class=&quot;note bad&quot;&gt;
    &lt;div class=&quot;header&quot;&gt;
        &lt;i class=&quot;ri-thumb-down-line ri-lg&quot;&gt;&lt;&#x2F;i&gt;
        
        &lt;p&gt;&lt;strong&gt;Bad&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
        
    &lt;&#x2F;div&gt; 
    &lt;div class=&quot;content&quot;&gt;
        &lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#303136;color:#afb0b6;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3b3;&quot;&gt;Logger &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;public&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;explicit &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3b8c2;&quot;&gt;Logger&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;bool &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;is_test_environment&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;      : &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;is_test_environment_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;(is_test_environment) {}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3b8c2;&quot;&gt;Log&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;(std::string &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;text&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;(is_test_environment_) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;    std::cout &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt; text &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&amp;lt; &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3c2b5;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;private&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;bool&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt; is_test_environment_;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;

    &lt;&#x2F;div&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Instead, write two distinct implementations that share a common interface.&lt;&#x2F;p&gt;
&lt;blockquote class=&quot;note good&quot;&gt;
    &lt;div class=&quot;header&quot;&gt;
        &lt;i class=&quot;ri-thumb-up-line ri-lg&quot;&gt;&lt;&#x2F;i&gt;
        
        &lt;p&gt;&lt;strong&gt;Good&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
        
    &lt;&#x2F;div&gt; 
    &lt;div class=&quot;content&quot;&gt;
        &lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#303136;color:#afb0b6;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3b3;&quot;&gt;Logger &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;public&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;virtual void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3b8c2;&quot;&gt;Log&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;(std::string &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;text&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3b3;&quot;&gt;ProductionLogger &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;public &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3b3;&quot;&gt;Logger &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;public&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3b8c2;&quot;&gt;Log&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;(std::string &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;text&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;{ std::cout &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt; text &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&amp;lt; &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3c2b5;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;; }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3b3;&quot;&gt;FakeLogger &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;public &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3b3;&quot;&gt;Logger &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;public&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3b8c2;&quot;&gt;Log&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;(std::string &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;text&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;{}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3b3;&quot;&gt;Controller &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;public&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3b8c2;&quot;&gt;SomeMethod&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt; Logger&lt;&#x2F;span&gt;&lt;span&gt;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;logger&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;) { logger.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;Log&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a8c2a3;&quot;&gt;SomeMethod was called&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;); }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;

    &lt;&#x2F;div&gt;
&lt;&#x2F;blockquote&gt;&lt;h3 id=&quot;don-t-mock-concrete-classes&quot;&gt;Don&#x27;t mock concrete classes&lt;&#x2F;h3&gt;
&lt;p&gt;Treat urges to mock a concrete class as a warning flag for violating the Single Responsibility 
Principle.&lt;&#x2F;p&gt;
&lt;blockquote class=&quot;note bad&quot;&gt;
    &lt;div class=&quot;header&quot;&gt;
        &lt;i class=&quot;ri-thumb-down-line ri-lg&quot;&gt;&lt;&#x2F;i&gt;
        
        &lt;p&gt;&lt;strong&gt;Bad&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
        
    &lt;&#x2F;div&gt; 
    &lt;div class=&quot;content&quot;&gt;
        &lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#303136;color:#afb0b6;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3b3;&quot;&gt;StatisticsCalculator &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;public&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;virtual&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt; std::vector&amp;lt;DeliveryRecord&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3b8c2;&quot;&gt;GetDeliveries&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;customer_id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  Statistic &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3b8c2;&quot;&gt;Calculate&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;customer_id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3b3;&quot;&gt;CustomerController &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;public&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3b8c2;&quot;&gt;CustomerController&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt; StatisticsCalculator&lt;&#x2F;span&gt;&lt;span&gt;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;calculator&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;      : &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;calculator_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;(calculator) {}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  std::string &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3b8c2;&quot;&gt;GetStatistics&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;customer_id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;private&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  StatisticsCalculator calculator_;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;

    &lt;&#x2F;div&gt;
&lt;&#x2F;blockquote&gt;&lt;blockquote class=&quot;note bad&quot;&gt;
    &lt;div class=&quot;header&quot;&gt;
        &lt;i class=&quot;ri-thumb-down-line ri-lg&quot;&gt;&lt;&#x2F;i&gt;
        
        &lt;p&gt;&lt;strong&gt;Bad&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
        
    &lt;&#x2F;div&gt; 
    &lt;div class=&quot;content&quot;&gt;
        &lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#303136;color:#afb0b6;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span&gt;std::vector&amp;lt;DeliveryRecord&amp;gt; StatisticsCalculator::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3b8c2;&quot;&gt;GetDeliveries&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;customer_id&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#797b86;&quot;&gt;&#x2F;* Call an external dependency to get the list of deliveries *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;std::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;vector&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;DeliveryRecord&amp;gt;{};
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;std::string CustomerController::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3b8c2;&quot;&gt;GetStatistics&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;customer_id&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;  Statistic stat = calculator_.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;Calculate&lt;&#x2F;span&gt;&lt;span&gt;(customer_id);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;absl::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;StrCat&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a8c2a3;&quot;&gt;Total weight delivered: &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, stat.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;totalWeight&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;                      &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a8c2a3;&quot;&gt;. Total cost: &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, stat.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;totalCost&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;

    &lt;&#x2F;div&gt;
&lt;&#x2F;blockquote&gt;&lt;blockquote class=&quot;note bad&quot;&gt;
    &lt;div class=&quot;header&quot;&gt;
        &lt;i class=&quot;ri-thumb-down-line ri-lg&quot;&gt;&lt;&#x2F;i&gt;
        
        &lt;p&gt;&lt;strong&gt;Bad&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
        
    &lt;&#x2F;div&gt; 
    &lt;div class=&quot;content&quot;&gt;
        &lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#303136;color:#afb0b6;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3b3;&quot;&gt;MockStatisticsCalculator &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;public &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3b3;&quot;&gt;StatisticsCalculator &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3b8c2;&quot;&gt;MOCK_METHOD&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;(std::vector&amp;lt;DeliveryRecord&amp;gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;GetDeliveries&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;, (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt; customer_id),
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;              (override));
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;TEST&lt;&#x2F;span&gt;&lt;span&gt;(CustomerController, CustomerWithNoDeliveries) {
&lt;&#x2F;span&gt;&lt;span&gt;  MockStatisticsCalculator calc;
&lt;&#x2F;span&gt;&lt;span&gt;  CustomerController &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;controller&lt;&#x2F;span&gt;&lt;span&gt;(calc);
&lt;&#x2F;span&gt;&lt;span&gt;  std::string result = controller.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;GetStatistics&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;EXPECT_EQ&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a8c2a3;&quot;&gt;Total weight delivered: 0. Total cost: 0&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, result);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;

    &lt;&#x2F;div&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Separate unrelated responsibilities into two different classes, plus an interface for the shared 
dependencies.&lt;&#x2F;p&gt;
&lt;blockquote class=&quot;note good&quot;&gt;
    &lt;div class=&quot;header&quot;&gt;
        &lt;i class=&quot;ri-thumb-up-line ri-lg&quot;&gt;&lt;&#x2F;i&gt;
        
        &lt;p&gt;&lt;strong&gt;Good&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
        
    &lt;&#x2F;div&gt; 
    &lt;div class=&quot;content&quot;&gt;
        &lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#303136;color:#afb0b6;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3b3;&quot;&gt;DeliveryGateway &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;public&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;virtual &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3b8c2;&quot;&gt;~DeliveryGateway&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;(){};
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;virtual&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt; std::vector&amp;lt;DeliveryRecord&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3b8c2;&quot;&gt;GetDeliveries&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;customer_id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3b3;&quot;&gt;ConcreteDeliveryGateway &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;public &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3b3;&quot;&gt;DeliveryGateway &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;public&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  std::vector&amp;lt;DeliveryRecord&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3b8c2;&quot;&gt;GetDeliveries&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;customer_id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3b3;&quot;&gt;StatisticsCalculator &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;public&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  Statistic &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3b8c2;&quot;&gt;Calculate&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt; std::vector&amp;lt;DeliveryRecord&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;records&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3b3;&quot;&gt;CustomerController &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;public&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3b8c2;&quot;&gt;CustomerController&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt; StatisticsCalculator&lt;&#x2F;span&gt;&lt;span&gt;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;calculator&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;                     std::unique_ptr&amp;lt;DeliveryGateway&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;gateway&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;      : &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;calculator_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;(calculator), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;gateway_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;(std::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;move&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;(gateway)) {}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  std::string &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3b8c2;&quot;&gt;GetStatistics&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;customer_id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;private&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  StatisticsCalculator calculator_;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  std::unique_ptr&amp;lt;DeliveryGateway&amp;gt; gateway_;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;

    &lt;&#x2F;div&gt;
&lt;&#x2F;blockquote&gt;&lt;blockquote class=&quot;note good&quot;&gt;
    &lt;div class=&quot;header&quot;&gt;
        &lt;i class=&quot;ri-thumb-up-line ri-lg&quot;&gt;&lt;&#x2F;i&gt;
        
        &lt;p&gt;&lt;strong&gt;Good&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
        
    &lt;&#x2F;div&gt; 
    &lt;div class=&quot;content&quot;&gt;
        &lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#303136;color:#afb0b6;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span&gt;std::string CustomerController::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3b8c2;&quot;&gt;GetStatistics&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;customer_id&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; std::vector&amp;lt;DeliveryRecord&amp;gt; records =
&lt;&#x2F;span&gt;&lt;span&gt;      gateway_-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;GetDeliveries&lt;&#x2F;span&gt;&lt;span&gt;(customer_id);
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; Statistic stat = calculator_.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;Calculate&lt;&#x2F;span&gt;&lt;span&gt;(records);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;absl::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;StrCat&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a8c2a3;&quot;&gt;Total weight delivered: &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, stat.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;totalWeight&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;                      &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a8c2a3;&quot;&gt;. Total cost: &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, stat.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;totalCost&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;

    &lt;&#x2F;div&gt;
&lt;&#x2F;blockquote&gt;&lt;blockquote class=&quot;note good&quot;&gt;
    &lt;div class=&quot;header&quot;&gt;
        &lt;i class=&quot;ri-thumb-up-line ri-lg&quot;&gt;&lt;&#x2F;i&gt;
        
        &lt;p&gt;&lt;strong&gt;Good&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
        
    &lt;&#x2F;div&gt; 
    &lt;div class=&quot;content&quot;&gt;
        &lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#303136;color:#afb0b6;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;TEST&lt;&#x2F;span&gt;&lt;span&gt;(CustomerController, CustomerWithNoDeliveries) {
&lt;&#x2F;span&gt;&lt;span&gt;  StatisticsCalculator calc;
&lt;&#x2F;span&gt;&lt;span&gt;  CustomerController &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;controller&lt;&#x2F;span&gt;&lt;span&gt;(calc, std::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;make_unique&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;MockDeliveryGateway&amp;gt;());
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  std::string result = controller.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;GetStatistics&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;EXPECT_EQ&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a8c2a3;&quot;&gt;Total weight delivered: 0. Total cost: 0&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, result);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;

    &lt;&#x2F;div&gt;
&lt;&#x2F;blockquote&gt;&lt;h3 id=&quot;don-t-use-time-as-an-ambient-context&quot;&gt;Don&#x27;t use time as an ambient context&lt;&#x2F;h3&gt;
&lt;p&gt;Using time as an ambient context adds unnecessary shared dependencies, making testing difficult.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#303136;color:#afb0b6;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;using&lt;&#x2F;span&gt;&lt;span&gt; std::chrono::system_clock;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;using &lt;&#x2F;span&gt;&lt;span&gt;time_point = std::chrono::time_point&amp;lt;system_clock&amp;gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote class=&quot;note bad&quot;&gt;
    &lt;div class=&quot;header&quot;&gt;
        &lt;i class=&quot;ri-thumb-down-line ri-lg&quot;&gt;&lt;&#x2F;i&gt;
        
        &lt;p&gt;&lt;strong&gt;Bad&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
        
    &lt;&#x2F;div&gt; 
    &lt;div class=&quot;content&quot;&gt;
        &lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#303136;color:#afb0b6;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3b3;&quot;&gt;DateTimeServer &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;public&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3b8c2;&quot;&gt;DateTimeServer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;() : &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;now_func_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;system_clock::now) {}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3b8c2;&quot;&gt;Init&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;(std::function&amp;lt;time_point()&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;now_func&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;) { now_func_ &lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt; now_func; }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  time_point &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3b8c2;&quot;&gt;Now&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;() { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;now_func_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;(); }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;private&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  std::function&amp;lt;time_point()&amp;gt; now_func_;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;

    &lt;&#x2F;div&gt;
&lt;&#x2F;blockquote&gt;&lt;blockquote class=&quot;note bad&quot;&gt;
    &lt;div class=&quot;header&quot;&gt;
        &lt;i class=&quot;ri-thumb-down-line ri-lg&quot;&gt;&lt;&#x2F;i&gt;
        
        &lt;p&gt;&lt;strong&gt;Bad&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
        
    &lt;&#x2F;div&gt; 
    &lt;div class=&quot;content&quot;&gt;
        &lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#303136;color:#afb0b6;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span&gt;DateTimeServer server;
&lt;&#x2F;span&gt;&lt;span&gt;std::time_t time = system_clock::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;to_time_t&lt;&#x2F;span&gt;&lt;span&gt;(server.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;Now&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;std::cout &amp;lt;&amp;lt; std::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3b8c2;&quot;&gt;ctime&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;time) &amp;lt;&amp;lt; &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3c2b5;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;std::function&amp;lt;time_point()&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3b8c2;&quot;&gt;now&lt;&#x2F;span&gt;&lt;span&gt;([] {
&lt;&#x2F;span&gt;&lt;span&gt;  std::tm &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3b8c2;&quot;&gt;time&lt;&#x2F;span&gt;&lt;span&gt;{tm_mday : &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, tm_mon : &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, tm_year : &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;120&lt;&#x2F;span&gt;&lt;span&gt;};
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;system_clock::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;from_time_t&lt;&#x2F;span&gt;&lt;span&gt;(std::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3b8c2;&quot;&gt;mktime&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;time));
&lt;&#x2F;span&gt;&lt;span&gt;});
&lt;&#x2F;span&gt;&lt;span&gt;server.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;Init&lt;&#x2F;span&gt;&lt;span&gt;(now);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;time = system_clock::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;to_time_t&lt;&#x2F;span&gt;&lt;span&gt;(server.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;Now&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;std::cout &amp;lt;&amp;lt; std::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3b8c2;&quot;&gt;ctime&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;time) &amp;lt;&amp;lt; &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3c2b5;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;

    &lt;&#x2F;div&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Instead, inject the time dependency explicitly either as a value or a service. &lt;&#x2F;p&gt;
&lt;blockquote class=&quot;note good&quot;&gt;
    &lt;div class=&quot;header&quot;&gt;
        &lt;i class=&quot;ri-thumb-up-line ri-lg&quot;&gt;&lt;&#x2F;i&gt;
        
        &lt;p&gt;&lt;strong&gt;Good&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
        
    &lt;&#x2F;div&gt; 
    &lt;div class=&quot;content&quot;&gt;
        &lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#303136;color:#afb0b6;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3b3;&quot;&gt;DateTimeServer &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;public&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;virtual &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3b8c2;&quot;&gt;~DateTimeServer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;(){};
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;virtual&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt; time_point &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3b8c2;&quot;&gt;Now&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;() &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3b3;&quot;&gt;ConcreteDateTimeServer &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;public &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3b3;&quot;&gt;DateTimeServer &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;public&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  time_point &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3b8c2;&quot;&gt;Now&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;() { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;system_clock::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;now&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;(); }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3b3;&quot;&gt;InquiryController &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;public&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3b8c2;&quot;&gt;InquiryController&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;(std::unique_ptr&amp;lt;DateTimeServer&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;server&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;      : &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;date_time_server_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;(std::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;move&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;(server)) {}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3b8c2;&quot;&gt;ApproveInquiry&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;private&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  std::unique_ptr&amp;lt;DateTimeServer&amp;gt; date_time_server_;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;

    &lt;&#x2F;div&gt;
&lt;&#x2F;blockquote&gt;&lt;blockquote class=&quot;note good&quot;&gt;
    &lt;div class=&quot;header&quot;&gt;
        &lt;i class=&quot;ri-thumb-up-line ri-lg&quot;&gt;&lt;&#x2F;i&gt;
        
        &lt;p&gt;&lt;strong&gt;Good&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
        
    &lt;&#x2F;div&gt; 
    &lt;div class=&quot;content&quot;&gt;
        &lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#303136;color:#afb0b6;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span&gt;InquiryController::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3b8c2;&quot;&gt;ApproveInquiry&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;  Inquiry inquiry = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;GetById&lt;&#x2F;span&gt;&lt;span&gt;(id);
&lt;&#x2F;span&gt;&lt;span&gt;  inquiry.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;Approve&lt;&#x2F;span&gt;&lt;span&gt;(date_time_server_-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;Now&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;SaveInquiry&lt;&#x2F;span&gt;&lt;span&gt;(inquiry);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;

    &lt;&#x2F;div&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Prefer injecting values over injecting services.&lt;&#x2F;p&gt;
&lt;blockquote class=&quot;note good&quot;&gt;
    &lt;div class=&quot;header&quot;&gt;
        &lt;i class=&quot;ri-thumb-up-line ri-lg&quot;&gt;&lt;&#x2F;i&gt;
        
        &lt;p&gt;&lt;strong&gt;Good&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
        
    &lt;&#x2F;div&gt; 
    &lt;div class=&quot;content&quot;&gt;
        &lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#303136;color:#afb0b6;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span&gt;InquiryController::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3b8c2;&quot;&gt;ApproveInquiry&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;, time_point &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;date_time&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;  Inquiry inquiry = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;GetById&lt;&#x2F;span&gt;&lt;span&gt;(id);
&lt;&#x2F;span&gt;&lt;span&gt;  inquiry.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;Approve&lt;&#x2F;span&gt;&lt;span&gt;(date_time);
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;SaveInquiry&lt;&#x2F;span&gt;&lt;span&gt;(inquiry);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;

    &lt;&#x2F;div&gt;
&lt;&#x2F;blockquote&gt;</content>
	</entry>
	<entry xml:lang="en">
		<title>Tests Too DRY? Make Them DAMP!</title>
		<published>2019-12-03T00:00:00+00:00</published>
		<updated>2019-12-03T00:00:00+00:00</updated>
		<link href="https://ajguerrer.github.io/blog/tott/tests-too-dry-make-them-damp/" type="text/html"/>
		<id>https://ajguerrer.github.io/blog/tott/tests-too-dry-make-them-damp/</id>
		<content type="html">&lt;p&gt;Though the DRY (&amp;quot;Don&#x27;t Repeat Yourself&amp;quot;) principle is great for production code, tests don&#x27;t test 
themselves. &lt;&#x2F;p&gt;
&lt;blockquote class=&quot;note bad&quot;&gt;
    &lt;div class=&quot;header&quot;&gt;
        &lt;i class=&quot;ri-thumb-down-line ri-lg&quot;&gt;&lt;&#x2F;i&gt;
        
        &lt;p&gt;&lt;strong&gt;Bad&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
        
    &lt;&#x2F;div&gt; 
    &lt;div class=&quot;content&quot;&gt;
        &lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#303136;color:#afb0b6;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3b3;&quot;&gt;ForumTest &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;public &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3b3;&quot;&gt;::testing::Test &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;protected&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3b8c2;&quot;&gt;SetUp&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;override &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;auto&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt; user &lt;&#x2F;span&gt;&lt;span&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt; users_) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;      forum_.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;Register&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;(user);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;    }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  Forum forum_;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  std::vector&amp;lt;User&amp;gt; users_ &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;User&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a8c2a3;&quot;&gt;Alice&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;User&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a8c2a3;&quot;&gt;Bob&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;)};
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;TEST_F&lt;&#x2F;span&gt;&lt;span&gt;(ForumTest, CanRegisterMultipleUsers) {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;auto&lt;&#x2F;span&gt;&lt;span&gt; user : users_) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;EXPECT_TRUE&lt;&#x2F;span&gt;&lt;span&gt;(forum_.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;HasRegisteredUser&lt;&#x2F;span&gt;&lt;span&gt;(user));
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;

    &lt;&#x2F;div&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Tests should optimize for readability, even at the expense of redundancy. Prefer the DAMP 
(&amp;quot;Descriptive and Meaningful Phrases&amp;quot;) principle. &lt;&#x2F;p&gt;
&lt;blockquote class=&quot;note good&quot;&gt;
    &lt;div class=&quot;header&quot;&gt;
        &lt;i class=&quot;ri-thumb-up-line ri-lg&quot;&gt;&lt;&#x2F;i&gt;
        
        &lt;p&gt;&lt;strong&gt;Good&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
        
    &lt;&#x2F;div&gt; 
    &lt;div class=&quot;content&quot;&gt;
        &lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#303136;color:#afb0b6;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;TEST&lt;&#x2F;span&gt;&lt;span&gt;(ForumTest, CanRegisterMultipleUsers) {
&lt;&#x2F;span&gt;&lt;span&gt;  Forum forum;
&lt;&#x2F;span&gt;&lt;span&gt;  User &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;user1&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a8c2a3;&quot;&gt;Alice&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;  User &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;user2&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a8c2a3;&quot;&gt;Bob&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;  forum.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;Register&lt;&#x2F;span&gt;&lt;span&gt;(user1);
&lt;&#x2F;span&gt;&lt;span&gt;  forum.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;Register&lt;&#x2F;span&gt;&lt;span&gt;(user2);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;EXPECT_TRUE&lt;&#x2F;span&gt;&lt;span&gt;(forum.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;HasRegisteredUser&lt;&#x2F;span&gt;&lt;span&gt;(user1));
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;EXPECT_TRUE&lt;&#x2F;span&gt;&lt;span&gt;(forum.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;HasRegisteredUser&lt;&#x2F;span&gt;&lt;span&gt;(user2));
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;

    &lt;&#x2F;div&gt;
&lt;&#x2F;blockquote&gt;</content>
	</entry>
	<entry xml:lang="en">
		<title>Exercise Service Call Contracts in Tests</title>
		<published>2018-11-27T00:00:00+00:00</published>
		<updated>2018-11-27T00:00:00+00:00</updated>
		<link href="https://ajguerrer.github.io/blog/tott/exercise-service-call-contracts-in-tests/" type="text/html"/>
		<id>https://ajguerrer.github.io/blog/tott/exercise-service-call-contracts-in-tests/</id>
		<content type="html">&lt;p&gt;If the code under test relies on the contract of a service, prefer exercising the service call
instead of mocking it out. Some service owners provide a fake. Otherwise, use a hermetic server.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Make Interfaces Hard to Misuse</title>
		<published>2018-07-25T00:00:00+00:00</published>
		<updated>2018-07-25T00:00:00+00:00</updated>
		<link href="https://ajguerrer.github.io/blog/tott/make-interfaces-hard-to-misuse/" type="text/html"/>
		<id>https://ajguerrer.github.io/blog/tott/make-interfaces-hard-to-misuse/</id>
		<content type="html">&lt;p&gt;Don&#x27;t push the responsibility of maintaining invariants on the caller.&lt;&#x2F;p&gt;
&lt;blockquote class=&quot;note bad&quot;&gt;
    &lt;div class=&quot;header&quot;&gt;
        &lt;i class=&quot;ri-thumb-down-line ri-lg&quot;&gt;&lt;&#x2F;i&gt;
        
        &lt;p&gt;&lt;strong&gt;Bad&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
        
    &lt;&#x2F;div&gt; 
    &lt;div class=&quot;content&quot;&gt;
        &lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#303136;color:#afb0b6;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3b3;&quot;&gt;Vector &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;explicit &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3b8c2;&quot;&gt;Vector&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;num_slots&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3b8c2;&quot;&gt;RemainingSlots&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3b8c2;&quot;&gt;AddSlots&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;num_slots&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3b8c2;&quot;&gt;Insert&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;

    &lt;&#x2F;div&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;In the code above, the caller needs to check &lt;code&gt;RemainingSlots&lt;&#x2F;code&gt;, and if &lt;code&gt;0&lt;&#x2F;code&gt;, &lt;code&gt;AddSlots&lt;&#x2F;code&gt; in order for
&lt;code&gt;Insert&lt;&#x2F;code&gt; to work properly.&lt;&#x2F;p&gt;
&lt;p&gt;Instead, &lt;code&gt;Insert&lt;&#x2F;code&gt; could automatically manage slots.&lt;&#x2F;p&gt;
&lt;blockquote class=&quot;note good&quot;&gt;
    &lt;div class=&quot;header&quot;&gt;
        &lt;i class=&quot;ri-thumb-up-line ri-lg&quot;&gt;&lt;&#x2F;i&gt;
        
        &lt;p&gt;&lt;strong&gt;Good&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
        
    &lt;&#x2F;div&gt; 
    &lt;div class=&quot;content&quot;&gt;
        &lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#303136;color:#afb0b6;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3b3;&quot;&gt;Vector &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;explicit &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3b8c2;&quot;&gt;Vector&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;num_slots&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3b8c2;&quot;&gt;Insert&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;

    &lt;&#x2F;div&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Other signs an interface is hard to use:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Initialize&lt;&#x2F;code&gt; &#x2F; &lt;code&gt;Deitialize&lt;&#x2F;code&gt; functions.&lt;&#x2F;li&gt;
&lt;li&gt;Allowing partially created objects.&lt;&#x2F;li&gt;
&lt;li&gt;Parameters that can have invalid values.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Sometimes it&#x27;s not practical to have a foolproof interface. In those cases rely on static analysis
or documentation.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Only Verify Relevant Method Arguments</title>
		<published>2018-06-26T00:00:00+00:00</published>
		<updated>2018-06-26T00:00:00+00:00</updated>
		<link href="https://ajguerrer.github.io/blog/tott/only-verify-relevant-method-arguments/" type="text/html"/>
		<id>https://ajguerrer.github.io/blog/tott/only-verify-relevant-method-arguments/</id>
		<content type="html">&lt;p&gt;Tests become fragile when they expect exact values on irrelevant arguments.&lt;&#x2F;p&gt;
&lt;blockquote class=&quot;note bad&quot;&gt;
    &lt;div class=&quot;header&quot;&gt;
        &lt;i class=&quot;ri-thumb-down-line ri-lg&quot;&gt;&lt;&#x2F;i&gt;
        
        &lt;p&gt;&lt;strong&gt;Bad&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
        
    &lt;&#x2F;div&gt; 
    &lt;div class=&quot;content&quot;&gt;
        &lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#303136;color:#afb0b6;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;TEST_F&lt;&#x2F;span&gt;&lt;span&gt;(DisplayGreetingTest, ShowSpecialGreetingOnNewYearsDay) {
&lt;&#x2F;span&gt;&lt;span&gt;  fake_clock_.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;SetTime&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;kNewYearsDay&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;  fake_user_.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;SetName&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a8c2a3;&quot;&gt;Fake User&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;EXPECT_CALL&lt;&#x2F;span&gt;&lt;span&gt;(mock_user_prompter_,
&lt;&#x2F;span&gt;&lt;span&gt;              &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;UpdatePrompt&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a8c2a3;&quot;&gt;Hi Fake User! Happy New Year!&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;                           &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;TitleBar&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a8c2a3;&quot;&gt;2018-01-01&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;), PromptStyle::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;kNormal&lt;&#x2F;span&gt;&lt;span&gt;));
&lt;&#x2F;span&gt;&lt;span&gt;  user_greeter_.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;DisplayGreeting&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;

    &lt;&#x2F;div&gt;
&lt;&#x2F;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Only verify one behavior per test.&lt;&#x2F;li&gt;
&lt;li&gt;Only verify arguments that affect the correctness of the specific behavior being tested.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;blockquote class=&quot;note good&quot;&gt;
    &lt;div class=&quot;header&quot;&gt;
        &lt;i class=&quot;ri-thumb-up-line ri-lg&quot;&gt;&lt;&#x2F;i&gt;
        
        &lt;p&gt;&lt;strong&gt;Good&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
        
    &lt;&#x2F;div&gt; 
    &lt;div class=&quot;content&quot;&gt;
        &lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#303136;color:#afb0b6;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;TEST_F&lt;&#x2F;span&gt;&lt;span&gt;(DisplayGreetingTest, ShowSpecialGreetingOnNewYearsDay) {
&lt;&#x2F;span&gt;&lt;span&gt;  fake_clock_.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;SetTime&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;kNewYearsDay&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;EXPECT_CALL&lt;&#x2F;span&gt;&lt;span&gt;(mock_user_prompter_,
&lt;&#x2F;span&gt;&lt;span&gt;              &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;UpdatePrompt&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;HasSubstr&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a8c2a3;&quot;&gt;Happy New Year!&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;), _, _));
&lt;&#x2F;span&gt;&lt;span&gt;  user_greeter_.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;DisplayGreeting&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;TEST_F&lt;&#x2F;span&gt;&lt;span&gt;(DisplayGreetingTest, RenderUserName) {
&lt;&#x2F;span&gt;&lt;span&gt;  fake_user_.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;SetName&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a8c2a3;&quot;&gt;Fake User&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;EXPECT_CALL&lt;&#x2F;span&gt;&lt;span&gt;(mock_user_prompter_, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;UpdatePrompt&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;HasSubstr&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a8c2a3;&quot;&gt;Fake User&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;), _, _));
&lt;&#x2F;span&gt;&lt;span&gt;  user_greeter_.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;DisplayGreeting&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;

    &lt;&#x2F;div&gt;
&lt;&#x2F;blockquote&gt;</content>
	</entry>
	<entry xml:lang="en">
		<title>Keep Tests Focused</title>
		<published>2018-06-11T00:00:00+00:00</published>
		<updated>2018-06-11T00:00:00+00:00</updated>
		<link href="https://ajguerrer.github.io/blog/tott/keep-tests-focused/" type="text/html"/>
		<id>https://ajguerrer.github.io/blog/tott/keep-tests-focused/</id>
		<content type="html">&lt;p&gt;Testing too many scenarios at once can make it difficult to understand test and reason about the
failure.&lt;&#x2F;p&gt;
&lt;blockquote class=&quot;note bad&quot;&gt;
    &lt;div class=&quot;header&quot;&gt;
        &lt;i class=&quot;ri-thumb-down-line ri-lg&quot;&gt;&lt;&#x2F;i&gt;
        
        &lt;p&gt;&lt;strong&gt;Bad&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
        
    &lt;&#x2F;div&gt; 
    &lt;div class=&quot;content&quot;&gt;
        &lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#303136;color:#afb0b6;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;TEST_F&lt;&#x2F;span&gt;&lt;span&gt;(BankAccountTest, WithdrawFromAccount) {
&lt;&#x2F;span&gt;&lt;span&gt;  Transaction transaction = account_.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;Deposit&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;Usd&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;));
&lt;&#x2F;span&gt;&lt;span&gt;  clock_.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;AdvanceTime&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;kMinTimeToSettle&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;  account_.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;Settle&lt;&#x2F;span&gt;&lt;span&gt;(transaction);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;EXPECT_THAT&lt;&#x2F;span&gt;&lt;span&gt;(account_.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;Withdraw&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;Usd&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;)), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;IsOk&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;EXPECT_THAT&lt;&#x2F;span&gt;&lt;span&gt;(account_.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;Withdraw&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;USd&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;)), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;IsRejected&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;  account_.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;SetOverdraftLimit&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;Usd&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;));
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;EXPECT_THAT&lt;&#x2F;span&gt;&lt;span&gt;(account_.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;Withdraw&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;Usd&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;)), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;IsOk&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;

    &lt;&#x2F;div&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Break up each scenario into its own test.&lt;&#x2F;p&gt;
&lt;blockquote class=&quot;note good&quot;&gt;
    &lt;div class=&quot;header&quot;&gt;
        &lt;i class=&quot;ri-thumb-up-line ri-lg&quot;&gt;&lt;&#x2F;i&gt;
        
        &lt;p&gt;&lt;strong&gt;Good&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
        
    &lt;&#x2F;div&gt; 
    &lt;div class=&quot;content&quot;&gt;
        &lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#303136;color:#afb0b6;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;TEST_F&lt;&#x2F;span&gt;&lt;span&gt;(BankAccountTest, CanWithdrawWithinBalance) {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;DepositAndSettle&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;Usd&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;));
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;EXPECT_THAT&lt;&#x2F;span&gt;&lt;span&gt;(account_.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;Withdraw&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;Usd&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;)), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;IsOk&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;TEST_F&lt;&#x2F;span&gt;&lt;span&gt;(BankAccountTest, CannotOverdraw) {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;DepositAndSettle&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;Usd&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;));
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;EXPECT_THAT&lt;&#x2F;span&gt;&lt;span&gt;(account_.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;Withdraw&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;Usd&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;6&lt;&#x2F;span&gt;&lt;span&gt;)), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;IsRejected&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;TEST_F&lt;&#x2F;span&gt;&lt;span&gt;(BankAccountTest, CanOverdrawUpToOverdraftLimit) {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;DepositAndSettle&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;Usd&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;));
&lt;&#x2F;span&gt;&lt;span&gt;  account_.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;SetOverdraftLimit&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;Usd&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;));
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;EXPECT_THAT&lt;&#x2F;span&gt;&lt;span&gt;(account_.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;Withdraw&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;Usd&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;6&lt;&#x2F;span&gt;&lt;span&gt;)), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;IsOk&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;

    &lt;&#x2F;div&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Notice how each test only verifies the output of one call per test.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Understanding Code in Review</title>
		<published>2018-05-01T00:00:00+00:00</published>
		<updated>2018-05-01T00:00:00+00:00</updated>
		<link href="https://ajguerrer.github.io/blog/tott/understanding-code-in-review/" type="text/html"/>
		<id>https://ajguerrer.github.io/blog/tott/understanding-code-in-review/</id>
		<content type="html">&lt;p&gt;If you find yourself reviewing code that is difficult to understand, don&#x27;t waste time reviewing it.&lt;&#x2F;p&gt;
&lt;blockquote class=&quot;note bad&quot;&gt;
    &lt;div class=&quot;header&quot;&gt;
        &lt;i class=&quot;ri-thumb-down-line ri-lg&quot;&gt;&lt;&#x2F;i&gt;
        
        &lt;p&gt;&lt;strong&gt;Bad&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
        
    &lt;&#x2F;div&gt; 
    &lt;div class=&quot;content&quot;&gt;
        &lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#303136;color:#afb0b6;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;bool &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3b8c2;&quot;&gt;IsOkay&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;n&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;bool&lt;&#x2F;span&gt;&lt;span&gt; f = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; i = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;; i &amp;lt;= n; ++i) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(n % i == &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;) f = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;!f;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;

    &lt;&#x2F;div&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Ask for it to be clarified.&lt;&#x2F;p&gt;
&lt;blockquote class=&quot;note good&quot;&gt;
    &lt;div class=&quot;header&quot;&gt;
        &lt;i class=&quot;ri-thumb-up-line ri-lg&quot;&gt;&lt;&#x2F;i&gt;
        
        &lt;p&gt;&lt;strong&gt;Good&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
        
    &lt;&#x2F;div&gt; 
    &lt;div class=&quot;content&quot;&gt;
        &lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#303136;color:#afb0b6;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;bool &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3b8c2;&quot;&gt;IsPrime&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;n&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; divisor = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;; divisor &amp;lt;= n &#x2F; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;; ++divisor) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(n % divisor == &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;

    &lt;&#x2F;div&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Clarifying code often results in noticing improvements.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Cleanly Create Test Data</title>
		<published>2018-02-20T00:00:00+00:00</published>
		<updated>2018-02-20T00:00:00+00:00</updated>
		<link href="https://ajguerrer.github.io/blog/tott/cleanly-create-test-data/" type="text/html"/>
		<id>https://ajguerrer.github.io/blog/tott/cleanly-create-test-data/</id>
		<content type="html">&lt;p&gt;Helper methods make it easier to create test data, but they don&#x27;t age well.&lt;&#x2F;p&gt;
&lt;blockquote class=&quot;note bad&quot;&gt;
    &lt;div class=&quot;header&quot;&gt;
        &lt;i class=&quot;ri-thumb-down-line ri-lg&quot;&gt;&lt;&#x2F;i&gt;
        
        &lt;p&gt;&lt;strong&gt;Bad&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
        
    &lt;&#x2F;div&gt; 
    &lt;div class=&quot;content&quot;&gt;
        &lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#303136;color:#afb0b6;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#797b86;&quot;&gt;&#x2F;&#x2F; Starts simple
&lt;&#x2F;span&gt;&lt;span&gt;Company company = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;NewCompany&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;kPublic&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#797b86;&quot;&gt;&#x2F;&#x2F; But soon acquires more parameters
&lt;&#x2F;span&gt;&lt;span&gt;Company small = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;NewCompany&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;nullptr&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;kPublic&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;Company privately_owned = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;NewCompany&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;nullptr&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;kPrivate&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;Company bankrupt = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;NewCompany&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;kPastDate&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;kPublic&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#797b86;&quot;&gt;&#x2F;&#x2F; Or more methods
&lt;&#x2F;span&gt;&lt;span&gt;Company small = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;NewCompanyWithEmployeesAndBoardMembers&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;kPublic&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;Company privately_owned = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;NewCompanyWithType&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;kPrivate&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;Company bankrupt = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;NewCompanyWithBankruptcyDate&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;kPastDate&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;kPublic&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;

    &lt;&#x2F;div&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Try the builder pattern.&lt;&#x2F;p&gt;
&lt;blockquote class=&quot;note good&quot;&gt;
    &lt;div class=&quot;header&quot;&gt;
        &lt;i class=&quot;ri-thumb-up-line ri-lg&quot;&gt;&lt;&#x2F;i&gt;
        
        &lt;p&gt;&lt;strong&gt;Good&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
        
    &lt;&#x2F;div&gt; 
    &lt;div class=&quot;content&quot;&gt;
        &lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#303136;color:#afb0b6;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span&gt;Company small = Company::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;Builder&lt;&#x2F;span&gt;&lt;span&gt;{}.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;SetEmployees&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;SetBoardMembers&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;Build&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;Company privately_owned = Company::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;Builder&lt;&#x2F;span&gt;&lt;span&gt;{}.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;SetType&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;kPrivate&lt;&#x2F;span&gt;&lt;span&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;Build&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;Company bankrupt = Company::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;Builder&lt;&#x2F;span&gt;&lt;span&gt;{}.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;SetBankruptcyDate&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;kPastDate&lt;&#x2F;span&gt;&lt;span&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;Build&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;Company default_company = Company::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;Builder&lt;&#x2F;span&gt;&lt;span&gt;{}.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;Build&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;Company::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3b3;&quot;&gt;Builder &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;public&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  Builder&lt;&#x2F;span&gt;&lt;span&gt;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3b8c2;&quot;&gt;SetEmployees&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;    employees_ &lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt; n;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  Builder&lt;&#x2F;span&gt;&lt;span&gt;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3b8c2;&quot;&gt;SetBoardMembers&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;    board_members_ &lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt; n;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  Builder&lt;&#x2F;span&gt;&lt;span&gt;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3b8c2;&quot;&gt;SetBankruptcyDate&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;(BankruptcyDate &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;d&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;    date_ &lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt; d;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  Builder&lt;&#x2F;span&gt;&lt;span&gt;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3b8c2;&quot;&gt;SetType&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;(Type &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;t&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;    type_ &lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt; t;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  Company &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3b8c2;&quot;&gt;Build&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;Company&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;(employees_, board_members_, date_, type_);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;private&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt; employees_ &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt; board_members_ &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  BankruptcyDate date_ &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;kBeforeDate&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  Type type_ &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;kPublic&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;

    &lt;&#x2F;div&gt;
&lt;&#x2F;blockquote&gt;</content>
	</entry>
	<entry xml:lang="en">
		<title>Only Expect State-Changing Method Calls</title>
		<published>2017-12-11T00:00:00+00:00</published>
		<updated>2017-12-11T00:00:00+00:00</updated>
		<link href="https://ajguerrer.github.io/blog/tott/only-expect-state-changing-method-calls/" type="text/html"/>
		<id>https://ajguerrer.github.io/blog/tott/only-expect-state-changing-method-calls/</id>
		<content type="html">&lt;p&gt;Expecting calls to methods that don&#x27;t change state can make a test brittle, less readable, and
provide a false sense of security.&lt;&#x2F;p&gt;
&lt;blockquote class=&quot;note bad&quot;&gt;
    &lt;div class=&quot;header&quot;&gt;
        &lt;i class=&quot;ri-thumb-down-line ri-lg&quot;&gt;&lt;&#x2F;i&gt;
        
        &lt;p&gt;&lt;strong&gt;Bad&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
        
    &lt;&#x2F;div&gt; 
    &lt;div class=&quot;content&quot;&gt;
        &lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#303136;color:#afb0b6;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;TEST&lt;&#x2F;span&gt;&lt;span&gt;(UserAuthorizer, AddPermissionToDatabase) {
&lt;&#x2F;span&gt;&lt;span&gt;  UserAuthorizer &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;user_authorizer&lt;&#x2F;span&gt;&lt;span&gt;(mock_user_service_, mock_permission_db_);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;EXPECT_CALL&lt;&#x2F;span&gt;&lt;span&gt;(mock_user_service_, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;IsUserActive&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;kUser&lt;&#x2F;span&gt;&lt;span&gt;));
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;EXPECT_CALL&lt;&#x2F;span&gt;&lt;span&gt;(mock_permission_db_, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;GetPermission&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;kUser&lt;&#x2F;span&gt;&lt;span&gt;));
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;EXPECT_CALL&lt;&#x2F;span&gt;&lt;span&gt;(mock_permission_db_, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;IsValidPermission&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;kReadAccess&lt;&#x2F;span&gt;&lt;span&gt;));
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;EXPECT_CALL&lt;&#x2F;span&gt;&lt;span&gt;(mock_permission_db_, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;AddPermission&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;kUser&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;kReadAccess&lt;&#x2F;span&gt;&lt;span&gt;));
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  user_authorizer.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;GrantPermission&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;kUser&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;kReadAccess&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;

    &lt;&#x2F;div&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;It is fine, however, to use non-state-changing methods for simulating test conditions.&lt;&#x2F;p&gt;
&lt;blockquote class=&quot;note good&quot;&gt;
    &lt;div class=&quot;header&quot;&gt;
        &lt;i class=&quot;ri-thumb-up-line ri-lg&quot;&gt;&lt;&#x2F;i&gt;
        
        &lt;p&gt;&lt;strong&gt;Good&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
        
    &lt;&#x2F;div&gt; 
    &lt;div class=&quot;content&quot;&gt;
        &lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#303136;color:#afb0b6;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;ON_CALL&lt;&#x2F;span&gt;&lt;span&gt;(mock_user_service_, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;IsUserActive&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;kUser&lt;&#x2F;span&gt;&lt;span&gt;)).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;WillByDefault&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;Return&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;));
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;

    &lt;&#x2F;div&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;With unnecessary &lt;code&gt;EXPECT_CALL&lt;&#x2F;code&gt;s removed, the test becomes:&lt;&#x2F;p&gt;
&lt;blockquote class=&quot;note good&quot;&gt;
    &lt;div class=&quot;header&quot;&gt;
        &lt;i class=&quot;ri-thumb-up-line ri-lg&quot;&gt;&lt;&#x2F;i&gt;
        
        &lt;p&gt;&lt;strong&gt;Good&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
        
    &lt;&#x2F;div&gt; 
    &lt;div class=&quot;content&quot;&gt;
        &lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#303136;color:#afb0b6;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;Test&lt;&#x2F;span&gt;&lt;span&gt;(UserAuthorizer, AddPermissionToDatabase) {
&lt;&#x2F;span&gt;&lt;span&gt;  UserAuthorizer &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;user_authorizer&lt;&#x2F;span&gt;&lt;span&gt;(mock_user_service_, mock_permission_db_);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;EXPECT_CALL&lt;&#x2F;span&gt;&lt;span&gt;(mock_permission_db_, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;AddPermission&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;kUser&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;kReadAccess&lt;&#x2F;span&gt;&lt;span&gt;));
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  user_authorizer.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;GrantPermission&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;kUser&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;kReadAccess&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;

    &lt;&#x2F;div&gt;
&lt;&#x2F;blockquote&gt;</content>
	</entry>
	<entry xml:lang="en">
		<title>Obsessed With Primitives?</title>
		<published>2017-11-14T00:00:00+00:00</published>
		<updated>2017-11-14T00:00:00+00:00</updated>
		<link href="https://ajguerrer.github.io/blog/tott/obsessed-with-primitives/" type="text/html"/>
		<id>https://ajguerrer.github.io/blog/tott/obsessed-with-primitives/</id>
		<content type="html">&lt;p&gt;Code that relies too heavily on primitive types instead of custom abstractions can be hard to
understand and maintain.&lt;&#x2F;p&gt;
&lt;blockquote class=&quot;note bad&quot;&gt;
    &lt;div class=&quot;header&quot;&gt;
        &lt;i class=&quot;ri-thumb-down-line ri-lg&quot;&gt;&lt;&#x2F;i&gt;
        
        &lt;p&gt;&lt;strong&gt;Bad&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
        
    &lt;&#x2F;div&gt; 
    &lt;div class=&quot;content&quot;&gt;
        &lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#303136;color:#afb0b6;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span&gt;std::vector&amp;lt;std::pair&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&amp;gt; polygon = {
&lt;&#x2F;span&gt;&lt;span&gt;    std::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;make_pair&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;), std::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;make_pair&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;), std::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;make_pair&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;)};
&lt;&#x2F;span&gt;&lt;span&gt;std::pair&amp;lt;std::pair&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;, std::pair&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&amp;gt; bounding_box =
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;GetBoundingBox&lt;&#x2F;span&gt;&lt;span&gt;(polygon);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; area = (bounding_box.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;second&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;first &lt;&#x2F;span&gt;&lt;span&gt;- bounding_box.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;first&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;first&lt;&#x2F;span&gt;&lt;span&gt;) *
&lt;&#x2F;span&gt;&lt;span&gt;           (bounding_box.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;second&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;second &lt;&#x2F;span&gt;&lt;span&gt;- bounding_box.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;first&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;second&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;

    &lt;&#x2F;div&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Make higher-level abstractions.&lt;&#x2F;p&gt;
&lt;blockquote class=&quot;note good&quot;&gt;
    &lt;div class=&quot;header&quot;&gt;
        &lt;i class=&quot;ri-thumb-up-line ri-lg&quot;&gt;&lt;&#x2F;i&gt;
        
        &lt;p&gt;&lt;strong&gt;Good&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
        
    &lt;&#x2F;div&gt; 
    &lt;div class=&quot;content&quot;&gt;
        &lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#303136;color:#afb0b6;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span&gt;Polygon polygon = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;RightTriangle&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; area = polygon.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;GetBoundingBox&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;GetArea&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;

    &lt;&#x2F;div&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;This advice doesn&#x27;t just apply to primitives and The STL. It&#x27;s possible for any type to be too
primitive for the job.&lt;&#x2F;p&gt;
&lt;blockquote class=&quot;note good&quot;&gt;
    &lt;div class=&quot;header&quot;&gt;
        &lt;i class=&quot;ri-thumb-up-line ri-lg&quot;&gt;&lt;&#x2F;i&gt;
        
        &lt;p&gt;&lt;strong&gt;Good&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
        
    &lt;&#x2F;div&gt; 
    &lt;div class=&quot;content&quot;&gt;
        &lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#303136;color:#afb0b6;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span&gt;Polygon polygon = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;IsoscelesRightTriangle&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; area = polygon.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;GetBoundingBox&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;GetArea&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;

    &lt;&#x2F;div&gt;
&lt;&#x2F;blockquote&gt;</content>
	</entry>
	<entry xml:lang="en">
		<title>IdentifierNamingPostForWorldWideWebBlog</title>
		<published>2017-10-23T00:00:00+00:00</published>
		<updated>2017-10-23T00:00:00+00:00</updated>
		<link href="https://ajguerrer.github.io/blog/tott/identifiernamingpostforworldwidewebblog/" type="text/html"/>
		<id>https://ajguerrer.github.io/blog/tott/identifiernamingpostforworldwidewebblog/</id>
		<content type="html">&lt;p&gt;Names should be clear and precise.&lt;&#x2F;p&gt;
&lt;p&gt;Don&#x27;t mention the type in the variable name. It&#x27;s OK for the name and the type match.&lt;&#x2F;p&gt;
&lt;blockquote class=&quot;note bad&quot;&gt;
    &lt;div class=&quot;header&quot;&gt;
        &lt;i class=&quot;ri-thumb-down-line ri-lg&quot;&gt;&lt;&#x2F;i&gt;
        
        &lt;p&gt;&lt;strong&gt;Bad&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
        
    &lt;&#x2F;div&gt; 
    &lt;div class=&quot;content&quot;&gt;
        &lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#303136;color:#afb0b6;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span&gt;std::string name_string;
&lt;&#x2F;span&gt;&lt;span&gt;std::list&amp;lt;std::time_t&amp;gt; holiday_date_list;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;

    &lt;&#x2F;div&gt;
&lt;&#x2F;blockquote&gt;&lt;blockquote class=&quot;note good&quot;&gt;
    &lt;div class=&quot;header&quot;&gt;
        &lt;i class=&quot;ri-thumb-up-line ri-lg&quot;&gt;&lt;&#x2F;i&gt;
        
        &lt;p&gt;&lt;strong&gt;Good&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
        
    &lt;&#x2F;div&gt; 
    &lt;div class=&quot;content&quot;&gt;
        &lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#303136;color:#afb0b6;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span&gt;std::string name;
&lt;&#x2F;span&gt;&lt;span&gt;std::list&amp;lt;std::time_t&amp;gt; holidays;
&lt;&#x2F;span&gt;&lt;span&gt;Payments payments;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;

    &lt;&#x2F;div&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Don&#x27;t use overly specific names. Get more specific if there is a need for disambiguation.&lt;&#x2F;p&gt;
&lt;blockquote class=&quot;note bad&quot;&gt;
    &lt;div class=&quot;header&quot;&gt;
        &lt;i class=&quot;ri-thumb-down-line ri-lg&quot;&gt;&lt;&#x2F;i&gt;
        
        &lt;p&gt;&lt;strong&gt;Bad&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
        
    &lt;&#x2F;div&gt; 
    &lt;div class=&quot;content&quot;&gt;
        &lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#303136;color:#afb0b6;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span&gt;Monster final_battle_most_dangerous_boss_monster;
&lt;&#x2F;span&gt;&lt;span&gt;Payments non_typical_monthly_payments;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;

    &lt;&#x2F;div&gt;
&lt;&#x2F;blockquote&gt;&lt;blockquote class=&quot;note good&quot;&gt;
    &lt;div class=&quot;header&quot;&gt;
        &lt;i class=&quot;ri-thumb-up-line ri-lg&quot;&gt;&lt;&#x2F;i&gt;
        
        &lt;p&gt;&lt;strong&gt;Good&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
        
    &lt;&#x2F;div&gt; 
    &lt;div class=&quot;content&quot;&gt;
        &lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#303136;color:#afb0b6;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span&gt;Monster boss;
&lt;&#x2F;span&gt;&lt;span&gt;Payments payments;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;

    &lt;&#x2F;div&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Do not repeat context.&lt;&#x2F;p&gt;
&lt;blockquote class=&quot;note bad&quot;&gt;
    &lt;div class=&quot;header&quot;&gt;
        &lt;i class=&quot;ri-thumb-down-line ri-lg&quot;&gt;&lt;&#x2F;i&gt;
        
        &lt;p&gt;&lt;strong&gt;Bad&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
        
    &lt;&#x2F;div&gt; 
    &lt;div class=&quot;content&quot;&gt;
        &lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#303136;color:#afb0b6;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3b3;&quot;&gt;AnnualHolidaySale &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;bool &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3b8c2;&quot;&gt;PromoteHolidaySale&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt; annual_sale_rebate_;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;

    &lt;&#x2F;div&gt;
&lt;&#x2F;blockquote&gt;&lt;blockquote class=&quot;note good&quot;&gt;
    &lt;div class=&quot;header&quot;&gt;
        &lt;i class=&quot;ri-thumb-up-line ri-lg&quot;&gt;&lt;&#x2F;i&gt;
        
        &lt;p&gt;&lt;strong&gt;Good&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
        
    &lt;&#x2F;div&gt; 
    &lt;div class=&quot;content&quot;&gt;
        &lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#303136;color:#afb0b6;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3b3;&quot;&gt;AnnualHolidaySale &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;bool &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3b8c2;&quot;&gt;Promote&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt; rebate_;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;

    &lt;&#x2F;div&gt;
&lt;&#x2F;blockquote&gt;</content>
	</entry>
	<entry xml:lang="en">
		<title>To Comment or Not to Comment</title>
		<published>2017-07-17T00:00:00+00:00</published>
		<updated>2017-07-17T00:00:00+00:00</updated>
		<link href="https://ajguerrer.github.io/blog/tott/to-comment-or-not-to-comment/" type="text/html"/>
		<id>https://ajguerrer.github.io/blog/tott/to-comment-or-not-to-comment/</id>
		<content type="html">&lt;p&gt;Comments are not always helpful.&lt;&#x2F;p&gt;
&lt;blockquote class=&quot;note bad&quot;&gt;
    &lt;div class=&quot;header&quot;&gt;
        &lt;i class=&quot;ri-thumb-down-line ri-lg&quot;&gt;&lt;&#x2F;i&gt;
        
        &lt;p&gt;&lt;strong&gt;Bad&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
        
    &lt;&#x2F;div&gt; 
    &lt;div class=&quot;content&quot;&gt;
        &lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#303136;color:#afb0b6;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#797b86;&quot;&gt;&#x2F;&#x2F; Subtract discount from final price.
&lt;&#x2F;span&gt;&lt;span&gt;final_price = (num_items * item_price) -
&lt;&#x2F;span&gt;&lt;span&gt;              std::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3b8c2;&quot;&gt;min&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;num_items&lt;&#x2F;span&gt;&lt;span&gt;) * item_price *  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;0.1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#797b86;&quot;&gt;&#x2F;&#x2F; Filter offensive words.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(std::string word : words) { ... }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; width = ...; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#797b86;&quot;&gt;&#x2F;&#x2F; Width in pixels.
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#797b86;&quot;&gt;&#x2F;&#x2F; Safe since height is always &amp;gt; 0.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; width &#x2F; height;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;

    &lt;&#x2F;div&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;It&#x27;s often better to make your code self-explanatory.&lt;&#x2F;p&gt;
&lt;blockquote class=&quot;note good&quot;&gt;
    &lt;div class=&quot;header&quot;&gt;
        &lt;i class=&quot;ri-thumb-up-line ri-lg&quot;&gt;&lt;&#x2F;i&gt;
        
        &lt;p&gt;&lt;strong&gt;Good&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
        
    &lt;&#x2F;div&gt; 
    &lt;div class=&quot;content&quot;&gt;
        &lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#303136;color:#afb0b6;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span&gt;price = num_items * item_price;
&lt;&#x2F;span&gt;&lt;span&gt;discount = std::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;min&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;, num_items) * item_price * &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;0.1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;final_price = price - discount;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;FilterOffensiveWords&lt;&#x2F;span&gt;&lt;span&gt;(words);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;Pixels width = ...;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;CheckArgument&lt;&#x2F;span&gt;&lt;span&gt;(height &amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; width &#x2F; height;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;

    &lt;&#x2F;div&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Avoid using comments to explain &lt;em&gt;what&lt;&#x2F;em&gt; code does. Use comments to explain &lt;em&gt;why&lt;&#x2F;em&gt; code does something.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Too Many Comments on Your Code Reviews?</title>
		<published>2017-06-19T00:00:00+00:00</published>
		<updated>2017-06-19T00:00:00+00:00</updated>
		<link href="https://ajguerrer.github.io/blog/tott/too-many-comments-on-your-code-reviews/" type="text/html"/>
		<id>https://ajguerrer.github.io/blog/tott/too-many-comments-on-your-code-reviews/</id>
		<content type="html">&lt;p&gt;Before you send out the code review:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Review your own code first.&lt;&#x2F;li&gt;
&lt;li&gt;Discuss with colleagues.&lt;&#x2F;li&gt;
&lt;li&gt;Make bite-sized reviews.&lt;&#x2F;li&gt;
&lt;li&gt;Add comments to the code if necessary.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;When addressing code review comments:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Review your code after addressing non-trivial comments.&lt;&#x2F;li&gt;
&lt;li&gt;Understand the reviews thought process.&lt;&#x2F;li&gt;
&lt;li&gt;Answer questions in the code.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Reduce Nesting, Reduce Complexity</title>
		<published>2017-06-15T00:00:00+00:00</published>
		<updated>2017-06-15T00:00:00+00:00</updated>
		<link href="https://ajguerrer.github.io/blog/tott/reduce-nesting-reduce-complexity/" type="text/html"/>
		<id>https://ajguerrer.github.io/blog/tott/reduce-nesting-reduce-complexity/</id>
		<content type="html">&lt;p&gt;Deeply nested code is error-prone and hurts readability.&lt;&#x2F;p&gt;
&lt;blockquote class=&quot;note bad&quot;&gt;
    &lt;div class=&quot;header&quot;&gt;
        &lt;i class=&quot;ri-thumb-down-line ri-lg&quot;&gt;&lt;&#x2F;i&gt;
        
        &lt;p&gt;&lt;strong&gt;Bad&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
        
    &lt;&#x2F;div&gt; 
    &lt;div class=&quot;content&quot;&gt;
        &lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#303136;color:#afb0b6;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span&gt;Response response = server.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;Call&lt;&#x2F;span&gt;&lt;span&gt;(request);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(response.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;GetStatus&lt;&#x2F;span&gt;&lt;span&gt;() == Status::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;kOk&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;IsAuthorized&lt;&#x2F;span&gt;&lt;span&gt;(response.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;GetUser&lt;&#x2F;span&gt;&lt;span&gt;())) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(response.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;GetEnc&lt;&#x2F;span&gt;&lt;span&gt;() == &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a8c2a3;&quot;&gt;utf-8&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;) {
&lt;&#x2F;span&gt;&lt;span&gt;      std::vector&amp;lt;Row&amp;gt; rows = response.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;GetRows&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(!rows.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;empty&lt;&#x2F;span&gt;&lt;span&gt;()) {
&lt;&#x2F;span&gt;&lt;span&gt;        avg = std::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;accumulate&lt;&#x2F;span&gt;&lt;span&gt;(rows.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;begin&lt;&#x2F;span&gt;&lt;span&gt;(), rows.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;end&lt;&#x2F;span&gt;&lt;span&gt;(), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, ParseRow) &#x2F; 
&lt;&#x2F;span&gt;&lt;span&gt;              rows.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;size&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; avg;
&lt;&#x2F;span&gt;&lt;span&gt;      } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;throw &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;EmptyException&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;    } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;throw &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;AuthException&lt;&#x2F;span&gt;&lt;span&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a8c2a3;&quot;&gt;unauthorized&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;);
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;  } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;throw &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;ValueException&lt;&#x2F;span&gt;&lt;span&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a8c2a3;&quot;&gt;wrong encoding&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;);
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;throw &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;RpcException&lt;&#x2F;span&gt;&lt;span&gt;(response.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;GetStatus&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;

    &lt;&#x2F;div&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;The code above could be refactored to use guard clauses.&lt;&#x2F;p&gt;
&lt;blockquote class=&quot;note good&quot;&gt;
    &lt;div class=&quot;header&quot;&gt;
        &lt;i class=&quot;ri-thumb-up-line ri-lg&quot;&gt;&lt;&#x2F;i&gt;
        
        &lt;p&gt;&lt;strong&gt;Good&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
        
    &lt;&#x2F;div&gt; 
    &lt;div class=&quot;content&quot;&gt;
        &lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#303136;color:#afb0b6;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span&gt;Response response = server.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;Call&lt;&#x2F;span&gt;&lt;span&gt;(request);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(response.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;GetStatus&lt;&#x2F;span&gt;&lt;span&gt;() != Status::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;kOk&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;throw &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;RpcException&lt;&#x2F;span&gt;&lt;span&gt;(response.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;GetStatus&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;IsAuthorized&lt;&#x2F;span&gt;&lt;span&gt;(response.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;GetUser&lt;&#x2F;span&gt;&lt;span&gt;())) {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;throw &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;ValueException&lt;&#x2F;span&gt;&lt;span&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a8c2a3;&quot;&gt;wrong encoding&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(response.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;GetEnc&lt;&#x2F;span&gt;&lt;span&gt;() != &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a8c2a3;&quot;&gt;utf-8&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;) {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;throw &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;AuthException&lt;&#x2F;span&gt;&lt;span&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a8c2a3;&quot;&gt;unauthorized&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;std::vector&amp;lt;Row&amp;gt; rows = response.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;GetRows&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(rows.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;empty&lt;&#x2F;span&gt;&lt;span&gt;()) {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;throw &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;EmptyException&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;avg = std::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;accumulate&lt;&#x2F;span&gt;&lt;span&gt;(rows.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;begin&lt;&#x2F;span&gt;&lt;span&gt;(), rows.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;end&lt;&#x2F;span&gt;&lt;span&gt;(), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, ParseRow) &#x2F; rows.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;size&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; avg;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;

    &lt;&#x2F;div&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Can you spot the bug now?&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>A Lightning Tour of the Google Testing Blog</title>
		<published>2017-04-17T00:00:00+00:00</published>
		<updated>2017-04-17T00:00:00+00:00</updated>
		<link href="https://ajguerrer.github.io/blog/google-test/tour/" type="text/html"/>
		<id>https://ajguerrer.github.io/blog/google-test/tour/</id>
		<content type="html">&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;testing.googleblog.com&#x2F;&quot;&gt;Google Testing Blog&lt;&#x2F;a&gt; has a huge wealth of information for software
engineers looking for resources on testing. Testing culture at Google is one that I really look up
to and I am grateful to the engineers who shared these resources. With that said, keep in mind that
some of the content can be outdated and&#x2F;or opinionated. Testing is a widespread topic and there can
be different, sometimes conflicting, answers to any given problem.&lt;&#x2F;p&gt;
&lt;p&gt;Below you will find a a categorized list of key concepts I found in the blog with links to the
particular post in which it was found. The idea here is brevity. If an item catches your eye, take a
look at the linked blog post(s) for more info.&lt;&#x2F;p&gt;
&lt;p&gt;I plan to keep this updated as more posts are added.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;test-reliability&quot;&gt;Test Reliability&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;Smaller tests run faster, are less flakey, and isolate failures. As a general rule of thumb, favor
a pyramid-shaped composition of 70% small, 20% medium, and 10% large tests.&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#11&quot;&gt;1&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Test binary size and memory usage, including third-party testing tools, have a strong correlation
on whether a test is flaky.&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#18&quot;&gt;2&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Beware of using UI testing to verify underlying functionality. In these cases, it is cheaper and
more reliable to have smaller tests that break closer to the source of the problem.&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#3&quot;&gt;3&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt; &lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#4&quot;&gt;4&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Hermetic servers add speed and reliability into end-to-end tests. A environment is considered
Hermetic if it can run an entire system under test on a single machine with fake network
connections and database implementations.&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#9&quot;&gt;5&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Filter out flakey tests by rerunning failing tests. If a test fails three times in a row, consider
it a real failure.&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#13&quot;&gt;6&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Build testability into the product. For example, a real-time system can rely on a fake clock
instead of a hardware clock. Processes can spawn other processes attached to a debugger with
debugging flags.&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#15&quot;&gt;7&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;code-quality&quot;&gt;Code Quality&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;Releasing often gives teams an incentive to automate testing and reduce coupling with the rest of
the system.&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#17&quot;&gt;8&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;&lt;&#x2F;li&gt;
&lt;li&gt;When a team provides &lt;a href=&quot;..&#x2F;tott&#x2F;#know-your-test-doubles&quot;&gt;fakes&lt;&#x2F;a&gt; and writes tests for them, they
become clients of their own software. Experiencing the perspective of the client gives the team an
incentive to make their API easier to use.&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#17&quot;&gt;8&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;&lt;&#x2F;li&gt;
&lt;li&gt;While writing the header first encourages consideration for the interface, writing tests first
encourages consideration for how the interface will be &lt;em&gt;used&lt;&#x2F;em&gt;.&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#5&quot;&gt;9&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Good code quality is taught, not enforced. Create a culture that teaches code quality through code
review, pair programming, and mentoring.&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#15&quot;&gt;7&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Don&#x27;t obsess over coverage numbers. Use code coverage reports to identify areas that are not
covered and human judgement over whether to cover it. For example, frequently changed code should
be covered.&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#19&quot;&gt;10&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Consider investing in mutation testing, a automated tool that &amp;quot;mutates&amp;quot; code and expects tests to
fail. Tuned properly, it can help find oversights in tests that are worth fixing. &lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#20&quot;&gt;11&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;productivity&quot;&gt;Productivity&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;Automation is costly. Automate only the tests that you find yourself running often to reliably
catch regressions on features with business value.&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#3&quot;&gt;3&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Speed up the feedback loop between test engineers and development engineers. Share the same space,
tools, daily stand-ups, and design discussions.&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#3&quot;&gt;3&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Effective automation depends on test design. Good test design is built from a solid foundation of
manual tests.&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#6&quot;&gt;12&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;&lt;&#x2F;li&gt;
&lt;li&gt;If a test plan isn&#x27;t worth bothering to update, it isn&#x27;t worth creating in the first place. A
quick brainstorming session will suffice.&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#8&quot;&gt;13&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Use formatting tools, like clang-format, to improve readability.&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#14&quot;&gt;14&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;infrastructure&quot;&gt;Infrastructure&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;Remove the detective work of tracking down bad changes by investing in a pre-submit system that
runs automated tests against the commit before it reaches the depot.&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#7&quot;&gt;15&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt; &lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#13&quot;&gt;6&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Don&#x27;t fall behind on updating third party dependencies. Update them quickly by setting up CI
system with dependencies pinned at head.&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#12&quot;&gt;16&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Avoid making more than one branch by putting risky new changes behind feature flags.&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#14&quot;&gt;14&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Constantly look for opportunities to make the build system faster. Reduce the amount of code being
compiled, replace tools with faster counterparts, and use distributed build systems.&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#16&quot;&gt;17&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Release early and release often. Services and websites can deploy rapidly. A good target for
client projects is Chromes six week cycle.&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#16&quot;&gt;17&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;metrics-logging&quot;&gt;Metrics &amp;amp; Logging&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Pre- vs post-production defect ratio&lt;&#x2F;em&gt; and a breakdown of &lt;em&gt;defects by component or functional
area&lt;&#x2F;em&gt; help identify holes in test.&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#1&quot;&gt;18&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Premature performance optimization makes bad code. Develop in a clean, maintainable and
extensible manner &lt;em&gt;first&lt;&#x2F;em&gt;, and then let benchmarks drive performance optimizations.&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#2&quot;&gt;19&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Remove unwanted noise by logging with conditional verbosity. Log all levels to a logging queue.
If a transaction completes successfully, discard the unimportant levels.&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#10&quot;&gt;20&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Use two sets of logging levels, one for production builds and one for development builds.&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#10&quot;&gt;20&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Trace the time spent on every significant processing step. Measuring is the only way to detect
performance issues or make claims about performance.&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#10&quot;&gt;20&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Write automated performance tests for performance sensitive parts of your product.&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#16&quot;&gt;17&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;11&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;1&lt;&#x2F;sup&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;testing.googleblog.com&#x2F;2015&#x2F;04&#x2F;just-say-no-to-more-end-to-end-tests.html&quot;&gt;Just Say No to More End-to-End Tests&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;18&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;2&lt;&#x2F;sup&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;testing.googleblog.com&#x2F;2017&#x2F;04&#x2F;where-do-our-flaky-tests-come-from.html&quot;&gt;Where do our flaky tests come from?&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;3&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;3&lt;&#x2F;sup&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;testing.googleblog.com&#x2F;2007&#x2F;10&#x2F;automating-tests-vs-test-automation.html&quot;&gt;Automating tests vs. test-automation&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;4&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;4&lt;&#x2F;sup&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;testing.googleblog.com&#x2F;2008&#x2F;06&#x2F;taming-beast-aka-how-to-test-ajax.html&quot;&gt;Taming the Beast (a.k.a. how to test AJAX applications) : Part 1&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;9&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;5&lt;&#x2F;sup&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;testing.googleblog.com&#x2F;2012&#x2F;10&#x2F;hermetic-servers.html&quot;&gt;Hermetic Servers&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;13&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;6&lt;&#x2F;sup&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;testing.googleblog.com&#x2F;2016&#x2F;05&#x2F;flaky-tests-at-google-and-how-we.html&quot;&gt;Flaky Tests at Google and How We Mitigate Them&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;15&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;7&lt;&#x2F;sup&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;testing.googleblog.com&#x2F;2016&#x2F;10&#x2F;hackable-projects-pillar-2-debuggability.html&quot;&gt;Hackable Projects - Pillar 2: Debuggability&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;17&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;8&lt;&#x2F;sup&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;testing.googleblog.com&#x2F;2017&#x2F;02&#x2F;discomfort-as-tool-for-change.html&quot;&gt;Discomfort as a Tool for Change&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;5&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;9&lt;&#x2F;sup&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;testing.googleblog.com&#x2F;2008&#x2F;09&#x2F;test-first-is-fun_08.html&quot;&gt;Test first is fun!&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;19&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;10&lt;&#x2F;sup&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;testing.googleblog.com&#x2F;2020&#x2F;08&#x2F;code-coverage-best-practices.html&quot;&gt;Code Coverage Best Practices&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;20&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;11&lt;&#x2F;sup&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;testing.googleblog.com&#x2F;2021&#x2F;04&#x2F;mutation-testing.html&quot;&gt;Mutation Testing&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;6&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;12&lt;&#x2F;sup&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;testing.googleblog.com&#x2F;2008&#x2F;09&#x2F;presubmit-and-performance.html&quot;&gt;Presubmit And Performance&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;8&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;13&lt;&#x2F;sup&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;testing.googleblog.com&#x2F;2011&#x2F;09&#x2F;10-minute-test-plan.html&quot;&gt;The 10 Minute Test Plan&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;14&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;14&lt;&#x2F;sup&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;testing.googleblog.com&#x2F;2016&#x2F;08&#x2F;hackable-projects.html&quot;&gt;Hackable Projects - Pillar 1: Code Health&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;7&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;15&lt;&#x2F;sup&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;testing.googleblog.com&#x2F;2009&#x2F;06&#x2F;burning-test-questions-at-google.html&quot;&gt;Burning Test Questions at Google&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;12&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;16&lt;&#x2F;sup&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;testing.googleblog.com&#x2F;2015&#x2F;05&#x2F;multi-repository-development.html&quot;&gt;Multi-Repository Development&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;16&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;17&lt;&#x2F;sup&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;testing.googleblog.com&#x2F;2016&#x2F;11&#x2F;hackable-projects-pillar-3.html&quot;&gt;Hackable Projects - Pillar 3: Infrastructure&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;1&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;18&lt;&#x2F;sup&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;testing.googleblog.com&#x2F;2007&#x2F;10&#x2F;post-release-closing-loop_02.html&quot;&gt;Post Release: Closing the loop&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;2&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;19&lt;&#x2F;sup&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;testing.googleblog.com&#x2F;2007&#x2F;10&#x2F;performance-testing.html&quot;&gt;Performance Testing&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;10&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;20&lt;&#x2F;sup&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;testing.googleblog.com&#x2F;2013&#x2F;06&#x2F;optimal-logging.html&quot;&gt;Optimal Logging&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Keep Cause and Effect Clear</title>
		<published>2017-01-31T00:00:00+00:00</published>
		<updated>2017-01-31T00:00:00+00:00</updated>
		<link href="https://ajguerrer.github.io/blog/tott/keep-cause-and-effect-clear/" type="text/html"/>
		<id>https://ajguerrer.github.io/blog/tott/keep-cause-and-effect-clear/</id>
		<content type="html">&lt;p&gt;It&#x27;s difficult to reason about a test when the cause is hidden far away from the effect.&lt;&#x2F;p&gt;
&lt;blockquote class=&quot;note bad&quot;&gt;
    &lt;div class=&quot;header&quot;&gt;
        &lt;i class=&quot;ri-thumb-down-line ri-lg&quot;&gt;&lt;&#x2F;i&gt;
        
        &lt;p&gt;&lt;strong&gt;Bad&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
        
    &lt;&#x2F;div&gt; 
    &lt;div class=&quot;content&quot;&gt;
        &lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#303136;color:#afb0b6;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3b3;&quot;&gt;TallyTest &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;public &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3b3;&quot;&gt;::testing::Test &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;protected&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3b8c2;&quot;&gt;SetUp&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;override &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;    tally_.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;Increment&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a8c2a3;&quot;&gt;key1&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;8&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;    tally_.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;Increment&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a8c2a3;&quot;&gt;key2&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;100&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;    tally_.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;Increment&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a8c2a3;&quot;&gt;key1&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;    tally_.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;Increment&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a8c2a3;&quot;&gt;key1&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  Tally tally_;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#797b86;&quot;&gt;&#x2F;&#x2F; 200 lines of code
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;TEST_F&lt;&#x2F;span&gt;&lt;span&gt;(TallyTest, IncrementExistingKey) {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;EXPECT_EQ&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;9&lt;&#x2F;span&gt;&lt;span&gt;, tally_.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;Get&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a8c2a3;&quot;&gt;key1&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;));
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;

    &lt;&#x2F;div&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Write tests where the effects immediately follow the causes.&lt;&#x2F;p&gt;
&lt;blockquote class=&quot;note good&quot;&gt;
    &lt;div class=&quot;header&quot;&gt;
        &lt;i class=&quot;ri-thumb-up-line ri-lg&quot;&gt;&lt;&#x2F;i&gt;
        
        &lt;p&gt;&lt;strong&gt;Good&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
        
    &lt;&#x2F;div&gt; 
    &lt;div class=&quot;content&quot;&gt;
        &lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#303136;color:#afb0b6;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3b3;&quot;&gt;TallyTest &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;public &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3b3;&quot;&gt;::testing::Test &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;protected&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  Tally tally_;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;TEST_F&lt;&#x2F;span&gt;&lt;span&gt;(TallyTest, NewKey) {
&lt;&#x2F;span&gt;&lt;span&gt;  tally_.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;Increment&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a8c2a3;&quot;&gt;key&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;100&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;EXPECT_EQ&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;100&lt;&#x2F;span&gt;&lt;span&gt;, tally_.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;Get&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a8c2a3;&quot;&gt;key&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;));
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;TEST_F&lt;&#x2F;span&gt;&lt;span&gt;(TallyTest, ExistingKey) {
&lt;&#x2F;span&gt;&lt;span&gt;  tally_.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;Increment&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a8c2a3;&quot;&gt;key&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;8&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;  tally_.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;Increment&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a8c2a3;&quot;&gt;key&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;EXPECT_EQ&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;9&lt;&#x2F;span&gt;&lt;span&gt;, tally_.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;Get&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a8c2a3;&quot;&gt;key&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;));
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;TEST_F&lt;&#x2F;span&gt;&lt;span&gt;(TallyTest, IncrementByZeroDoesNothing) {
&lt;&#x2F;span&gt;&lt;span&gt;  tally_.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;Increment&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a8c2a3;&quot;&gt;key&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;8&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;  tally_.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;Increment&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a8c2a3;&quot;&gt;key&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;EXPECT_EQ&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;8&lt;&#x2F;span&gt;&lt;span&gt;, tally_.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;Get&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a8c2a3;&quot;&gt;key&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;));
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;

    &lt;&#x2F;div&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;It may require a bit more code, but it&#x27;s easier to read and maintain.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>What Makes a Good End-to-End Test?</title>
		<published>2016-09-21T00:00:00+00:00</published>
		<updated>2016-09-21T00:00:00+00:00</updated>
		<link href="https://ajguerrer.github.io/blog/tott/what-makes-a-good-end-to-end-test/" type="text/html"/>
		<id>https://ajguerrer.github.io/blog/tott/what-makes-a-good-end-to-end-test/</id>
		<content type="html">&lt;p&gt;End-to-end tests give confidence about the health of the system when it is in a near production
state, but they tend to be more flaky and expensive to maintain.&lt;&#x2F;p&gt;
&lt;p&gt;To be cost effective, end-to-end tests should focus on aspects of the system that cannot be
evaluated by smaller tests. Minor and&#x2F;or frequently changing details like error messages or visual
layouts should not effect the test.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Change-Detector Tests Considered Harmful</title>
		<published>2015-01-27T00:00:00+00:00</published>
		<updated>2015-01-27T00:00:00+00:00</updated>
		<link href="https://ajguerrer.github.io/blog/tott/change-detector-tests-considered-harmful/" type="text/html"/>
		<id>https://ajguerrer.github.io/blog/tott/change-detector-tests-considered-harmful/</id>
		<content type="html">&lt;p&gt;Tests that break in response to any change to production code without verifying correct behavior
only add to maintenance costs without catching defects.&lt;&#x2F;p&gt;
&lt;blockquote class=&quot;note bad&quot;&gt;
    &lt;div class=&quot;header&quot;&gt;
        &lt;i class=&quot;ri-thumb-down-line ri-lg&quot;&gt;&lt;&#x2F;i&gt;
        
        &lt;p&gt;&lt;strong&gt;Bad&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
        
    &lt;&#x2F;div&gt; 
    &lt;div class=&quot;content&quot;&gt;
        &lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#303136;color:#afb0b6;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span&gt;Processor::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3b8c2;&quot;&gt;Process&lt;&#x2F;span&gt;&lt;span&gt;(Work &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;w&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;  first_part_.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;Process&lt;&#x2F;span&gt;&lt;span&gt;(w);
&lt;&#x2F;span&gt;&lt;span&gt;  second_part_.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;Process&lt;&#x2F;span&gt;&lt;span&gt;(w);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;TEST&lt;&#x2F;span&gt;&lt;span&gt;(ProcessorTest, ProcessWork) {
&lt;&#x2F;span&gt;&lt;span&gt;  MockFirstPart part1;
&lt;&#x2F;span&gt;&lt;span&gt;  MockSecondPart part2;
&lt;&#x2F;span&gt;&lt;span&gt;  Processor &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;p&lt;&#x2F;span&gt;&lt;span&gt;(part1, part2);
&lt;&#x2F;span&gt;&lt;span&gt;  Work w;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;EXPECT_CALL&lt;&#x2F;span&gt;&lt;span&gt;(part1, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;Process&lt;&#x2F;span&gt;&lt;span&gt;(w));
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;EXPECT_CALL&lt;&#x2F;span&gt;&lt;span&gt;(part2, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;Process&lt;&#x2F;span&gt;&lt;span&gt;(w));
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  p.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;Process&lt;&#x2F;span&gt;&lt;span&gt;(w);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;

    &lt;&#x2F;div&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Tests like these should either be re-written or deleted.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Prefer Testing Public APIs Over Implementation-Detail Classes</title>
		<published>2015-01-14T00:00:00+00:00</published>
		<updated>2015-01-14T00:00:00+00:00</updated>
		<link href="https://ajguerrer.github.io/blog/tott/prefer-testing-public-apis-over-implementation-detail-classes/" type="text/html"/>
		<id>https://ajguerrer.github.io/blog/tott/prefer-testing-public-apis-over-implementation-detail-classes/</id>
		<content type="html">&lt;p&gt;Public APIs can be called by many users. Implementation details are only called by public APIs.
If the public APIs are well tested, as they should be, then the implementation details will get
tested by association.&lt;&#x2F;p&gt;
&lt;p&gt;Heavy testing against implementation details can cause a couple problems:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Unlike public APIs, implementation details are vulnerable to refactoring. Tests for implementation
details can fail even though the behavior from the public API is fine.&lt;&#x2F;li&gt;
&lt;li&gt;Testing implementation details can give false confidence. Even if an implementation detail is well
tested, that doesn&#x27;t mean the pubic API behaves properly.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Writing Descriptive Test Names</title>
		<published>2014-10-16T00:00:00+00:00</published>
		<updated>2014-10-16T00:00:00+00:00</updated>
		<link href="https://ajguerrer.github.io/blog/tott/writing-descriptive-test-names/" type="text/html"/>
		<id>https://ajguerrer.github.io/blog/tott/writing-descriptive-test-names/</id>
		<content type="html">&lt;p&gt;Vague test names make it hard to keep track of what is tested.&lt;&#x2F;p&gt;
&lt;blockquote class=&quot;note bad&quot;&gt;
    &lt;div class=&quot;header&quot;&gt;
        &lt;i class=&quot;ri-thumb-down-line ri-lg&quot;&gt;&lt;&#x2F;i&gt;
        
        &lt;p&gt;&lt;strong&gt;Bad&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
        
    &lt;&#x2F;div&gt; 
    &lt;div class=&quot;content&quot;&gt;
        &lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#303136;color:#afb0b6;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;TEST_F&lt;&#x2F;span&gt;&lt;span&gt;(IsUserLockedOutTest, InvalidLogin) {
&lt;&#x2F;span&gt;&lt;span&gt;  authenticator_.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;Authenticate&lt;&#x2F;span&gt;&lt;span&gt;(username_, password_);
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;EXPECT_FALSE&lt;&#x2F;span&gt;&lt;span&gt;(authenticator_.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;IsUserLockedOut&lt;&#x2F;span&gt;&lt;span&gt;(username_));
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  authenticator_.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;Authenticate&lt;&#x2F;span&gt;&lt;span&gt;(username_, password_);
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;EXPECT_FALSE&lt;&#x2F;span&gt;&lt;span&gt;(authenticator_.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;IsUserLockedOut&lt;&#x2F;span&gt;&lt;span&gt;(username_));
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  authenticator_.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;Authenticate&lt;&#x2F;span&gt;&lt;span&gt;(username_, password_);
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;EXPECT_TRUE&lt;&#x2F;span&gt;&lt;span&gt;(authenticator_.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;IsUserLockedOut&lt;&#x2F;span&gt;&lt;span&gt;(username_));
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;

    &lt;&#x2F;div&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Descriptive test names make it easy to tell what behavior is broken without looking at code. Also,
the length of a good test name helps indicate when a test needs to be split apart.&lt;&#x2F;p&gt;
&lt;blockquote class=&quot;note good&quot;&gt;
    &lt;div class=&quot;header&quot;&gt;
        &lt;i class=&quot;ri-thumb-up-line ri-lg&quot;&gt;&lt;&#x2F;i&gt;
        
        &lt;p&gt;&lt;strong&gt;Good&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
        
    &lt;&#x2F;div&gt; 
    &lt;div class=&quot;content&quot;&gt;
        &lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#303136;color:#afb0b6;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;TEST_F&lt;&#x2F;span&gt;&lt;span&gt;(IsUserLockedOutTest, ShouldLockOutUserAfterThreeInvalidLoginAttempts) {
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#797b86;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;

    &lt;&#x2F;div&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;A test&#x27;s name should be all you need to know to understand the behavior being tested. Make sure
the name contains both the scenario being tested and the expected outcome.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Don&#x27;t Put Logic in Tests</title>
		<published>2014-07-31T00:00:00+00:00</published>
		<updated>2014-07-31T00:00:00+00:00</updated>
		<link href="https://ajguerrer.github.io/blog/tott/don-t-put-logic-in-tests/" type="text/html"/>
		<id>https://ajguerrer.github.io/blog/tott/don-t-put-logic-in-tests/</id>
		<content type="html">&lt;p&gt;Tests should be simple by stating I&#x2F;O directly rather than computing them.&lt;&#x2F;p&gt;
&lt;blockquote class=&quot;note bad&quot;&gt;
    &lt;div class=&quot;header&quot;&gt;
        &lt;i class=&quot;ri-thumb-down-line ri-lg&quot;&gt;&lt;&#x2F;i&gt;
        
        &lt;p&gt;&lt;strong&gt;Bad&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
        
    &lt;&#x2F;div&gt; 
    &lt;div class=&quot;content&quot;&gt;
        &lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#303136;color:#afb0b6;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;TEST&lt;&#x2F;span&gt;&lt;span&gt;(NavigatorTest, ShouldNavigateToPhotosPage) {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; std::string baseUrl = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a8c2a3;&quot;&gt;http:&#x2F;&#x2F;plus.google.com&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;  Navigator &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;nav&lt;&#x2F;span&gt;&lt;span&gt;(baseUrl);
&lt;&#x2F;span&gt;&lt;span&gt;  nav.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;GoToPhotosPage&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;EXPECT_EQ&lt;&#x2F;span&gt;&lt;span&gt;(baseUrl + &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a8c2a3;&quot;&gt;&#x2F;u&#x2F;0&#x2F;photos&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, nav.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;GetCurrentUrl&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;

    &lt;&#x2F;div&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Even a simple string concatenation can lead to bugs.&lt;&#x2F;p&gt;
&lt;blockquote class=&quot;note good&quot;&gt;
    &lt;div class=&quot;header&quot;&gt;
        &lt;i class=&quot;ri-thumb-up-line ri-lg&quot;&gt;&lt;&#x2F;i&gt;
        
        &lt;p&gt;&lt;strong&gt;Good&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
        
    &lt;&#x2F;div&gt; 
    &lt;div class=&quot;content&quot;&gt;
        &lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#303136;color:#afb0b6;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;TEST&lt;&#x2F;span&gt;&lt;span&gt;(NavigatorTest, ShouldNavigateToPhotosPage) {
&lt;&#x2F;span&gt;&lt;span&gt;  Navigator &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;nav&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a8c2a3;&quot;&gt;http:&#x2F;&#x2F;plug.google.com&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;  nav.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;GoToPhotosPage&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;EXPECT_EQ&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a8c2a3;&quot;&gt;http:&#x2F;&#x2F;plus.google.com&#x2F;&#x2F;u&#x2F;0&#x2F;photos&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, nav.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;GetCurrentUrl&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;

    &lt;&#x2F;div&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;If a test requires logic, move that logic out of the test body into utilities and helper functions
and write tests for them too.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Risk-Driven Testing</title>
		<published>2014-05-30T00:00:00+00:00</published>
		<updated>2014-05-30T00:00:00+00:00</updated>
		<link href="https://ajguerrer.github.io/blog/tott/risk-driven-testing/" type="text/html"/>
		<id>https://ajguerrer.github.io/blog/tott/risk-driven-testing/</id>
		<content type="html">&lt;p&gt;Blindly writing tests can lead to a false sense of security or wasted effort. Before writing tests,
think about testing. Small tests are cheap, larger tests protect core use-cases and integration.
Manual testing can sometimes be the cheapest, most effective option.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Effective Testing</title>
		<published>2014-05-07T00:00:00+00:00</published>
		<updated>2014-05-07T00:00:00+00:00</updated>
		<link href="https://ajguerrer.github.io/blog/tott/effective-testing/" type="text/html"/>
		<id>https://ajguerrer.github.io/blog/tott/effective-testing/</id>
		<content type="html">&lt;p&gt;To be effective, a test maximizes three important qualities:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Fidelity&lt;&#x2F;strong&gt; - Sensitive to defects in the code under test.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Resilience&lt;&#x2F;strong&gt; - Fails only when a breaking change is made to the code under test.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Precision&lt;&#x2F;strong&gt; - Upon failure reports exactly where the defect lies.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Test Behaviors, Not Methods</title>
		<published>2014-04-14T00:00:00+00:00</published>
		<updated>2014-04-14T00:00:00+00:00</updated>
		<link href="https://ajguerrer.github.io/blog/tott/test-behaviors-not-methods/" type="text/html"/>
		<id>https://ajguerrer.github.io/blog/tott/test-behaviors-not-methods/</id>
		<content type="html">&lt;p&gt;A single method can exhibit many behaviors. Likewise, a single behavior can span multiple methods.&lt;&#x2F;p&gt;
&lt;p&gt;It can be harmful to think that tests and public methods should have a 1:1 relationship.&lt;&#x2F;p&gt;
&lt;blockquote class=&quot;note bad&quot;&gt;
    &lt;div class=&quot;header&quot;&gt;
        &lt;i class=&quot;ri-thumb-down-line ri-lg&quot;&gt;&lt;&#x2F;i&gt;
        
        &lt;p&gt;&lt;strong&gt;Bad&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
        
    &lt;&#x2F;div&gt; 
    &lt;div class=&quot;content&quot;&gt;
        &lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#303136;color:#afb0b6;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;TEST_F&lt;&#x2F;span&gt;&lt;span&gt;(TransactionProcessorTest, ProcessTransaction) {
&lt;&#x2F;span&gt;&lt;span&gt;  User user = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;NewUserWithBalance&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;kLowBalanceThreshold &lt;&#x2F;span&gt;&lt;span&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;Dollars&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;));
&lt;&#x2F;span&gt;&lt;span&gt;  transaction_processor_.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;ProcessTransaction&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;      user, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;Transaction&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a8c2a3;&quot;&gt;Pile of Beanie Babies&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;Dollars&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;)));
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;EXPECT_THAT&lt;&#x2F;span&gt;&lt;span&gt;(ui_.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;GetText&lt;&#x2F;span&gt;&lt;span&gt;(), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;HasSubstr&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a8c2a3;&quot;&gt;You bought a Pile of Beanie Babies&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;));
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;EXPECT_EQ&lt;&#x2F;span&gt;&lt;span&gt;(user.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;GetEmails&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;size&lt;&#x2F;span&gt;&lt;span&gt;(), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;EXPECT_STREQ&lt;&#x2F;span&gt;&lt;span&gt;(user.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;GetEmails&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;at&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;GetSubject&lt;&#x2F;span&gt;&lt;span&gt;(), &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a8c2a3;&quot;&gt;Your balance is low&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;

    &lt;&#x2F;div&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Each test should verify one behavior. Each method may take several tests to verify.&lt;&#x2F;p&gt;
&lt;blockquote class=&quot;note good&quot;&gt;
    &lt;div class=&quot;header&quot;&gt;
        &lt;i class=&quot;ri-thumb-up-line ri-lg&quot;&gt;&lt;&#x2F;i&gt;
        
        &lt;p&gt;&lt;strong&gt;Good&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
        
    &lt;&#x2F;div&gt; 
    &lt;div class=&quot;content&quot;&gt;
        &lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#303136;color:#afb0b6;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;TEST_F&lt;&#x2F;span&gt;&lt;span&gt;(TransactionProcessorTest, ShouldDisplayNotification) {
&lt;&#x2F;span&gt;&lt;span&gt;  transaction_processor_.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;ProcessTransaction&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;User&lt;&#x2F;span&gt;&lt;span&gt;(), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;Transaction&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a8c2a3;&quot;&gt;Pile of Beanie Babies&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;));
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;EXPECT_THAT&lt;&#x2F;span&gt;&lt;span&gt;(ui_.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;GetText&lt;&#x2F;span&gt;&lt;span&gt;(), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;HasSubstr&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a8c2a3;&quot;&gt;You bought a Pile of Beanie Babies&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;));
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;TEST_F&lt;&#x2F;span&gt;&lt;span&gt;(TransactionProcessorTest, ShouldSendEmailWhenBalanceIsLow) {
&lt;&#x2F;span&gt;&lt;span&gt;  User user = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;NewUserWithBalance&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;kLowBalanceThreshold &lt;&#x2F;span&gt;&lt;span&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;Dollars&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;));
&lt;&#x2F;span&gt;&lt;span&gt;  transaction_processor_.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;ProcessTransaction&lt;&#x2F;span&gt;&lt;span&gt;(user, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;Transaction&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;Dollars&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;)));
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;EXPECT_EQ&lt;&#x2F;span&gt;&lt;span&gt;(user.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;GetEmails&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;size&lt;&#x2F;span&gt;&lt;span&gt;(), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;EXPECT_STREQ&lt;&#x2F;span&gt;&lt;span&gt;(user.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;GetEmails&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;at&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;GetSubject&lt;&#x2F;span&gt;&lt;span&gt;(), &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a8c2a3;&quot;&gt;Your balance is low&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;

    &lt;&#x2F;div&gt;
&lt;&#x2F;blockquote&gt;</content>
	</entry>
	<entry xml:lang="en">
		<title>What Makes a Good Test?</title>
		<published>2014-03-18T00:00:00+00:00</published>
		<updated>2014-03-18T00:00:00+00:00</updated>
		<link href="https://ajguerrer.github.io/blog/tott/what-makes-a-good-test/" type="text/html"/>
		<id>https://ajguerrer.github.io/blog/tott/what-makes-a-good-test/</id>
		<content type="html">&lt;p&gt;Tests provide more than verification. They also serve as documentation.&lt;&#x2F;p&gt;
&lt;p&gt;As a source of documentation, test should not be distracting or hide information.&lt;&#x2F;p&gt;
&lt;blockquote class=&quot;note bad&quot;&gt;
    &lt;div class=&quot;header&quot;&gt;
        &lt;i class=&quot;ri-thumb-down-line ri-lg&quot;&gt;&lt;&#x2F;i&gt;
        
        &lt;p&gt;&lt;strong&gt;Bad&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
        
    &lt;&#x2F;div&gt; 
    &lt;div class=&quot;content&quot;&gt;
        &lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#303136;color:#afb0b6;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;TEST&lt;&#x2F;span&gt;&lt;span&gt;(CalculatorTest, ShouldPerformAddition) {
&lt;&#x2F;span&gt;&lt;span&gt;  Calculator &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;calculator&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;RoundingStrategy&lt;&#x2F;span&gt;&lt;span&gt;(),
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a8c2a3;&quot;&gt;unused&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;kEnableCosinFeature&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;0.01&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;kCalculusEngine&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; result = calculator.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;DoComputation&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;MakeTestComputation&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;EXPECT_EQ&lt;&#x2F;span&gt;&lt;span&gt;(result, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;

    &lt;&#x2F;div&gt;
&lt;&#x2F;blockquote&gt;&lt;blockquote class=&quot;note good&quot;&gt;
    &lt;div class=&quot;header&quot;&gt;
        &lt;i class=&quot;ri-thumb-up-line ri-lg&quot;&gt;&lt;&#x2F;i&gt;
        
        &lt;p&gt;&lt;strong&gt;Good&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
        
    &lt;&#x2F;div&gt; 
    &lt;div class=&quot;content&quot;&gt;
        &lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#303136;color:#afb0b6;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;TEST_&lt;&#x2F;span&gt;&lt;span&gt;(CalculatorTest, ShouldPerformAddition) {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;const int&lt;&#x2F;span&gt;&lt;span&gt; result = calculator_.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;DoComputation&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;MakeAdditionComputation&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;));
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;EXPECT_EQ&lt;&#x2F;span&gt;&lt;span&gt;(result, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;

    &lt;&#x2F;div&gt;
&lt;&#x2F;blockquote&gt;</content>
	</entry>
	<entry xml:lang="en">
		<title>Test Behavior, Not Implementation</title>
		<published>2013-08-05T00:00:00+00:00</published>
		<updated>2013-08-05T00:00:00+00:00</updated>
		<link href="https://ajguerrer.github.io/blog/tott/test-behavior-not-implementation/" type="text/html"/>
		<id>https://ajguerrer.github.io/blog/tott/test-behavior-not-implementation/</id>
		<content type="html">&lt;p&gt;Except where explicitly intended, tests should work independent of the implementation details being
tested.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#303136;color:#afb0b6;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3b3;&quot;&gt;Calculator &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;public&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3b8c2;&quot;&gt;Add&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;)  {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt; a &lt;&#x2F;span&gt;&lt;span&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt; b;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3b3;&quot;&gt;Calculator &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;public&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3b8c2;&quot;&gt;Add&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;    Adder adder &lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt; adder_factory_.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;CreateAdder&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;    ReturnValue return_value &lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt; adder.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;Compute&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;Number&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;(a), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;Number&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;(b));
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt; return_value.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;ConvertToInteger&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;private&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  AdderFactory adder_factory_;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;TEST_F&lt;&#x2F;span&gt;&lt;span&gt;(CalculatorTest, ShouldAddIntegers) {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;EXPECT_EQ&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;, calculator_.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;Add&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;));
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;EXPECT_EQ&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;, calculator_.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;Add&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;));
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;EXPECT_EQ&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, calculator_.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;Add&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;, -&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;));
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Know Your Test Doubles</title>
		<published>2013-07-18T00:00:00+00:00</published>
		<updated>2013-07-18T00:00:00+00:00</updated>
		<link href="https://ajguerrer.github.io/blog/tott/know-your-test-doubles/" type="text/html"/>
		<id>https://ajguerrer.github.io/blog/tott/know-your-test-doubles/</id>
		<content type="html">&lt;p&gt;A test double is an object that can stand in for a real object in test. The most common types of
test doubles are:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Stub&lt;&#x2F;strong&gt; - Returns a specific values to promote a specific state.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#303136;color:#afb0b6;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span&gt;AccessManager &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3b8c2;&quot;&gt;access_manager&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;kStubAuthenticationService&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;ON_CALL&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;kStubAuthenticationService&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;IsAuthenticated&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;kUserId&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;WillByDefault&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;Return&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;));
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;EXPECT_FALSE&lt;&#x2F;span&gt;&lt;span&gt;(access_manager.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;UserHasAccess&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;kUserId&lt;&#x2F;span&gt;&lt;span&gt;));
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;ON_CALL&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;kStubAuthenticationService&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;IsAuthenticated&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;kUserId&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;WillByDefault&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;Return&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;));
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;EXPECT_TRUE&lt;&#x2F;span&gt;&lt;span&gt;(access_manager.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;UserHasAccess&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;kUserId&lt;&#x2F;span&gt;&lt;span&gt;));
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Mock&lt;&#x2F;strong&gt; - Sets expectations about how other objects should interact with it.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#303136;color:#afb0b6;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span&gt;AccessManager &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3b8c2;&quot;&gt;access_manager&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;mockAuthenticationService&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;EXPECT_CALL&lt;&#x2F;span&gt;&lt;span&gt;(mockAuthenticationService, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;IsAuthenticated&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;kUserId&lt;&#x2F;span&gt;&lt;span&gt;));
&lt;&#x2F;span&gt;&lt;span&gt;access_manager.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;UserHasAccess&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;kUserId&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Fake&lt;&#x2F;strong&gt; - A lightweight implementation when the real implementation is unsuitable for test.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#303136;color:#afb0b6;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span&gt;FakeAuthenticationService fake_authentication_service;
&lt;&#x2F;span&gt;&lt;span&gt;AccessManager &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3b8c2;&quot;&gt;access_manager&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;fake_authentication_service&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;EXPECT_FALSE&lt;&#x2F;span&gt;&lt;span&gt;(access_manager.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;UserHasAccess&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;kUserId&lt;&#x2F;span&gt;&lt;span&gt;));
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;fake_authentication_service.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;AddAuthenticatedUser&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;kUser&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;EXPECT_TRUE&lt;&#x2F;span&gt;&lt;span&gt;(access_manager.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;UserHasAccess&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;kUserId&lt;&#x2F;span&gt;&lt;span&gt;));
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Fake Your Way To Better Tests</title>
		<published>2013-06-28T00:00:00+00:00</published>
		<updated>2013-06-28T00:00:00+00:00</updated>
		<link href="https://ajguerrer.github.io/blog/tott/fake-your-way-to-better-tests/" type="text/html"/>
		<id>https://ajguerrer.github.io/blog/tott/fake-your-way-to-better-tests/</id>
		<content type="html">&lt;p&gt;Suppose you would like to test your blog platform API, but you don&#x27;t want your tests talking to a
remote server.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#303136;color:#afb0b6;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3b8c2;&quot;&gt;DeletePostsWithTag&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; Tag&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;tag&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; Post post : blog_service_-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;GetAllPosts&lt;&#x2F;span&gt;&lt;span&gt;()) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(post.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;HasTag&lt;&#x2F;span&gt;&lt;span&gt;(tag)) {
&lt;&#x2F;span&gt;&lt;span&gt;      blog_service_-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;DeletePost&lt;&#x2F;span&gt;&lt;span&gt;(post.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;GetId&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;A fake is a lightweight implementation of an API that behaves like the real implementation, but
isn&#x27;t suitable for production.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#303136;color:#afb0b6;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3b3;&quot;&gt;FakeBlogService &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;public &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3b3;&quot;&gt;BlogService &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;public&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3b8c2;&quot;&gt;AddPost&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt; Post&lt;&#x2F;span&gt;&lt;span&gt;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;post&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;) { posts.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;insert&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;(post); }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3b8c2;&quot;&gt;DeletePost&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;const int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;auto&lt;&#x2F;span&gt;&lt;span&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt; post &lt;&#x2F;span&gt;&lt;span&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt; posts) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;(post.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;GetId&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;() &lt;&#x2F;span&gt;&lt;span&gt;==&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt; id) { posts.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;erase&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;(post); &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;; }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;    }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  std::set&amp;lt;Post&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3b8c2;&quot;&gt;GetAllPosts&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt; posts; }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;private&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  std::set&amp;lt;Post&amp;gt; posts;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Fakes should be created and maintained by the person or team that owns the real implementation.&lt;&#x2F;p&gt;
&lt;p&gt;Fakes should have their own tests to make sure they behave like the real implementation.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Don&#x27;t Overuse Mocks</title>
		<published>2013-05-28T00:00:00+00:00</published>
		<updated>2013-05-28T00:00:00+00:00</updated>
		<link href="https://ajguerrer.github.io/blog/tott/don-t-overuse-mocks/" type="text/html"/>
		<id>https://ajguerrer.github.io/blog/tott/don-t-overuse-mocks/</id>
		<content type="html">&lt;p&gt;Mocks are powerful, but easy to abuse.&lt;&#x2F;p&gt;
&lt;blockquote class=&quot;note bad&quot;&gt;
    &lt;div class=&quot;header&quot;&gt;
        &lt;i class=&quot;ri-thumb-down-line ri-lg&quot;&gt;&lt;&#x2F;i&gt;
        
        &lt;p&gt;&lt;strong&gt;Bad&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
        
    &lt;&#x2F;div&gt; 
    &lt;div class=&quot;content&quot;&gt;
        &lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#303136;color:#afb0b6;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;TEST_F&lt;&#x2F;span&gt;&lt;span&gt;(PaymentProcessorTest, ShouldChargeCreditCard) {
&lt;&#x2F;span&gt;&lt;span&gt;  PaymentProcessor &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;payment_processor&lt;&#x2F;span&gt;&lt;span&gt;(mock_credit_card_server_);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  InSequence s;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;EXPECT_CALL&lt;&#x2F;span&gt;&lt;span&gt;(mock_credit_card_server_, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;IsServerAvailable&lt;&#x2F;span&gt;&lt;span&gt;())
&lt;&#x2F;span&gt;&lt;span&gt;      .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;WillOnce&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;Return&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;));
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;EXPECT_CALL&lt;&#x2F;span&gt;&lt;span&gt;(mock_credit_card_server_, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;BeginTransaction&lt;&#x2F;span&gt;&lt;span&gt;())
&lt;&#x2F;span&gt;&lt;span&gt;      .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;WillOnce&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;Return&lt;&#x2F;span&gt;&lt;span&gt;(mock_transaction_manager_));
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;EXPECT_CALL&lt;&#x2F;span&gt;&lt;span&gt;(mock_transaction_manager_, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;GetTransaction&lt;&#x2F;span&gt;&lt;span&gt;())
&lt;&#x2F;span&gt;&lt;span&gt;      .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;WillOnce&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;Return&lt;&#x2F;span&gt;&lt;span&gt;(transaction_));
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;EXPECT_CALL&lt;&#x2F;span&gt;&lt;span&gt;(mock_credit_card_server_, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;Pay&lt;&#x2F;span&gt;&lt;span&gt;(transaction_, credit_card_, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;500&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;span&gt;      .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;WillOnce&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;Return&lt;&#x2F;span&gt;&lt;span&gt;(mock_payment_));
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;EXPECT_CALL&lt;&#x2F;span&gt;&lt;span&gt;(mock_payment_, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;IsOverMaxBalance&lt;&#x2F;span&gt;&lt;span&gt;()).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;WillOnce&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;Return&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;));
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  payment_processor.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;ProcessPayment&lt;&#x2F;span&gt;&lt;span&gt;(credit_card_, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;Dollars&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;500&lt;&#x2F;span&gt;&lt;span&gt;));
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;

    &lt;&#x2F;div&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Overusing mocks makes tests harder to understand, maintain, and provides less insurance that your
code is working properly.&lt;&#x2F;p&gt;
&lt;p&gt;If you don&#x27;t need a mock, don&#x27;t use one. Understanding when to use a mock comes from understanding
what you want to test.&lt;&#x2F;p&gt;
&lt;blockquote class=&quot;note good&quot;&gt;
    &lt;div class=&quot;header&quot;&gt;
        &lt;i class=&quot;ri-thumb-up-line ri-lg&quot;&gt;&lt;&#x2F;i&gt;
        
        &lt;p&gt;&lt;strong&gt;Good&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
        
    &lt;&#x2F;div&gt; 
    &lt;div class=&quot;content&quot;&gt;
        &lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#303136;color:#afb0b6;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;TEST_F&lt;&#x2F;span&gt;&lt;span&gt;(PaymentProcessorTest, ShouldChargeCreditCard) {
&lt;&#x2F;span&gt;&lt;span&gt;  PaymentProcessor &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;payment_processor&lt;&#x2F;span&gt;&lt;span&gt;(credit_card_server_);
&lt;&#x2F;span&gt;&lt;span&gt;  payment_processor.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;ProcessPayment&lt;&#x2F;span&gt;&lt;span&gt;(credit_card_, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;Dollars&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;500&lt;&#x2F;span&gt;&lt;span&gt;));
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;EXPECT_EQ&lt;&#x2F;span&gt;&lt;span&gt;(credit_card_server_.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;GetMostRecentCharge&lt;&#x2F;span&gt;&lt;span&gt;(credit_card_), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;500&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;

    &lt;&#x2F;div&gt;
&lt;&#x2F;blockquote&gt;</content>
	</entry>
	<entry xml:lang="en">
		<title>Testing State vs. Testing Interactions</title>
		<published>2013-03-22T00:00:00+00:00</published>
		<updated>2013-03-22T00:00:00+00:00</updated>
		<link href="https://ajguerrer.github.io/blog/tott/testing-state-vs-testing-interactions/" type="text/html"/>
		<id>https://ajguerrer.github.io/blog/tott/testing-state-vs-testing-interactions/</id>
		<content type="html">&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Testing State&lt;&#x2F;strong&gt; - Verifying the code under test returns the correct results.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#303136;color:#afb0b6;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;TEST&lt;&#x2F;span&gt;&lt;span&gt;(NumberSorterTest, ShouldSortIntegers) {
&lt;&#x2F;span&gt;&lt;span&gt;  NumberSorter &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;number_sorter&lt;&#x2F;span&gt;&lt;span&gt;({quicksort, bubblesort});
&lt;&#x2F;span&gt;&lt;span&gt;  std::vector&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; numbers = {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;};
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;EXPECT_EQ&lt;&#x2F;span&gt;&lt;span&gt;({&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;}, number_sorter.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;SortNumbers&lt;&#x2F;span&gt;&lt;span&gt;(numbers));
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Testing Interaction&lt;&#x2F;strong&gt; - Verifying the code under test calls methods correctly.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#303136;color:#afb0b6;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;TEST&lt;&#x2F;span&gt;&lt;span&gt;(NumberSorterTest, ShouldUseQuicksort) {
&lt;&#x2F;span&gt;&lt;span&gt;  NumberSorter &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;number_sorter&lt;&#x2F;span&gt;&lt;span&gt;({mock_quicksort, mock_bubblesort});
&lt;&#x2F;span&gt;&lt;span&gt;  std::vector&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; numbers = {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;};
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;EXPECT_CALL&lt;&#x2F;span&gt;&lt;span&gt;(mock_quicksort, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;Sort&lt;&#x2F;span&gt;&lt;span&gt;(numbers));
&lt;&#x2F;span&gt;&lt;span&gt;  number_sorter.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;SortNumbers&lt;&#x2F;span&gt;&lt;span&gt;(numbers);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Most of the time you want to test state. Occasionally interactions need to be tested when the number
of calls or order of calls matter.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Musings from James Whittaker</title>
		<published>2011-03-23T00:00:00+00:00</published>
		<updated>2011-03-23T00:00:00+00:00</updated>
		<link href="https://ajguerrer.github.io/blog/google-test/whittaker/" type="text/html"/>
		<id>https://ajguerrer.github.io/blog/google-test/whittaker/</id>
		<content type="html">&lt;p&gt;James A. Whittaker wrote three thought-provoking series in the &lt;a href=&quot;https:&#x2F;&#x2F;testing.googleblog.com&#x2F;&quot;&gt;Google Testing
Blog&lt;&#x2F;a&gt;. I get the feeling he likes the number seven. Every one of
his posts provided me with a unique and colorful take on what can sometimes be a dry subject. The
abstract concepts shared in his posts shaped my foundational beliefs on testing software. &lt;&#x2F;p&gt;
&lt;p&gt;Below you will find a few sentences per post which I think capture the essence of what Whittaker is
conveying in each of his posts. The final series is a bit different than the first two; it&#x27;s an 
inside view of the structure and process inside the software shop known as Google.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-seven-plagues-of-software-testing&quot;&gt;The Seven Plagues of Software Testing&lt;&#x2F;h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Aimlessness&lt;&#x2F;strong&gt; - Do not test for the sake of testing. Every test should have a goal. Document
what works and analyze what doesn&#x27;t. Then, share with your colleagues.&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#1&quot;&gt;1&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Repetitiveness&lt;&#x2F;strong&gt; - Running the same test suite over again without finding new bugs does not
mean that there are no bugs. Variation is healthy.&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#2&quot;&gt;2&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Amnesia&lt;&#x2F;strong&gt; - Chances are the problem your are trying to solve has been solved before. If the
same issue keeps stinging you, or you had to answer a question the hard way, document it and put
it in a place others will find it.&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#3&quot;&gt;3&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Boredom&lt;&#x2F;strong&gt; - A bored tester rushes through the tactical aspects of testing without considering
the interesting strategic aspects. The day testing gets &amp;quot;figured out&amp;quot; is the day it gets
completely automated away.&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#4&quot;&gt;4&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Homelessness&lt;&#x2F;strong&gt; - Testers are homeless. They don&#x27;t actually live in the software like users do.
Some bugs are only found with the hands of users doing their work in their environment.&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#5&quot;&gt;5&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Blindness&lt;&#x2F;strong&gt; - Testers require tools to provide helpful feedback from software. It&#x27;s tempting to
settle down with a trusty set of tools, but doing so causes self-inflicted blindness to a growing
ecosystem of useful feedback.&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#6&quot;&gt;6&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Entropy&lt;&#x2F;strong&gt; - Testers increase entropy by giving developers things to do. This is unavoidable,
but preventative. As developers do more &lt;em&gt;during&lt;&#x2F;em&gt; development, testers add less work, and entropy
tends towards a minimum.&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#7&quot;&gt;7&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;an-ingredients-list-for-testing&quot;&gt;An Ingredients List for Testing&lt;&#x2F;h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Product expertise&lt;&#x2F;strong&gt; - A good developer knows how the product works; a good tester knows how to
use it.&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#8&quot;&gt;8&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Bill of materials&lt;&#x2F;strong&gt; - Testers should be able to reference a complete list of features that can
be tested.&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#9&quot;&gt;9&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt; &lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Risk analysis&lt;&#x2F;strong&gt; - Features are not equally important, or equally time consuming to test. Have a
model to quantitatively analyze the risk of each feature.&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#10&quot;&gt;10&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt; &lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Domain expertise&lt;&#x2F;strong&gt; - It is not enough to be good at testing. Testers also need expertise with
the technologies of the domain the product operates in.&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#11&quot;&gt;11&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Test guidance&lt;&#x2F;strong&gt; - Whether it be technique, nomenclature, or history, testers need a way to
identify and store tribal knowledge of the team.&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#12&quot;&gt;12&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Variation&lt;&#x2F;strong&gt; - Tests often get stale. Wasting time running stale tests is also a form of risk.
Adding variation can breathe new life into stale tests.&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#13&quot;&gt;13&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Completeness analysis&lt;&#x2F;strong&gt; - Teams need a model to measure how well their testing efforts have
covered the risk landscape of their product.&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#14&quot;&gt;14&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;how-google-tests-software&quot;&gt;How Google Tests Software&lt;&#x2F;h2&gt;
&lt;p&gt;Engineers are loaned out to product teams on an as-needed basis. Engineers are free to change
product teams at their own cadence.&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#15&quot;&gt;15&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Developers own quality while testers support developers with tools and feedback. As developers get
better at testing, less testers are needed. Successful teams have higher developer-to-tester ratios.
&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#15&quot;&gt;15&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Development and test are not treated as separate disciplines. Developers test and testers code.&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#17&quot;&gt;16&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;
Instead, each of the three roles look at the product from different angles:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;SWE (Software Engineer)&lt;&#x2F;strong&gt; - Feature creators responsible for their work. SWEs design and write
features, and then prove they work by writing and running tests.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;SET (Software Engineer in Test)&lt;&#x2F;strong&gt; - Codebase caretakers who enable SWEs to write tests. SETs
refactor code for testability, and write test features including test doubles and test framework.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;TE (Test Engineer)&lt;&#x2F;strong&gt; - Product experts who analyze quality and risk from the perspective of the
user. TEs write large tests and automation scrips as well as drive test execution and interpret
their results.&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#16&quot;&gt;17&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;SETs and TEs are usually not involved early in the design phase of a product. Only when the product
gains traction do they begin to exert their influence.&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#20&quot;&gt;18&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt; &lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#22&quot;&gt;19&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;&lt;&#x2F;p&gt;
&lt;p&gt;SETs and SWEs have similar skill sets. Conversions from one role to another are common.&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#21&quot;&gt;20&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Quality is a work in progress that relies on getting product out to users and receiving feedback as
quickly as possible. As its being developed, a release is pushed through several channels in order
of increasing confidence in quality:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Canary&lt;&#x2F;strong&gt; - Only fit for ultra tolerant users running experiments.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Dev&lt;&#x2F;strong&gt; - Used by developers for day-to-day work.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Test&lt;&#x2F;strong&gt; - Used internally for day-to-day work.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Beta&#x2F;Release&lt;&#x2F;strong&gt; - Fit for external exposure.&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#18&quot;&gt;21&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Tests are classified by scope, falling under three categories:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Small&lt;&#x2F;strong&gt; - Covers a single function, focusing on logic.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Medium&lt;&#x2F;strong&gt; - Covers a function and its nearest neighbors, focusing on interoperability.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Large&lt;&#x2F;strong&gt; -  Covers an entire user scenario, focusing on business requirements.&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#19&quot;&gt;22&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;If a test doesn&#x27;t require human cleverness or intuition, it is automated. Bug reporting is automated
too.&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#19&quot;&gt;22&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;&lt;&#x2F;p&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;1&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;1&lt;&#x2F;sup&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;testing.googleblog.com&#x2F;2009&#x2F;06&#x2F;7-plagues-of-software-testing.html&quot;&gt;The 7 Plagues of Software Testing&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;2&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;2&lt;&#x2F;sup&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;testing.googleblog.com&#x2F;2009&#x2F;06&#x2F;by-james.html&quot;&gt;The plague of repetitiveness&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;3&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;3&lt;&#x2F;sup&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;testing.googleblog.com&#x2F;2009&#x2F;07&#x2F;plague-of-amnesia.html&quot;&gt;The Plague of Amnesia&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;4&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;4&lt;&#x2F;sup&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;testing.googleblog.com&#x2F;2009&#x2F;07&#x2F;plague-of-boredom.html&quot;&gt;The Plague of Boredom&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;5&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;5&lt;&#x2F;sup&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;testing.googleblog.com&#x2F;2009&#x2F;07&#x2F;plague-of-homelessness.html&quot;&gt;The Plague of Homelessness&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;6&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;6&lt;&#x2F;sup&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;testing.googleblog.com&#x2F;2009&#x2F;07&#x2F;plague-of-blindness.html&quot;&gt;The Plague of Blindness&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;7&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;7&lt;&#x2F;sup&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;testing.googleblog.com&#x2F;2009&#x2F;09&#x2F;plague-of-entropy.html&quot;&gt;The Plague of Entropy&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;8&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;8&lt;&#x2F;sup&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;testing.googleblog.com&#x2F;2010&#x2F;08&#x2F;ingredients-list-for-testing-part-one.html&quot;&gt;An Ingredients List for Testing - Part One&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;9&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;9&lt;&#x2F;sup&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;testing.googleblog.com&#x2F;2010&#x2F;08&#x2F;ingredients-list-for-testing-part-two.html&quot;&gt;An Ingredients List for Testing - Part Two&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;10&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;10&lt;&#x2F;sup&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;testing.googleblog.com&#x2F;2010&#x2F;09&#x2F;ingredients-list-for-testing-part-three.html&quot;&gt;An Ingredients List for Testing - Part Three&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;11&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;11&lt;&#x2F;sup&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;testing.googleblog.com&#x2F;2010&#x2F;09&#x2F;ingredients-list-for-testing-part-four.html&quot;&gt;An Ingredients List for Testing - Part Four&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;12&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;12&lt;&#x2F;sup&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;testing.googleblog.com&#x2F;2010&#x2F;10&#x2F;ingredients-list-for-testing-part-five.html&quot;&gt;An Ingredients List for Testing - Part Five&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;13&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;13&lt;&#x2F;sup&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;testing.googleblog.com&#x2F;2010&#x2F;11&#x2F;ingredients-list-for-testing-part-six.html&quot;&gt;An Ingredients List for Testing - Part Six&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;14&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;14&lt;&#x2F;sup&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;testing.googleblog.com&#x2F;2010&#x2F;11&#x2F;ingredients-list-for-testing-part-seven.html&quot;&gt;An Ingredients List for Testing - Part Seven (of Seven)&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;15&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;15&lt;&#x2F;sup&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;testing.googleblog.com&#x2F;2011&#x2F;01&#x2F;how-google-tests-software.html&quot;&gt;How Google Tests Software - Part One&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;17&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;16&lt;&#x2F;sup&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;testing.googleblog.com&#x2F;2011&#x2F;02&#x2F;how-google-tests-software-part-three.html&quot;&gt;How Google Tests Software - Part Three&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;16&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;17&lt;&#x2F;sup&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;testing.googleblog.com&#x2F;2011&#x2F;02&#x2F;how-google-tests-software-part-two.html&quot;&gt;How Google Tests Software - Part Two&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;20&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;18&lt;&#x2F;sup&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;testing.googleblog.com&#x2F;2011&#x2F;05&#x2F;how-google-tests-software-part-six.html&quot;&gt;How Google Tests Software - Part Six&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;22&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;19&lt;&#x2F;sup&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;testing.googleblog.com&#x2F;2011&#x2F;05&#x2F;how-google-tests-software-part-seven.html&quot;&gt;How Google Tests Software - Part Seven&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;21&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;20&lt;&#x2F;sup&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;testing.googleblog.com&#x2F;2011&#x2F;05&#x2F;how-google-tests-software-break-for-q.html&quot;&gt;How Google Tests Software - A Break for Q&amp;amp;A&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;18&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;21&lt;&#x2F;sup&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;testing.googleblog.com&#x2F;2011&#x2F;03&#x2F;how-google-tests-software-part-four.html&quot;&gt;How Google Tests Software - Part Four&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;19&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;22&lt;&#x2F;sup&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;testing.googleblog.com&#x2F;2011&#x2F;03&#x2F;how-google-tests-software-part-five.html&quot;&gt;How Google Tests Software - Part Five&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Code coverage goal: 80% and no less!</title>
		<published>2010-07-20T00:00:00+00:00</published>
		<updated>2010-07-20T00:00:00+00:00</updated>
		<link href="https://ajguerrer.github.io/blog/tott/code-coverage-goal-80-and-no-less/" type="text/html"/>
		<id>https://ajguerrer.github.io/blog/tott/code-coverage-goal-80-and-no-less/</id>
		<content type="html">&lt;p&gt;Early one morning, a young programmer asked the great master, “I am ready to write some unit tests.
What code coverage should I aim for?”&lt;&#x2F;p&gt;
&lt;p&gt;The great master replied, “Don’t worry about coverage, just write some good tests.”&lt;&#x2F;p&gt;
&lt;p&gt;The young programmer smiled, bowed, and left.&lt;&#x2F;p&gt;
&lt;p&gt;Later that day, a second programmer asked the same question. The great master pointed at a pot of
boiling water and asked, “How many grains of rice should I put in that pot?”&lt;&#x2F;p&gt;
&lt;p&gt;The programmer, looking puzzled, replied, “How can I possibly tell you? It depends on how many
people you need to feed, how hungry they are, what other food you are serving, how much rice you
have available, and so on.”&lt;&#x2F;p&gt;
&lt;p&gt;“Exactly,” said the great master.&lt;&#x2F;p&gt;
&lt;p&gt;The second programmer smiled, bowed, and left.&lt;&#x2F;p&gt;
&lt;p&gt;Toward the end of the day, a third programmer came and asked the same question about code coverage.&lt;&#x2F;p&gt;
&lt;p&gt;“Eighty percent and no less!” Replied the master in a stern voice, pounding his fist on the table.&lt;&#x2F;p&gt;
&lt;p&gt;The third programmer smiled, bowed, and left.&lt;&#x2F;p&gt;
&lt;p&gt;After this last reply, a young apprentice approached the great master, “Great master, today I
overheard you answer the same question about code coverage with three different answers. Why?”&lt;&#x2F;p&gt;
&lt;p&gt;The great master stood up from his chair. “Come get some fresh tea with me and let’s talk about it.”
After they filled their cups with smoking hot green tea, the great master began:&lt;&#x2F;p&gt;
&lt;p&gt;“The first programmer is new and just getting started with testing. Right now he has a lot of code
and no tests. He has a long way to go; focusing on code coverage at this time would be depressing
and quite useless. He’s better off just getting used to writing and running some tests. He can worry
about coverage later.&lt;&#x2F;p&gt;
&lt;p&gt;&amp;quot;The second programmer, on the other hand, is quite experienced both at programming and testing.
When I replied by asking her how many grains of rice I should put in a pot, I helped her realize
that the amount of testing necessary depends on a number of factors, and she knows those factors
better than I do – it’s her code after all. There is no single, simple, answer, and she’s smart
enough to handle the truth and work with that.”&lt;&#x2F;p&gt;
&lt;p&gt;“I see,” said the young apprentice, “but if there is no single simple answer, then why did you tell
the third programmer ‘Eighty percent and no less’?”&lt;&#x2F;p&gt;
&lt;p&gt;The great master laughed so hard and loud that his belly, evidence that he drank more than just
green tea, flopped up and down. “The third programmer wants only simple answers – even when there
are no simple answers … and then does not follow them anyway.”&lt;&#x2F;p&gt;
&lt;p&gt;The young apprentice and the grizzled great master finished drinking their tea in contemplative
silence.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Testable Code with Miško Hevery</title>
		<published>2008-11-26T00:00:00+00:00</published>
		<updated>2008-11-26T00:00:00+00:00</updated>
		<link href="https://ajguerrer.github.io/blog/google-test/hevery/" type="text/html"/>
		<id>https://ajguerrer.github.io/blog/google-test/hevery/</id>
		<content type="html">&lt;p&gt;In the early days of the &lt;a href=&quot;https:&#x2F;&#x2F;testing.googleblog.com&quot;&gt;Google Testing Blog&lt;&#x2F;a&gt;, Miško Hevery contributed a wealth of posts related
to making code more testable culminating into a &lt;a href=&quot;http:&#x2F;&#x2F;misko.hevery.com&#x2F;code-reviewers-guide&quot;&gt;guide&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;This guide hit me hard during the early parts of my career. I have spent plenty of time working on
server code rather that infamously is collection of &lt;a href=&quot;https:&#x2F;&#x2F;docs.microsoft.com&#x2F;en-us&#x2F;cpp&#x2F;parallel&#x2F;multithreading-creating-user-interface-threads&quot;&gt;class-based threads&lt;&#x2F;a&gt;. It is a fine pattern to
use as long as other threads strictly pass messages to them. However, we turned them into Singletons
and had other threads summon them into existence at will to call their methods directly. This
pattern spread everywhere! As you can imagine, any testing that can be done to such an application
is superficial. We could only test the little bits of logic that leaked into our models.&lt;&#x2F;p&gt;
&lt;p&gt;Miško&#x27;s guide was a simple, directly applicable cookbook to problems such as these. Even though it
was already too late for our server, it was nice to know there was a way out, given enough effort.
Primarily, his guide teaches you how proactively avoid untestable patterns or reactively refactor
them out.&lt;&#x2F;p&gt;
&lt;p&gt;Without further ado, here is a summary to the key concepts in the guide with examples translated
from Java to C++.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;dependency-injection&quot;&gt;Dependency Injection&lt;&#x2F;h2&gt;
&lt;p&gt;A testable class is one that can be constructed in isolation or with test double collaborators. Once
constructed, they have all the dependencies they need. This is known as Dependency Injection.&lt;&#x2F;p&gt;
&lt;p&gt;Dependencies do not need to be concrete classes. Abstract classes allow testers to leverage
inheritance for creating test double collaborators. This is the primary tool in a testers toolkit
and the primary benefit Dependency Injection brings.&lt;&#x2F;p&gt;
&lt;p&gt;Below are some examples of constructor flaws and how they can be fixed with Dependency Injection.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;static-method-calls&quot;&gt;Static method calls&lt;&#x2F;h3&gt;
&lt;blockquote class=&quot;note bad&quot;&gt;
    &lt;div class=&quot;header&quot;&gt;
        &lt;i class=&quot;ri-thumb-down-line ri-lg&quot;&gt;&lt;&#x2F;i&gt;
        
        &lt;p&gt;&lt;strong&gt;Untestable&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
        
    &lt;&#x2F;div&gt; 
    &lt;div class=&quot;content&quot;&gt;
        &lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#303136;color:#afb0b6;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3b3;&quot;&gt;AccountView &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;public&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#797b86;&quot;&gt;&#x2F;&#x2F; Hard-coded static method call
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3b8c2;&quot;&gt;AccountView&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;() { user_ &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;RPCClient::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;GetInstance&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;GetUser&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;(); }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;private&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  User user_;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;TEST&lt;&#x2F;span&gt;&lt;span&gt;(AccountViewTest, SlowAndFlakyTest) {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#797b86;&quot;&gt;&#x2F;&#x2F; Unit test is slow and requires working network connection.
&lt;&#x2F;span&gt;&lt;span&gt;  AccountView view;
&lt;&#x2F;span&gt;&lt;span&gt;};
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;

    &lt;&#x2F;div&gt;
&lt;&#x2F;blockquote&gt;&lt;blockquote class=&quot;note good&quot;&gt;
    &lt;div class=&quot;header&quot;&gt;
        &lt;i class=&quot;ri-thumb-up-line ri-lg&quot;&gt;&lt;&#x2F;i&gt;
        
        &lt;p&gt;&lt;strong&gt;Testable&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
        
    &lt;&#x2F;div&gt; 
    &lt;div class=&quot;content&quot;&gt;
        &lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#303136;color:#afb0b6;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3b3;&quot;&gt;AccountView &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;public&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;explicit &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3b8c2;&quot;&gt;AccountView&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt; User&lt;&#x2F;span&gt;&lt;span&gt;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;user&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;user_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;(user) {}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;private&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt; User&lt;&#x2F;span&gt;&lt;span&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt; user_;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;TEST&lt;&#x2F;span&gt;&lt;span&gt;(AccountViewTest, FastAndReliableTest) {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#797b86;&quot;&gt;&#x2F;&#x2F; User does not need to be retrieved over the network.
&lt;&#x2F;span&gt;&lt;span&gt;  User user;
&lt;&#x2F;span&gt;&lt;span&gt;  AccountView &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;view&lt;&#x2F;span&gt;&lt;span&gt;(user);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;

    &lt;&#x2F;div&gt;
&lt;&#x2F;blockquote&gt;&lt;h3 id=&quot;conditional-logic&quot;&gt;Conditional logic&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;blockquote class=&quot;note bad&quot;&gt;
    &lt;div class=&quot;header&quot;&gt;
        &lt;i class=&quot;ri-thumb-down-line ri-lg&quot;&gt;&lt;&#x2F;i&gt;
        
        &lt;p&gt;&lt;strong&gt;Untestable&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
        
    &lt;&#x2F;div&gt; 
    &lt;div class=&quot;content&quot;&gt;
        &lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#303136;color:#afb0b6;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3b3;&quot;&gt;Car &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;public&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;explicit &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3b8c2;&quot;&gt;Car&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;(CarType &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#797b86;&quot;&gt;&#x2F;&#x2F; Only two ways to make a car and none of them for testing
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;switch &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;(type) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;kCoupe&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;: {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;        engine_ &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;FastEngine&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;        tires_ &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;SmoothTires&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;break&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;      }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;kTruck&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;: {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;        engine_ &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;StrongEngine&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;        tires_ &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;KnobbyTires&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;      }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;default&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3b8c2;&quot;&gt;assert&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;    }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;private&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  Engine engine_;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  Tires tires_;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;TEST&lt;&#x2F;span&gt;&lt;span&gt;(CarTest, HardToTest) {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#797b86;&quot;&gt;&#x2F;&#x2F; Want a car with fake engine and tires but can only make real ones.
&lt;&#x2F;span&gt;&lt;span&gt;  Car &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;car&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;kCoupe&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;

    &lt;&#x2F;div&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote class=&quot;note good&quot;&gt;
    &lt;div class=&quot;header&quot;&gt;
        &lt;i class=&quot;ri-thumb-up-line ri-lg&quot;&gt;&lt;&#x2F;i&gt;
        
        &lt;p&gt;&lt;strong&gt;Testable&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
        
    &lt;&#x2F;div&gt; 
    &lt;div class=&quot;content&quot;&gt;
        &lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#303136;color:#afb0b6;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3b3;&quot;&gt;Car &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;public&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3b8c2;&quot;&gt;Car&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;(std::unique_ptr&amp;lt;Engine&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;engine&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;, std::unique_ptr&amp;lt;Tires&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;tires&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;      : &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;engine_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;(std::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;move&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;(engine)), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;tires_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;(std::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;move&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;(tires)) {}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;private&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  std::unique_ptr&amp;lt;Engine&amp;gt; engine_;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  std::unique_ptr&amp;lt;Tires&amp;gt; tires_;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;TEST&lt;&#x2F;span&gt;&lt;span&gt;(CarTest, EasyToTest) {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#797b86;&quot;&gt;&#x2F;&#x2F; Car is fully configurable
&lt;&#x2F;span&gt;&lt;span&gt;  Car &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;car&lt;&#x2F;span&gt;&lt;span&gt;(std::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;make_unique&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;FakeEngine&amp;gt;(), std::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;make_unique&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;FakeTires&amp;gt;());
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;

    &lt;&#x2F;div&gt;
&lt;&#x2F;blockquote&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;constructing-dependencies&quot;&gt;Constructing dependencies&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;blockquote class=&quot;note bad&quot;&gt;
    &lt;div class=&quot;header&quot;&gt;
        &lt;i class=&quot;ri-thumb-down-line ri-lg&quot;&gt;&lt;&#x2F;i&gt;
        
        &lt;p&gt;&lt;strong&gt;Untestable&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
        
    &lt;&#x2F;div&gt; 
    &lt;div class=&quot;content&quot;&gt;
        &lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#303136;color:#afb0b6;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3b3;&quot;&gt;House &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;public&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3b8c2;&quot;&gt;House&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;() : &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;kitchen_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;(), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;bedroom_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;() {}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;private&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  ModernKitchen kitchen_;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  SpareBedroom bedroom_;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;TEST&lt;&#x2F;span&gt;&lt;span&gt;(HouseTest, HardToTest) {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#797b86;&quot;&gt;&#x2F;&#x2F; house is stuck with ModernKitchen and SpareBedroom objects
&lt;&#x2F;span&gt;&lt;span&gt;  House house;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;

    &lt;&#x2F;div&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote class=&quot;note good&quot;&gt;
    &lt;div class=&quot;header&quot;&gt;
        &lt;i class=&quot;ri-thumb-up-line ri-lg&quot;&gt;&lt;&#x2F;i&gt;
        
        &lt;p&gt;&lt;strong&gt;Testable&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
        
    &lt;&#x2F;div&gt; 
    &lt;div class=&quot;content&quot;&gt;
        &lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#303136;color:#afb0b6;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3b3;&quot;&gt;House &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;public&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3b8c2;&quot;&gt;House&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;(std::unique_ptr&amp;lt;Kitchen&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;kitchen&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;        std::unique_ptr&amp;lt;Bedroom&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;bedroom&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;      : &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;kitchen_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;(std::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;move&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;(kitchen)), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;bedroom_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;(std::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;move&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;(bedroom)) {}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;private&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  std::unique_ptr&amp;lt;Kitchen&amp;gt; kitchen_;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  std::unique_ptr&amp;lt;Bedroom&amp;gt; bedroom_;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;TEST&lt;&#x2F;span&gt;&lt;span&gt;(HouseTest, EasyToTest) {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#797b86;&quot;&gt;&#x2F;&#x2F; house uses lightweight test doubles
&lt;&#x2F;span&gt;&lt;span&gt;  House &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;house&lt;&#x2F;span&gt;&lt;span&gt;(std::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;make_unique&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;MockKitchen&amp;gt;(),
&lt;&#x2F;span&gt;&lt;span&gt;              std::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;make_unique&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;MockBedroom&amp;gt;());
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;

    &lt;&#x2F;div&gt;
&lt;&#x2F;blockquote&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;partial-construction&quot;&gt;Partial construction&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;blockquote class=&quot;note bad&quot;&gt;
    &lt;div class=&quot;header&quot;&gt;
        &lt;i class=&quot;ri-thumb-down-line ri-lg&quot;&gt;&lt;&#x2F;i&gt;
        
        &lt;p&gt;&lt;strong&gt;Untestable&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
        
    &lt;&#x2F;div&gt; 
    &lt;div class=&quot;content&quot;&gt;
        &lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#303136;color:#afb0b6;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3b3;&quot;&gt;VisualVoicemail &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;public&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#797b86;&quot;&gt;&#x2F;&#x2F; Constructs a partially initialized VisualVoicemail.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#797b86;&quot;&gt;&#x2F;&#x2F; Don&amp;#39;t forget to call Initialize in production, or SetCalls in test!
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;explicit &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3b8c2;&quot;&gt;VisualVoicemail&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt; User&lt;&#x2F;span&gt;&lt;span&gt;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;user&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;) : &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;user_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;(user) {}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3b8c2;&quot;&gt;Initialize&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;() {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;SetCalls&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;(Server::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;GetCallsFor&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;(user_));
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;private&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#797b86;&quot;&gt;&#x2F;&#x2F; Hack to allow test access to private methods.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#797b86;&quot;&gt;&#x2F;&#x2F; Making this function public is not a better idea.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;friend class&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt; VisualVoicemailTest_BrittleDesign_Test;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3b8c2;&quot;&gt;SetCalls&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;(std::vector&amp;lt;Call&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;calls&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;) { calls_ &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;std::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;move&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;(calls); }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  User user_;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  std::vector&amp;lt;Call&amp;gt; calls_;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;TEST&lt;&#x2F;span&gt;&lt;span&gt;(VisualVoicemailTest, BrittleTest) {
&lt;&#x2F;span&gt;&lt;span&gt;  DummyUser user;
&lt;&#x2F;span&gt;&lt;span&gt;  VisualVoicemail &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;voicemail&lt;&#x2F;span&gt;&lt;span&gt;(user);
&lt;&#x2F;span&gt;&lt;span&gt;  std::vector&amp;lt;Call&amp;gt; calls = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;BuildListOfTestCalls&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;  voicemail.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;SetCalls&lt;&#x2F;span&gt;&lt;span&gt;(calls);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;

    &lt;&#x2F;div&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote class=&quot;note good&quot;&gt;
    &lt;div class=&quot;header&quot;&gt;
        &lt;i class=&quot;ri-thumb-up-line ri-lg&quot;&gt;&lt;&#x2F;i&gt;
        
        &lt;p&gt;&lt;strong&gt;Testable&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
        
    &lt;&#x2F;div&gt; 
    &lt;div class=&quot;content&quot;&gt;
        &lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#303136;color:#afb0b6;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3b3;&quot;&gt;VisualVoicemail &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;public&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;explicit &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3b8c2;&quot;&gt;VisualVoicemail&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt; std::vector&amp;lt;Call&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;calls&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;) : &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;calls_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;(calls) {}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;private&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  std::vector&amp;lt;Call&amp;gt; calls_;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;TEST&lt;&#x2F;span&gt;&lt;span&gt;(VisualVoicemailTest, FlexibleTest) {
&lt;&#x2F;span&gt;&lt;span&gt;  VisualVoicemail &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;voicemail&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;BuildListOfTestCalls&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;

    &lt;&#x2F;div&gt;
&lt;&#x2F;blockquote&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;law-of-demeter&quot;&gt;Law of Demeter&lt;&#x2F;h2&gt;
&lt;p&gt;A class becomes difficult to test if it gets its dependencies from anywhere besides it&#x27;s interface.
For example, a class may get a dependency by asking one of it dependencies, breaking the Law of
Demeter.&lt;&#x2F;p&gt;
&lt;p&gt;Violations of the Law of Demeter are a sign of both bad Dependency Injection, for passing in the
wrong dependency, and bad encapsulation, for exposing secondary dependencies in the first place.&lt;&#x2F;p&gt;
&lt;p&gt;Below are examples of Law of Demeter violations and how they can be fixed with accurate interfaces
and encapsulation.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;indirect-dependencies&quot;&gt;Indirect dependencies&lt;&#x2F;h3&gt;
&lt;blockquote class=&quot;note bad&quot;&gt;
    &lt;div class=&quot;header&quot;&gt;
        &lt;i class=&quot;ri-thumb-down-line ri-lg&quot;&gt;&lt;&#x2F;i&gt;
        
        &lt;p&gt;&lt;strong&gt;Untestable&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
        
    &lt;&#x2F;div&gt; 
    &lt;div class=&quot;content&quot;&gt;
        &lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#303136;color:#afb0b6;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3b3;&quot;&gt;SalesTaxCalculator &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;public&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3b8c2;&quot;&gt;SalesTaxCalculator&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt; TaxTable&lt;&#x2F;span&gt;&lt;span&gt;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;taxTable&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;) : &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;taxTable_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;(taxTable) {}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;float &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3b8c2;&quot;&gt;ComputeSalesTax&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt; User&lt;&#x2F;span&gt;&lt;span&gt;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;user&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt; Invoice&lt;&#x2F;span&gt;&lt;span&gt;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;invoice&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#797b86;&quot;&gt;&#x2F;&#x2F; Get the correct dependencies first...
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;    Address address &lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt; user.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;GetAddress&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;float&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt; amount &lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt; invoice.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;GetSubTotal&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#797b86;&quot;&gt;&#x2F;&#x2F; ..then do the calculation.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt; amount &lt;&#x2F;span&gt;&lt;span&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt; taxTable_.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;GetTaxRate&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;(address);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;public&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  TaxTable taxTable_;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;TEST&lt;&#x2F;span&gt;&lt;span&gt;(SalesTaxCalculatorTest, ComplexTest) {
&lt;&#x2F;span&gt;&lt;span&gt;  SalesTaxCalculator &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;calc&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;TaxTable&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;  User &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;user&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;Address&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a8c2a3;&quot;&gt;1600 Amphitheater Parkway...&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;));
&lt;&#x2F;span&gt;&lt;span&gt;  Invoice &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;invoice&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;ProductX&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;95.00&lt;&#x2F;span&gt;&lt;span&gt;));
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#797b86;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;EXPECT_EQ&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;0.09&lt;&#x2F;span&gt;&lt;span&gt;, calc.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;ComputeSalesTax&lt;&#x2F;span&gt;&lt;span&gt;(user, invoice));
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;

    &lt;&#x2F;div&gt;
&lt;&#x2F;blockquote&gt;&lt;blockquote class=&quot;note good&quot;&gt;
    &lt;div class=&quot;header&quot;&gt;
        &lt;i class=&quot;ri-thumb-up-line ri-lg&quot;&gt;&lt;&#x2F;i&gt;
        
        &lt;p&gt;&lt;strong&gt;Testable&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
        
    &lt;&#x2F;div&gt; 
    &lt;div class=&quot;content&quot;&gt;
        &lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#303136;color:#afb0b6;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3b3;&quot;&gt;SalesTaxCalculator &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;public&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3b8c2;&quot;&gt;SalesTaxCalculator&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt; TaxTable&lt;&#x2F;span&gt;&lt;span&gt;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;taxTable&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;) : &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;taxTable_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;(taxTable) {}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;float &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3b8c2;&quot;&gt;ComputeSalesTax&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt; Address&lt;&#x2F;span&gt;&lt;span&gt;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;address&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;const float &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;amount&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#797b86;&quot;&gt;&#x2F;&#x2F; Already have the correct dependencies; do the calculation.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt; amount &lt;&#x2F;span&gt;&lt;span&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt; taxTable_.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;GetTaxRate&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;(address);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;public&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  TaxTable taxTable_;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;TEST&lt;&#x2F;span&gt;&lt;span&gt;(SalesTaxCalculatorTest, StraightforwardTest) {
&lt;&#x2F;span&gt;&lt;span&gt;  SalesTaxCalculator &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;calc&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;TaxTable&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;  Address &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;address&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a8c2a3;&quot;&gt;1600 Amphitheater Parkway...&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#797b86;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;EXPECT_EQ&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;0.09&lt;&#x2F;span&gt;&lt;span&gt;, calc.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;ComputeSalesTax&lt;&#x2F;span&gt;&lt;span&gt;(address, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;95.00&lt;&#x2F;span&gt;&lt;span&gt;));
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;

    &lt;&#x2F;div&gt;
&lt;&#x2F;blockquote&gt;&lt;h3 id=&quot;overusing-getters-setters&quot;&gt;Overusing getters&#x2F;setters&lt;&#x2F;h3&gt;
&lt;blockquote class=&quot;note bad&quot;&gt;
    &lt;div class=&quot;header&quot;&gt;
        &lt;i class=&quot;ri-thumb-down-line ri-lg&quot;&gt;&lt;&#x2F;i&gt;
        
        &lt;p&gt;&lt;strong&gt;Untestable&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
        
    &lt;&#x2F;div&gt; 
    &lt;div class=&quot;content&quot;&gt;
        &lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#303136;color:#afb0b6;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3b3;&quot;&gt;LoginPage &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;public&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3b8c2;&quot;&gt;LoginPage&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;(std::shared_ptr&amp;lt;RPCClient&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;client&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt; HttpRequest&lt;&#x2F;span&gt;&lt;span&gt;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;request&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;      : &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;client_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;(client), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;request_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;(request) {}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;bool &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3b8c2;&quot;&gt;Login&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;() {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#797b86;&quot;&gt;&#x2F;&#x2F; Even using a getter once is one more time than it needs to be.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;    std::string cookie &lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt; request_.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;GetCookie&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a8c2a3;&quot;&gt;g&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#797b86;&quot;&gt;&#x2F;&#x2F; Using a member access operator twice in one statement is right out!
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt; client_.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;GetAuthenticator&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;Authenticate&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;private&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  std::shared_ptr&amp;lt;RPCClient&amp;gt; client_;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  HttpRequest request_;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;TEST&lt;&#x2F;span&gt;&lt;span&gt;(LoginPageTest, ComplexBrittleTest) {
&lt;&#x2F;span&gt;&lt;span&gt;  MockRPCClient &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;mock_client&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;make_shared&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;FakeAuthenticator&amp;gt;());
&lt;&#x2F;span&gt;&lt;span&gt;  std::vector&amp;lt;Cookie&amp;gt; cookies = {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;Cookie&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a8c2a3;&quot;&gt;g&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a8c2a3;&quot;&gt;xyz123&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)};
&lt;&#x2F;span&gt;&lt;span&gt;  MockHttpRequest &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;mock_request&lt;&#x2F;span&gt;&lt;span&gt;(cookies);
&lt;&#x2F;span&gt;&lt;span&gt;  LoginPage &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;page&lt;&#x2F;span&gt;&lt;span&gt;(client, request);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;EXPECT_CALL&lt;&#x2F;span&gt;&lt;span&gt;(mock_client, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;GetAuthenticator&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;EXPECT_CALL&lt;&#x2F;span&gt;&lt;span&gt;(mock_request, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;GetCookie&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a8c2a3;&quot;&gt;g&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;));
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;EXPECT_TRUE&lt;&#x2F;span&gt;&lt;span&gt;(page.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;Login&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;

    &lt;&#x2F;div&gt;
&lt;&#x2F;blockquote&gt;&lt;blockquote class=&quot;note good&quot;&gt;
    &lt;div class=&quot;header&quot;&gt;
        &lt;i class=&quot;ri-thumb-up-line ri-lg&quot;&gt;&lt;&#x2F;i&gt;
        
        &lt;p&gt;&lt;strong&gt;Testable&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
        
    &lt;&#x2F;div&gt; 
    &lt;div class=&quot;content&quot;&gt;
        &lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#303136;color:#afb0b6;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3b3;&quot;&gt;LoginPage &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;public&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3b8c2;&quot;&gt;LoginPage&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;(std::shared_ptr&amp;lt;Authenticator&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;authenticator&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt; Cookie&lt;&#x2F;span&gt;&lt;span&gt;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;cookie&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;      : &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;authenticator_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;(std::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;move&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;(authenticator)), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;cookie_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;(cookie) {}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;bool &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3b8c2;&quot;&gt;Login&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;() { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt; authenticator_.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;Authenticate&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;(cookie_); }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;private&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  std::shared_ptr&amp;lt;Authenticator&amp;gt; authenticator_;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  Cookie cookie_;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;TEST&lt;&#x2F;span&gt;&lt;span&gt;(LoginPageTest, SimpleFlexibleTest) {
&lt;&#x2F;span&gt;&lt;span&gt;  LoginPage &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;page&lt;&#x2F;span&gt;&lt;span&gt;(std::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;make_shared&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;FakeAuthenticator&amp;gt;(), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;Cookie&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a8c2a3;&quot;&gt;g&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a8c2a3;&quot;&gt;xyz123&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;));
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;EXPECT_TRUE&lt;&#x2F;span&gt;&lt;span&gt;(page.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;Login&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;

    &lt;&#x2F;div&gt;
&lt;&#x2F;blockquote&gt;&lt;h3 id=&quot;exposing-dependencies&quot;&gt;Exposing dependencies&lt;&#x2F;h3&gt;
&lt;blockquote class=&quot;note bad&quot;&gt;
    &lt;div class=&quot;header&quot;&gt;
        &lt;i class=&quot;ri-thumb-down-line ri-lg&quot;&gt;&lt;&#x2F;i&gt;
        
        &lt;p&gt;&lt;strong&gt;Untestable&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
        
    &lt;&#x2F;div&gt; 
    &lt;div class=&quot;content&quot;&gt;
        &lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#303136;color:#afb0b6;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3b3;&quot;&gt;UpdateBug &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;public&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;explicit &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3b8c2;&quot;&gt;UpdateBug&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;(std::shared_ptr&amp;lt;DatabaseInterface&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;db&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;) : &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;db_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;(db) {}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3b8c2;&quot;&gt;Execute&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt; Bug&lt;&#x2F;span&gt;&lt;span&gt;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;bug&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#797b86;&quot;&gt;&#x2F;&#x2F; Impose internal lock management on client. Don&amp;#39;t do this!
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;    db_-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;GetLock&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;Lock&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;    db_-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;Save&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;(bug);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;    db_-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;GetLock&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;Unlock&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;private&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  std::shared_ptr&amp;lt;DatabaseInterface&amp;gt; db_;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#797b86;&quot;&gt;&#x2F;&#x2F; This test shouldn&amp;#39;t be needed, but we must enforce Lock&#x2F;Unlock is called
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#797b86;&quot;&gt;&#x2F;&#x2F; around Save.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;TEST&lt;&#x2F;span&gt;&lt;span&gt;(UpdateBugTest, HardToTest) {
&lt;&#x2F;span&gt;&lt;span&gt;  MockLock mock_lock;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;auto&lt;&#x2F;span&gt;&lt;span&gt; mock_db = std::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;make_shared&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;MockDatabase&amp;gt;();
&lt;&#x2F;span&gt;&lt;span&gt;  Bug &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;bug&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a8c2a3;&quot;&gt;description&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;  UpdateBug &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;updateBug&lt;&#x2F;span&gt;&lt;span&gt;(mock_db);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;EXPECT_CALL&lt;&#x2F;span&gt;&lt;span&gt;(*mock_db, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;GetLock&lt;&#x2F;span&gt;&lt;span&gt;()).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;WillRepeatedly&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;ReturnRef&lt;&#x2F;span&gt;&lt;span&gt;(mock_lock));
&lt;&#x2F;span&gt;&lt;span&gt;  {
&lt;&#x2F;span&gt;&lt;span&gt;    InSequence dummy;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;EXPECT_CALL&lt;&#x2F;span&gt;&lt;span&gt;(mock_lock, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;Lock&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;EXPECT_CALL&lt;&#x2F;span&gt;&lt;span&gt;(*mock_db, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;Save&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;Ref&lt;&#x2F;span&gt;&lt;span&gt;(bug)));
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;EXPECT_CALL&lt;&#x2F;span&gt;&lt;span&gt;(mock_lock, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;Unlock&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  updateBug.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;Execute&lt;&#x2F;span&gt;&lt;span&gt;(bug);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;

    &lt;&#x2F;div&gt;
&lt;&#x2F;blockquote&gt;&lt;blockquote class=&quot;note good&quot;&gt;
    &lt;div class=&quot;header&quot;&gt;
        &lt;i class=&quot;ri-thumb-up-line ri-lg&quot;&gt;&lt;&#x2F;i&gt;
        
        &lt;p&gt;&lt;strong&gt;Testable&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
        
    &lt;&#x2F;div&gt; 
    &lt;div class=&quot;content&quot;&gt;
        &lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#303136;color:#afb0b6;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3b3;&quot;&gt;UpdateBug &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;public&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;explicit &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3b8c2;&quot;&gt;UpdateBug&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;(std::shared_ptr&amp;lt;DatabaseInterface&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;db&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;) : &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;db_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;(db) {}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3b8c2;&quot;&gt;Execute&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt; Bug&lt;&#x2F;span&gt;&lt;span&gt;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;bug&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#797b86;&quot;&gt;&#x2F;&#x2F; Save calls Lock&#x2F;Unlock internally
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;    db_-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;Save&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;(bug);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;private&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  std::shared_ptr&amp;lt;DatabaseInterface&amp;gt; db_;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#797b86;&quot;&gt;&#x2F;&#x2F; Go strait to testing state. No need for mock test since locking interaction
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#797b86;&quot;&gt;&#x2F;&#x2F; is encapsulated in the database.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;TEST&lt;&#x2F;span&gt;&lt;span&gt;(UpdateBugTest, EasyTest) {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;auto&lt;&#x2F;span&gt;&lt;span&gt; db = std::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;make_shared&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;FakeDatabase&amp;gt;();
&lt;&#x2F;span&gt;&lt;span&gt;  UpdateBug &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;updateBug&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;  Bug &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;bug&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a8c2a3;&quot;&gt;description&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;  updateBug.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;Execute&lt;&#x2F;span&gt;&lt;span&gt;(bug);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;EXPECT_EQ&lt;&#x2F;span&gt;&lt;span&gt;(bug, db.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;GetLastSaved&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;

    &lt;&#x2F;div&gt;
&lt;&#x2F;blockquote&gt;&lt;h3 id=&quot;context-objects&quot;&gt;Context Objects&lt;&#x2F;h3&gt;
&lt;blockquote class=&quot;note bad&quot;&gt;
    &lt;div class=&quot;header&quot;&gt;
        &lt;i class=&quot;ri-thumb-down-line ri-lg&quot;&gt;&lt;&#x2F;i&gt;
        
        &lt;p&gt;&lt;strong&gt;Untestable&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
        
    &lt;&#x2F;div&gt; 
    &lt;div class=&quot;content&quot;&gt;
        &lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#303136;color:#afb0b6;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3b3;&quot;&gt;MembershipPlan &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#797b86;&quot;&gt;&#x2F;&#x2F; *snip*
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;public&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3b8c2;&quot;&gt;ProcessOrder&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;(UserContext&lt;&#x2F;span&gt;&lt;span&gt;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;userContext&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;    User user &lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt; userContext.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;GetUser&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;    PlanLevel level &lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt; userContext.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;GetLevel&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;    Order order &lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt; userContext.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;GetOrder&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#797b86;&quot;&gt;&#x2F;&#x2F; do some processing ...
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;TEST&lt;&#x2F;span&gt;&lt;span&gt;(MembershipPlanTest, BrittleUnreadableTest) {
&lt;&#x2F;span&gt;&lt;span&gt;  MembershipPlan plan;
&lt;&#x2F;span&gt;&lt;span&gt;  UserContext userContext;
&lt;&#x2F;span&gt;&lt;span&gt;  userContext.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;SetUser&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;User&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a8c2a3;&quot;&gt;Kim&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;));
&lt;&#x2F;span&gt;&lt;span&gt;  userContext.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;SetLevel&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;PlanLevel&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;143&lt;&#x2F;span&gt;&lt;span&gt;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a8c2a3;&quot;&gt;yearly&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;));
&lt;&#x2F;span&gt;&lt;span&gt;  userContext.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;SetOrder&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;Order&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a8c2a3;&quot;&gt;SuperDeluxe&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;100&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;));
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#797b86;&quot;&gt;&#x2F;&#x2F; Hopefully this is all the setup the userContext needs to call ProcessOrder
&lt;&#x2F;span&gt;&lt;span&gt;  plan.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;ProcessOrder&lt;&#x2F;span&gt;&lt;span&gt;(userContext);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#797b86;&quot;&gt;&#x2F;&#x2F; Make assertions against userContext and plan...
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;

    &lt;&#x2F;div&gt;
&lt;&#x2F;blockquote&gt;&lt;blockquote class=&quot;note good&quot;&gt;
    &lt;div class=&quot;header&quot;&gt;
        &lt;i class=&quot;ri-thumb-up-line ri-lg&quot;&gt;&lt;&#x2F;i&gt;
        
        &lt;p&gt;&lt;strong&gt;Testable&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
        
    &lt;&#x2F;div&gt; 
    &lt;div class=&quot;content&quot;&gt;
        &lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#303136;color:#afb0b6;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3b3;&quot;&gt;MembershipPlan &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#797b86;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;public&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3b8c2;&quot;&gt;ProcessOrder&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;(User&lt;&#x2F;span&gt;&lt;span&gt;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;user&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;, Order&lt;&#x2F;span&gt;&lt;span&gt;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;order&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt; PlanLevel&lt;&#x2F;span&gt;&lt;span&gt;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;level&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#797b86;&quot;&gt;&#x2F;&#x2F; do some processing ...
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;TEST&lt;&#x2F;span&gt;&lt;span&gt;(MembershipPlanTest, FlexibleSimpleTest) {
&lt;&#x2F;span&gt;&lt;span&gt;  MembershipPlan plan;
&lt;&#x2F;span&gt;&lt;span&gt;  User &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;user&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a8c2a3;&quot;&gt;Kim&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;  Order &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;order&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a8c2a3;&quot;&gt;SuperDeluxe&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;100&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; PlanLevel &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;level&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;143&lt;&#x2F;span&gt;&lt;span&gt;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a8c2a3;&quot;&gt;yearly&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;  plan.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;ProcessOrder&lt;&#x2F;span&gt;&lt;span&gt;(user, order, level);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#797b86;&quot;&gt;&#x2F;&#x2F; Make assertions against user, order and plan...
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;

    &lt;&#x2F;div&gt;
&lt;&#x2F;blockquote&gt;&lt;h2 id=&quot;global-state&quot;&gt;Global State&lt;&#x2F;h2&gt;
&lt;p&gt;Global state is difficult to understand. Ideally, the interface of an object should fully describe
it&#x27;s dependencies. Global state ruins this ideal because it can be used anywhere without warning.
Such flexibility may seem convenient to the original developer, but to others it&#x27;s confusing.
Especially in large code bases, it can be difficult to realize that some global state exists and
reason about the circumstances in which it should or shouldn&#x27;t be used.&lt;&#x2F;p&gt;
&lt;p&gt;Global state is the enemy of testing. It strongly couples itself to the code that uses it. Global
scope encourages widespread usage, further compounding coupling issues. Coupling to concrete types
makes it impossible to write test doubles and global state must be concrete because it uses the
&lt;code&gt;static&lt;&#x2F;code&gt; keyword.&lt;&#x2F;p&gt;
&lt;p&gt;Below are some examples of global state and how they can be fixed with Dependency Injection.
However, Dependency Injection alone is often not enough to fix &lt;code&gt;static&lt;&#x2F;code&gt; methods. For those, an
adapter called the repository pattern can help remove the
&lt;a href=&quot;..&#x2F;tott&#x2F;#defeat-static-cling&quot;&gt;static cling&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Note, the solutions to the examples should not feel good and require a lot of work. It is really
tough to test global state. The best solution is to never use it or refactor away from it
altogether.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;singletons&quot;&gt;Singletons&lt;&#x2F;h3&gt;
&lt;blockquote class=&quot;note bad&quot;&gt;
    &lt;div class=&quot;header&quot;&gt;
        &lt;i class=&quot;ri-thumb-down-line ri-lg&quot;&gt;&lt;&#x2F;i&gt;
        
        &lt;p&gt;&lt;strong&gt;Untestable&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
        
    &lt;&#x2F;div&gt; 
    &lt;div class=&quot;content&quot;&gt;
        &lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#303136;color:#afb0b6;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3b3;&quot;&gt;LoginService &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;public&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;static&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt; LoginService&lt;&#x2F;span&gt;&lt;span&gt;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3b8c2;&quot;&gt;GetInstance&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;() {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;static&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt; LoginService instance;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt; instance;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#797b86;&quot;&gt;&#x2F;&#x2F; *snip*
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3b3;&quot;&gt;AdminDashboard &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;public&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;bool &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3b8c2;&quot;&gt;IsAuthenticatedAdmin&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt; User&lt;&#x2F;span&gt;&lt;span&gt;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;user&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;LoginService::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;GetInstance&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;IsAuthenticatedAdmin&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;(user);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#797b86;&quot;&gt;&#x2F;&#x2F; *snip*
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;TEST_F&lt;&#x2F;span&gt;&lt;span&gt;(AdminDashboardTest, FlakeySlowAndBrittleTest) {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#797b86;&quot;&gt;&#x2F;&#x2F; AdminDashboard is forced to use the real LoginService singleton.
&lt;&#x2F;span&gt;&lt;span&gt;  User &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;user&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a8c2a3;&quot;&gt;username&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a8c2a3;&quot;&gt;password&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;ASSERT_TRUE&lt;&#x2F;span&gt;&lt;span&gt;(adminDashboard_.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;IsAuthenticatedAdmin&lt;&#x2F;span&gt;&lt;span&gt;(user));
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;

    &lt;&#x2F;div&gt;
&lt;&#x2F;blockquote&gt;&lt;blockquote class=&quot;note good&quot;&gt;
    &lt;div class=&quot;header&quot;&gt;
        &lt;i class=&quot;ri-thumb-up-line ri-lg&quot;&gt;&lt;&#x2F;i&gt;
        
        &lt;p&gt;&lt;strong&gt;Testable&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
        
    &lt;&#x2F;div&gt; 
    &lt;div class=&quot;content&quot;&gt;
        &lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#303136;color:#afb0b6;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3b3;&quot;&gt;LoginServiceRepository &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;public&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;virtual &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3b8c2;&quot;&gt;~LoginServiceRepository&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;() &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;default&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;virtual&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt; LoginService&lt;&#x2F;span&gt;&lt;span&gt;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3b8c2;&quot;&gt;GetInstance&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;() &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3b3;&quot;&gt;AdminDashboard &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;public&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;explicit &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3b8c2;&quot;&gt;AdminDashboard&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;(std::shared_ptr&amp;lt;LoginServiceRepository&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;loginService&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;      : &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;loginService_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;(loginService) {}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;bool &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3b8c2;&quot;&gt;IsAuthenticatedAdmin&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt; User&lt;&#x2F;span&gt;&lt;span&gt;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;user&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt; loginService_-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;GetInstance&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;IsAuthenticatedAdmin&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;(user);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;private&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  std::shared_ptr&amp;lt;LoginServiceRepository&amp;gt; loginService_;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;TEST&lt;&#x2F;span&gt;&lt;span&gt;(AdminDashboardTest, ReliableFastAndFlexibleTest) {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#797b86;&quot;&gt;&#x2F;&#x2F; Can now use test doubles for the LoginService singleton.
&lt;&#x2F;span&gt;&lt;span&gt;  AdminDashboard &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;adminDashboard&lt;&#x2F;span&gt;&lt;span&gt;(std::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;make_shared&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;MockLoginService&amp;gt;());
&lt;&#x2F;span&gt;&lt;span&gt;  User &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;user&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a8c2a3;&quot;&gt;username&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a8c2a3;&quot;&gt;password&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;ASSERT_TRUE&lt;&#x2F;span&gt;&lt;span&gt;(adminDashboard.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;IsAuthenticatedAdmin&lt;&#x2F;span&gt;&lt;span&gt;(user));
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;

    &lt;&#x2F;div&gt;
&lt;&#x2F;blockquote&gt;&lt;h3 id=&quot;flags&quot;&gt;Flags&lt;&#x2F;h3&gt;
&lt;blockquote class=&quot;note bad&quot;&gt;
    &lt;div class=&quot;header&quot;&gt;
        &lt;i class=&quot;ri-thumb-down-line ri-lg&quot;&gt;&lt;&#x2F;i&gt;
        
        &lt;p&gt;&lt;strong&gt;Untestable&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
        
    &lt;&#x2F;div&gt; 
    &lt;div class=&quot;content&quot;&gt;
        &lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#303136;color:#afb0b6;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;static bool &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;kFlagUseRealBackend&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3b3;&quot;&gt;RpcClient &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;public&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;static&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt; RpcClient&lt;&#x2F;span&gt;&lt;span&gt;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3b8c2;&quot;&gt;GetInstance&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;() {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;static&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt; RpcClient instance;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt; instance;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;bool &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3b8c2;&quot;&gt;IsReal&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;() { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt; backend_-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;IsReal&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;(); }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;private&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3b8c2;&quot;&gt;RpcClient&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;() {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;kFlagUseRealBackend&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;      backend_ &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;std::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;make_unique&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;&amp;lt;RealBackend&amp;gt;();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;    } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;      backend_ &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;std::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;make_unique&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;&amp;lt;DummyBackend&amp;gt;();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;    }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#797b86;&quot;&gt;&#x2F;&#x2F; *snip*
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  std::unique_ptr&amp;lt;Backend&amp;gt; backend_;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#797b86;&quot;&gt;&#x2F;&#x2F; The 2nd test to run could fail if both tests are run in parallel because
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#797b86;&quot;&gt;&#x2F;&#x2F; the RpcClient is static and both tests are a part of the same test suite.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;TEST&lt;&#x2F;span&gt;&lt;span&gt;(RpcClientTest, SmallComplexAndFlakeyTest) {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;kFlagUseRealBackend &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  RpcClient&amp;amp; client = RpcClient::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;GetInstance&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;EXPECT_FALSE&lt;&#x2F;span&gt;&lt;span&gt;(client.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;IsReal&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;TEST&lt;&#x2F;span&gt;&lt;span&gt;(RpcClientTest, LargeComplexAndFlakeyTest) {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;kFlagUseRealBackend &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  RpcClient&amp;amp; client = RpcClient::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;GetInstance&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;EXPECT_TRUE&lt;&#x2F;span&gt;&lt;span&gt;(client.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;IsReal&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;

    &lt;&#x2F;div&gt;
&lt;&#x2F;blockquote&gt;&lt;blockquote class=&quot;note good&quot;&gt;
    &lt;div class=&quot;header&quot;&gt;
        &lt;i class=&quot;ri-thumb-up-line ri-lg&quot;&gt;&lt;&#x2F;i&gt;
        
        &lt;p&gt;&lt;strong&gt;Testable&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
        
    &lt;&#x2F;div&gt; 
    &lt;div class=&quot;content&quot;&gt;
        &lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#303136;color:#afb0b6;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3b3;&quot;&gt;RpcClient &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;public&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;explicit &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3b8c2;&quot;&gt;RpcClient&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;(std::unique_ptr&amp;lt;Backend&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;backend&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;      : &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;backend_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;(std::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;move&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;(backend)) {}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;bool &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3b8c2;&quot;&gt;IsReal&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;() { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt; backend_-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;IsReal&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;(); }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;private&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  std::unique_ptr&amp;lt;Backend&amp;gt; backend_;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#797b86;&quot;&gt;&#x2F;&#x2F; Now, both tests pass.
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;TEST&lt;&#x2F;span&gt;&lt;span&gt;(RpcClientTest, SmallSimpleAndReliableTest) {
&lt;&#x2F;span&gt;&lt;span&gt;  RpcClient &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;client&lt;&#x2F;span&gt;&lt;span&gt;(std::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;make_unique&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;DummyBackend&amp;gt;());
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;EXPECT_FALSE&lt;&#x2F;span&gt;&lt;span&gt;(client.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;IsReal&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;TEST&lt;&#x2F;span&gt;&lt;span&gt;(RpcClientTest, LargeSimpleAndReliableTest) {
&lt;&#x2F;span&gt;&lt;span&gt;  RpcClient &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;client&lt;&#x2F;span&gt;&lt;span&gt;(std::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;make_unique&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;RealBackend&amp;gt;());
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;EXPECT_TRUE&lt;&#x2F;span&gt;&lt;span&gt;(client.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;IsReal&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;

    &lt;&#x2F;div&gt;
&lt;&#x2F;blockquote&gt;&lt;h3 id=&quot;static-methods&quot;&gt;Static methods&lt;&#x2F;h3&gt;
&lt;blockquote class=&quot;note bad&quot;&gt;
    &lt;div class=&quot;header&quot;&gt;
        &lt;i class=&quot;ri-thumb-down-line ri-lg&quot;&gt;&lt;&#x2F;i&gt;
        
        &lt;p&gt;&lt;strong&gt;Untestable&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
        
    &lt;&#x2F;div&gt; 
    &lt;div class=&quot;content&quot;&gt;
        &lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#303136;color:#afb0b6;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3b3;&quot;&gt;TrainSchedule &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#797b86;&quot;&gt;&#x2F;&#x2F; *snip *
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  std::shared_ptr&amp;lt;Schedule&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3b8c2;&quot;&gt;FindNextTrain&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;() {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#797b86;&quot;&gt;&#x2F;&#x2F; Do some work...
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#797b86;&quot;&gt;&#x2F;&#x2F; Static method accessing slow third party service
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;(TrackStatus::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;IsClosed&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;(track)) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#797b86;&quot;&gt;&#x2F;&#x2F; Do even more work...
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;    }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt; schedule;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;TEST_F&lt;&#x2F;span&gt;&lt;span&gt;(TrainScheduleTest, FlakeySlowAndBrittleTest) {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#797b86;&quot;&gt;&#x2F;&#x2F; Forces third party TrackStatus to get called
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;ASSERT_NE&lt;&#x2F;span&gt;&lt;span&gt;(trainSchedule_.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;FindNextTrain&lt;&#x2F;span&gt;&lt;span&gt;(), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;nullptr&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;

    &lt;&#x2F;div&gt;
&lt;&#x2F;blockquote&gt;&lt;blockquote class=&quot;note good&quot;&gt;
    &lt;div class=&quot;header&quot;&gt;
        &lt;i class=&quot;ri-thumb-up-line ri-lg&quot;&gt;&lt;&#x2F;i&gt;
        
        &lt;p&gt;&lt;strong&gt;Testable&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
        
    &lt;&#x2F;div&gt; 
    &lt;div class=&quot;content&quot;&gt;
        &lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#303136;color:#afb0b6;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3b3;&quot;&gt;TrackStatusRepository &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;public&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;virtual &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3b8c2;&quot;&gt;~TrackStatusRepository&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;() &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;default&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;virtual bool &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3b8c2;&quot;&gt;IsClosed&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt; Track&lt;&#x2F;span&gt;&lt;span&gt;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;track&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3b3;&quot;&gt;RealTrackStatusRepository &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;public &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3b3;&quot;&gt;TrackStatusRepository &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;public&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#797b86;&quot;&gt;&#x2F;&#x2F; ... Wrap each of the third party library&amp;#39;s methods.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;bool &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3b8c2;&quot;&gt;IsClosed&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt; Track&lt;&#x2F;span&gt;&lt;span&gt;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;track&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;TrackStatus::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;IsClosed&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;(track);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;    }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3b3;&quot;&gt;TrainSchedule &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;public&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3b8c2;&quot;&gt;TrainSchedule&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;(std::unique_ptr&amp;lt;TrackStatusRepository&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;trackStatus&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;      : &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;trackStatus_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;(std::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;move&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;(trackStatus)) {}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#797b86;&quot;&gt;&#x2F;&#x2F; *snip *
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  std::shared_ptr&amp;lt;Schedule&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3b8c2;&quot;&gt;FindNextTrain&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;() {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#797b86;&quot;&gt;&#x2F;&#x2F; Do some work...
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;(trackStatus_-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;IsClosed&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;(track)) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#797b86;&quot;&gt;&#x2F;&#x2F; Do even more work...
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;    }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt; schedule;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;private&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  std::unique_ptr&amp;lt;TrackStatusRepository&amp;gt; trackStatus_;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;TEST&lt;&#x2F;span&gt;&lt;span&gt;(TrainScheduleTest, ReliableFastAndFlexibleTest) {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#797b86;&quot;&gt;&#x2F;&#x2F; Now TrainSchedule can be tested in isolation.
&lt;&#x2F;span&gt;&lt;span&gt;  TrainSchedule &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;trainSchedule&lt;&#x2F;span&gt;&lt;span&gt;(std::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;make_unique&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;StubTrackStatusRepository&amp;gt;());
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;ASSERT_NE&lt;&#x2F;span&gt;&lt;span&gt;(trainSchedule.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;FindNextTrain&lt;&#x2F;span&gt;&lt;span&gt;(), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;nullptr&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;

    &lt;&#x2F;div&gt;
&lt;&#x2F;blockquote&gt;&lt;h2 id=&quot;single-responsibility-principle&quot;&gt;Single Responsibility Principle&lt;&#x2F;h2&gt;
&lt;p&gt;If you have a class that feels like it:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Contains hidden interactions that make you scratch your head.&lt;&#x2F;li&gt;
&lt;li&gt;Is difficult to read and retain in memory.&lt;&#x2F;li&gt;
&lt;li&gt;Is difficult to reason about its state or contains a bunch of conditional logic.&lt;&#x2F;li&gt;
&lt;li&gt;Is difficult to describe what it does or the word &#x27;and&#x27; is used.&lt;&#x2F;li&gt;
&lt;li&gt;Requires too many dependencies.&lt;&#x2F;li&gt;
&lt;li&gt;Requires too much work to write a test double.&lt;&#x2F;li&gt;
&lt;li&gt;Requires too many tests for full coverage.&lt;&#x2F;li&gt;
&lt;li&gt;Requires large tests with complex setup&#x2F;teardown.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Then, that class is likely violating the Single Responsibility Principle. Such classes hide points
of flexibility and encapsulate interaction instead of encapsulating behavior. Poor flexibility and
encapsulation creates brittle design and strong coupling. The result is a class that&#x27;s hard to test.&lt;&#x2F;p&gt;
&lt;p&gt;Opportunity to fix a violation of the Single Responsibility Principle is either proactive or
reactive, depending on whether the violation is caught before or after it&#x27;s committed to the
codebase.&lt;&#x2F;p&gt;
&lt;p&gt;It should go without saying that the proactive approach is less work.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;proactive&quot;&gt;Proactive&lt;&#x2F;h3&gt;
&lt;ol&gt;
&lt;li&gt;Identify the individual responsibilities.&lt;&#x2F;li&gt;
&lt;li&gt;Give each responsibility a crisp name.&lt;&#x2F;li&gt;
&lt;li&gt;Extract functionality into each class.&lt;&#x2F;li&gt;
&lt;li&gt;Celebrate how much easier the class is to test.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h3 id=&quot;reactive&quot;&gt;Reactive&lt;&#x2F;h3&gt;
&lt;ol&gt;
&lt;li&gt;Extract a class in the place where behavior is being altered with new functionality.&lt;&#x2F;li&gt;
&lt;li&gt;Start to move chunks of behavior out of the legacy class and test each chunk in isolation.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;blockquote class=&quot;note tip&quot;&gt;
    &lt;div class=&quot;header&quot;&gt;
        &lt;i class=&quot;ri-lightbulb-line ri-lg&quot;&gt;&lt;&#x2F;i&gt;
        
        &lt;p&gt;&lt;strong&gt;Tip&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
        
    &lt;&#x2F;div&gt; 
    &lt;div class=&quot;content&quot;&gt;
        &lt;p&gt;&lt;code&gt;static&lt;&#x2F;code&gt; methods are a sign of a homeless method. It likely belongs to one of the parameters it
takes.&lt;&#x2F;p&gt;

    &lt;&#x2F;div&gt;
&lt;&#x2F;blockquote&gt;</content>
	</entry>
	<entry xml:lang="en">
		<title>Data Driven Traps!</title>
		<published>2008-09-04T00:00:00+00:00</published>
		<updated>2008-09-04T00:00:00+00:00</updated>
		<link href="https://ajguerrer.github.io/blog/tott/data-driven-traps/" type="text/html"/>
		<id>https://ajguerrer.github.io/blog/tott/data-driven-traps/</id>
		<content type="html">&lt;p&gt;Data driven tests are efficient, but easy to abuse.&lt;&#x2F;p&gt;
&lt;blockquote class=&quot;note bad&quot;&gt;
    &lt;div class=&quot;header&quot;&gt;
        &lt;i class=&quot;ri-thumb-down-line ri-lg&quot;&gt;&lt;&#x2F;i&gt;
        
        &lt;p&gt;&lt;strong&gt;Bad&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
        
    &lt;&#x2F;div&gt; 
    &lt;div class=&quot;content&quot;&gt;
        &lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#303136;color:#afb0b6;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;TestData {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; std::string word;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;const bool&lt;&#x2F;span&gt;&lt;span&gt; is_word;
&lt;&#x2F;span&gt;&lt;span&gt;};
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; std::vector&amp;lt;TestData&amp;gt; test_data = {
&lt;&#x2F;span&gt;&lt;span&gt;    {&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a8c2a3;&quot;&gt;milk&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;},
&lt;&#x2F;span&gt;&lt;span&gt;    {&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a8c2a3;&quot;&gt;centre&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;},
&lt;&#x2F;span&gt;&lt;span&gt;    {&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a8c2a3;&quot;&gt;jklm&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;},
&lt;&#x2F;span&gt;&lt;span&gt;};
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;TEST&lt;&#x2F;span&gt;&lt;span&gt;(IsWordTest, TestEverything) {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;const auto&lt;&#x2F;span&gt;&lt;span&gt;&amp;amp; entry : test_data) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;EXPECT_EQ&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;IsWord&lt;&#x2F;span&gt;&lt;span&gt;(entry.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;word&lt;&#x2F;span&gt;&lt;span&gt;), entry.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;is_word&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;

    &lt;&#x2F;div&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Data-driven tests make debugging and understanding failures, let alone false positives, more
difficult.&lt;&#x2F;p&gt;
&lt;p&gt;As the code grows in complexity, data tends to grow even faster. It quickly becomes impossible to
discern what behavior each piece of data is meant to test.&lt;&#x2F;p&gt;
&lt;blockquote class=&quot;note bad&quot;&gt;
    &lt;div class=&quot;header&quot;&gt;
        &lt;i class=&quot;ri-thumb-down-line ri-lg&quot;&gt;&lt;&#x2F;i&gt;
        
        &lt;p&gt;&lt;strong&gt;Bad&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
        
    &lt;&#x2F;div&gt; 
    &lt;div class=&quot;content&quot;&gt;
        &lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#303136;color:#afb0b6;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; std::vector&amp;lt;Locale&amp;gt; locales = { Word::US, Word::UK, Word::France, ... };
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;TestData {
&lt;&#x2F;span&gt;&lt;span&gt;  std::string word;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;bool&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;kNumLocales&lt;&#x2F;span&gt;&lt;span&gt;] is_word;
&lt;&#x2F;span&gt;&lt;span&gt;};
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; std::vector&amp;lt;TestData&amp;gt; test_data = {
&lt;&#x2F;span&gt;&lt;span&gt;    {&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a8c2a3;&quot;&gt;milk&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;, ...},
&lt;&#x2F;span&gt;&lt;span&gt;    {&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a8c2a3;&quot;&gt;centre&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;, ...}},
&lt;&#x2F;span&gt;&lt;span&gt;    {&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a8c2a3;&quot;&gt;jklm&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;, ...}},
&lt;&#x2F;span&gt;&lt;span&gt;};
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;TEST&lt;&#x2F;span&gt;&lt;span&gt;(IsWordTest, TestEverything) {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;const auto&lt;&#x2F;span&gt;&lt;span&gt;&amp;amp; entry : test_data) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;const auto&lt;&#x2F;span&gt;&lt;span&gt;* locale: locales) {
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;EXPECT_EQ&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;IsWord&lt;&#x2F;span&gt;&lt;span&gt;(entry.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;word&lt;&#x2F;span&gt;&lt;span&gt;, locale), entry.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;is_word&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;

    &lt;&#x2F;div&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Instead, think critically about what behaviors are worth testing.&lt;&#x2F;p&gt;
&lt;blockquote class=&quot;note good&quot;&gt;
    &lt;div class=&quot;header&quot;&gt;
        &lt;i class=&quot;ri-thumb-up-line ri-lg&quot;&gt;&lt;&#x2F;i&gt;
        
        &lt;p&gt;&lt;strong&gt;Good&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
        
    &lt;&#x2F;div&gt; 
    &lt;div class=&quot;content&quot;&gt;
        &lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#303136;color:#afb0b6;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;TEST&lt;&#x2F;span&gt;&lt;span&gt;(IsWordTest, ShouldExistInMultipleLocales) {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;EXPECT_TRUE&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;IsWord&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a8c2a3;&quot;&gt;milk&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, Word::US));
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;EXPECT_TRUE&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;IsWord&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a8c2a3;&quot;&gt;milk&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, Word::UK));
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;EXPECT_FALSE&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;IsWord&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a8c2a3;&quot;&gt;milk&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, Word::France));
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;TEST&lt;&#x2F;span&gt;&lt;span&gt;(IsWordTest, ShouldNotExist) {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#797b86;&quot;&gt;&#x2F;&#x2F; &amp;quot;jklm&amp;quot; test not repeated as it uses the same code path
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;EXPECT_FALSE&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;IsWord&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a8c2a3;&quot;&gt;jklm&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, Word::US));
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;

    &lt;&#x2F;div&gt;
&lt;&#x2F;blockquote&gt;</content>
	</entry>
	<entry xml:lang="en">
		<title>Sleeping != Synchronization</title>
		<published>2008-08-21T00:00:00+00:00</published>
		<updated>2008-08-21T00:00:00+00:00</updated>
		<link href="https://ajguerrer.github.io/blog/tott/sleeping-synchronization/" type="text/html"/>
		<id>https://ajguerrer.github.io/blog/tott/sleeping-synchronization/</id>
		<content type="html">&lt;p&gt;Beware of &lt;code&gt;sleep&lt;&#x2F;code&gt;. &lt;code&gt;sleep&lt;&#x2F;code&gt; should never be used for synchronization, or in test.&lt;&#x2F;p&gt;
&lt;blockquote class=&quot;note bad&quot;&gt;
    &lt;div class=&quot;header&quot;&gt;
        &lt;i class=&quot;ri-thumb-down-line ri-lg&quot;&gt;&lt;&#x2F;i&gt;
        
        &lt;p&gt;&lt;strong&gt;Bad&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
        
    &lt;&#x2F;div&gt; 
    &lt;div class=&quot;content&quot;&gt;
        &lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#303136;color:#afb0b6;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3b3;&quot;&gt;CoffeeMaker &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;public&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;virtual &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3b8c2;&quot;&gt;~CoffeeMaker&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;() &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;default&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;virtual void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3b8c2;&quot;&gt;MakeCoffee&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt; std::function&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;()&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;callback&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3b3;&quot;&gt;Intern &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;public &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3b3;&quot;&gt;CoffeeMaker &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;public&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3b8c2;&quot;&gt;MakeCoffee&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt; std::function&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;()&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;callback&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#797b86;&quot;&gt;&#x2F;&#x2F; make coffee, hopefully within 60 seconds.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;callback&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3b3;&quot;&gt;Employee &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;public&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3b8c2;&quot;&gt;DrinkCoffee&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;() { caffeinated_ &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;; }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;bool &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3b8c2;&quot;&gt;IsCaffeinated&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;() { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt; caffeinated_; }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3b8c2;&quot;&gt;DemandCoffee&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;(CoffeeMaker&lt;&#x2F;span&gt;&lt;span&gt;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;cm&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;    std::thread &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;t&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;CoffeeMaker::MakeCoffee, &lt;&#x2F;span&gt;&lt;span&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;cm,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;                  std::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;bind&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;Employee::DrinkCoffee, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;));
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;    t.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;detach&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;private&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;bool&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt; caffeinated_ &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;TEST&lt;&#x2F;span&gt;&lt;span&gt;(EmployeeTest, ShouldBeCaffeinatedOnlyAfterDrinkingCoffee) {
&lt;&#x2F;span&gt;&lt;span&gt;  Employee e;
&lt;&#x2F;span&gt;&lt;span&gt;  Intern i;
&lt;&#x2F;span&gt;&lt;span&gt;  e.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;DemandCoffee&lt;&#x2F;span&gt;&lt;span&gt;(i);
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;EXPECT_FALSE&lt;&#x2F;span&gt;&lt;span&gt;(e.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;IsCaffeinated&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;  std::this_thread::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;sleep_for&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;60&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;EXPECT_TRUE&lt;&#x2F;span&gt;&lt;span&gt;(e.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;IsCaffeinated&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;

    &lt;&#x2F;div&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Code that sleeps can be improved by waiting on a &lt;code&gt;std::future&lt;&#x2F;code&gt; or a &lt;code&gt;std::condition_variable&lt;&#x2F;code&gt;.
As always, if your waiting on a non-trivial operation, like &lt;code&gt;Intern::MakeCoffee&lt;&#x2F;code&gt;, use a fake.&lt;&#x2F;p&gt;
&lt;blockquote class=&quot;note good&quot;&gt;
    &lt;div class=&quot;header&quot;&gt;
        &lt;i class=&quot;ri-thumb-up-line ri-lg&quot;&gt;&lt;&#x2F;i&gt;
        
        &lt;p&gt;&lt;strong&gt;Good&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
        
    &lt;&#x2F;div&gt; 
    &lt;div class=&quot;content&quot;&gt;
        &lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#303136;color:#afb0b6;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3b3;&quot;&gt;FakeIntern &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;public &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3b3;&quot;&gt;CoffeeMaker &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;public&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3b8c2;&quot;&gt;MakeCoffee&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt; std::function&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;()&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;callback&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;    std::unique_lock&amp;lt;std::mutex&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;lock&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;(mut_);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;    cv_.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;wait&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;(lock, [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;] { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt; ready_; });
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;callback&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;    done_ &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;    lock.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;unlock&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;    cv_.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;notify_one&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3b8c2;&quot;&gt;SignalAndWait&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;() {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;    std::unique_lock&amp;lt;std::mutex&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;lock&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;(mut_);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;    ready_ &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;    cv_.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;notify_one&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;    cv_.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;wait&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;(lock, [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;] { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt; done_; });
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;private&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;bool&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt; ready_ &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;bool&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt; done_ &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  std::condition_variable cv_;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  std::mutex mut_;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;TEST&lt;&#x2F;span&gt;&lt;span&gt;(EmployeeTest, ShouldBeCaffeinatedOnlyAfterDrinkingCoffee) {
&lt;&#x2F;span&gt;&lt;span&gt;  Employee e;
&lt;&#x2F;span&gt;&lt;span&gt;  FakeIntern i;
&lt;&#x2F;span&gt;&lt;span&gt;  e.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;DemandCoffee&lt;&#x2F;span&gt;&lt;span&gt;(i);
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;EXPECT_FALSE&lt;&#x2F;span&gt;&lt;span&gt;(e.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;IsCaffeinated&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;  i.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;SignalAndWait&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;EXPECT_TRUE&lt;&#x2F;span&gt;&lt;span&gt;(e.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;IsCaffeinated&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;

    &lt;&#x2F;div&gt;
&lt;&#x2F;blockquote&gt;</content>
	</entry>
	<entry xml:lang="en">
		<title>Defeat &quot;Static Cling&quot;</title>
		<published>2008-06-26T00:00:00+00:00</published>
		<updated>2008-06-26T00:00:00+00:00</updated>
		<link href="https://ajguerrer.github.io/blog/tott/defeat-static-cling/" type="text/html"/>
		<id>https://ajguerrer.github.io/blog/tott/defeat-static-cling/</id>
		<content type="html">&lt;p&gt;Static functions, like this singleton &lt;code&gt;GetInstance&lt;&#x2F;code&gt; method, are a sign of tight coupling.&lt;&#x2F;p&gt;
&lt;blockquote class=&quot;note bad&quot;&gt;
    &lt;div class=&quot;header&quot;&gt;
        &lt;i class=&quot;ri-thumb-down-line ri-lg&quot;&gt;&lt;&#x2F;i&gt;
        
        &lt;p&gt;&lt;strong&gt;Bad&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
        
    &lt;&#x2F;div&gt; 
    &lt;div class=&quot;content&quot;&gt;
        &lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#303136;color:#afb0b6;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3b3;&quot;&gt;MyObject &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;public&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3b8c2;&quot;&gt;DoSomething&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;TheirEntity::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;GetInstance&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;GetSomething&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;(id);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;

    &lt;&#x2F;div&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;There is a way around this using the Repository Pattern.&lt;&#x2F;p&gt;
&lt;blockquote class=&quot;note good&quot;&gt;
    &lt;div class=&quot;header&quot;&gt;
        &lt;i class=&quot;ri-thumb-up-line ri-lg&quot;&gt;&lt;&#x2F;i&gt;
        
        &lt;p&gt;&lt;strong&gt;Good&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
        
    &lt;&#x2F;div&gt; 
    &lt;div class=&quot;content&quot;&gt;
        &lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#303136;color:#afb0b6;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3b3;&quot;&gt;TheirEntityRepository &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;public&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;virtual &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3b8c2;&quot;&gt;~TheirEntityRepository&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;() &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;default&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;virtual&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt; TheirEntity&lt;&#x2F;span&gt;&lt;span&gt;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3b8c2;&quot;&gt;GetInstance&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;() &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#797b86;&quot;&gt;&#x2F;&#x2F; Other static methods here
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3b3;&quot;&gt;TheirEntityStaticRepository &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;public &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3b3;&quot;&gt;TheirEntityRepository &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;public&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  TheirEntity&lt;&#x2F;span&gt;&lt;span&gt;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3b8c2;&quot;&gt;GetInstance&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;() { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;TheirEntity::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;GetInstance&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;(); }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3b3;&quot;&gt;MyObject &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;public&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;explicit &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3b8c2;&quot;&gt;MyObject&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;(std::unique_ptr&amp;lt;TheirEntityRepository&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;repository&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;      : &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;repository_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;(std::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;move&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;(repository)) {}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3b8c2;&quot;&gt;DoSomething&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;) { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt; repository_-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;GetInstance&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;GetSomething&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;(); }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;private&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  std::unique_ptr&amp;lt;TheirEntityRepository&amp;gt; repository_;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;

    &lt;&#x2F;div&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;All thats left is to derive a &lt;code&gt;MockTheirEntityRepository&lt;&#x2F;code&gt; suitable for your testing needs.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Testable Contracts Make Exceptional Neighbors</title>
		<published>2008-05-28T00:00:00+00:00</published>
		<updated>2008-05-28T00:00:00+00:00</updated>
		<link href="https://ajguerrer.github.io/blog/tott/testable-contracts-make-exceptional-neighbors/" type="text/html"/>
		<id>https://ajguerrer.github.io/blog/tott/testable-contracts-make-exceptional-neighbors/</id>
		<content type="html">&lt;p&gt;Modify external visible state only after completing all operations which could possibly fail.&lt;&#x2F;p&gt;
&lt;blockquote class=&quot;note bad&quot;&gt;
    &lt;div class=&quot;header&quot;&gt;
        &lt;i class=&quot;ri-thumb-down-line ri-lg&quot;&gt;&lt;&#x2F;i&gt;
        
        &lt;p&gt;&lt;strong&gt;Bad&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
        
    &lt;&#x2F;div&gt; 
    &lt;div class=&quot;content&quot;&gt;
        &lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#303136;color:#afb0b6;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;bool &lt;&#x2F;span&gt;&lt;span&gt;SomeCollection::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3b8c2;&quot;&gt;GetObjects&lt;&#x2F;span&gt;&lt;span&gt;(std::vector&amp;lt;Object&amp;gt;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;objects&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  objects.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;clear&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;const auto&lt;&#x2F;span&gt;&lt;span&gt;&amp;amp; object : collection_) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(object.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;IsFubarred&lt;&#x2F;span&gt;&lt;span&gt;()) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    objects.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;push_back&lt;&#x2F;span&gt;&lt;span&gt;(object);
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;

    &lt;&#x2F;div&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;In these situations, the &lt;code&gt;swap&lt;&#x2F;code&gt; trick comes in handy.&lt;&#x2F;p&gt;
&lt;blockquote class=&quot;note good&quot;&gt;
    &lt;div class=&quot;header&quot;&gt;
        &lt;i class=&quot;ri-thumb-up-line ri-lg&quot;&gt;&lt;&#x2F;i&gt;
        
        &lt;p&gt;&lt;strong&gt;Good&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
        
    &lt;&#x2F;div&gt; 
    &lt;div class=&quot;content&quot;&gt;
        &lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#303136;color:#afb0b6;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;bool &lt;&#x2F;span&gt;&lt;span&gt;SomeCollection::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3b8c2;&quot;&gt;GetObjects&lt;&#x2F;span&gt;&lt;span&gt;(std::vector&amp;lt;Object&amp;gt;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;objects&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  std::vector&amp;lt;Object&amp;gt; known_good_objects;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;const auto&lt;&#x2F;span&gt;&lt;span&gt;&amp;amp; object : collection_) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(object.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;IsFubarred&lt;&#x2F;span&gt;&lt;span&gt;()) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    known_good_objects.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;push_back&lt;&#x2F;span&gt;&lt;span&gt;(object);
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;  objects.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;swap&lt;&#x2F;span&gt;&lt;span&gt;(known_good_objects);
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2b3a3;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;

    &lt;&#x2F;div&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Now, the caller has good objects on success, or unchanged objects on failure.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Understanding Your Coverage Data</title>
		<published>2008-03-06T00:00:00+00:00</published>
		<updated>2008-03-06T00:00:00+00:00</updated>
		<link href="https://ajguerrer.github.io/blog/tott/understanding-your-coverage-data/" type="text/html"/>
		<id>https://ajguerrer.github.io/blog/tott/understanding-your-coverage-data/</id>
		<content type="html">&lt;p&gt;High test coverage is necessary but not sufficient.&lt;&#x2F;p&gt;
&lt;p&gt;Use your test coverage results to look for unexpected coverage patterns, which usually indicate
bugs, and add test cases to address them.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Too Many Tests</title>
		<published>2008-02-21T00:00:00+00:00</published>
		<updated>2008-02-21T00:00:00+00:00</updated>
		<link href="https://ajguerrer.github.io/blog/tott/too-many-tests/" type="text/html"/>
		<id>https://ajguerrer.github.io/blog/tott/too-many-tests/</id>
		<content type="html">&lt;p&gt;How many tests? Answering this question requires a good grasp of the context.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#303136;color:#afb0b6;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3b8c2;&quot;&gt;Decide&lt;&#x2F;span&gt;&lt;span&gt;(int32_t &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span&gt;, int32_t &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span&gt;, int32_t &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;c&lt;&#x2F;span&gt;&lt;span&gt;, int32_t &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;d&lt;&#x2F;span&gt;&lt;span&gt;, int32_t &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;e&lt;&#x2F;span&gt;&lt;span&gt;, int32_t &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;d&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(a &amp;gt; b || c &amp;gt; d || e &amp;gt; f) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;DoOneThing&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;  } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;DoAnother&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;Testing every possible input would require 2&lt;sup&gt;192&lt;&#x2F;sup&gt; tests. Thats too many.&lt;&#x2F;li&gt;
&lt;li&gt;Testing enough to get full line coverage would require 2 tests. Thats too few.&lt;&#x2F;li&gt;
&lt;li&gt;Testing each logical expression (e.g &lt;code&gt;a &amp;gt; b&lt;&#x2F;code&gt;, &lt;code&gt;a == b&lt;&#x2F;code&gt;, &lt;code&gt;a &amp;lt; b&lt;&#x2F;code&gt;) independently is 27 tests. Still
probably too many.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;More context can focus the decision.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#303136;color:#afb0b6;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3b8c2;&quot;&gt;Decide&lt;&#x2F;span&gt;&lt;span&gt;(int32_t &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span&gt;, int32_t &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span&gt;, int32_t &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;c&lt;&#x2F;span&gt;&lt;span&gt;, int32_t &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;d&lt;&#x2F;span&gt;&lt;span&gt;, int32_t &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;e&lt;&#x2F;span&gt;&lt;span&gt;, int32_t &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;d&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;TallerThan&lt;&#x2F;span&gt;&lt;span&gt;(a, b) || &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;HarderThan&lt;&#x2F;span&gt;&lt;span&gt;(c, d) || &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;HeavierThan&lt;&#x2F;span&gt;&lt;span&gt;(e, f)) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;DoOneThing&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;  } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;DoAnother&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;bool &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3b8c2;&quot;&gt;TallerThan&lt;&#x2F;span&gt;&lt;span&gt;(int32_t &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span&gt;, int32_t &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span&gt;) { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; a &amp;gt; b; }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;bool &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3b8c2;&quot;&gt;HarderThan&lt;&#x2F;span&gt;&lt;span&gt;(int32_t &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;c&lt;&#x2F;span&gt;&lt;span&gt;, int32_t &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;d&lt;&#x2F;span&gt;&lt;span&gt;) { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; d &amp;gt; d; }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;bool &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3b8c2;&quot;&gt;HeavierThan&lt;&#x2F;span&gt;&lt;span&gt;(int32_t &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;e&lt;&#x2F;span&gt;&lt;span&gt;, int32_t &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;) { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; e &amp;gt; f; }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Testing the cases where each extracted function is true, they all are false, and writing 2 tests for
each of the extracted functions would require 4 + 3*2 = 10 tests. Considering the number of inputs,
thats just enough tests.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Avoiding Friend Twister in C++</title>
		<published>2007-10-30T00:00:00+00:00</published>
		<updated>2007-10-30T00:00:00+00:00</updated>
		<link href="https://ajguerrer.github.io/blog/tott/avoiding-friend-twister-in-c/" type="text/html"/>
		<id>https://ajguerrer.github.io/blog/tott/avoiding-friend-twister-in-c/</id>
		<content type="html">&lt;p&gt;&amp;quot;Testing private members requires more &lt;code&gt;friend&lt;&#x2F;code&gt; contortions than a game of Twister®.&amp;quot;&lt;&#x2F;p&gt;
&lt;p&gt;If you find yourself saying that, theres a better way.&lt;&#x2F;p&gt;
&lt;blockquote class=&quot;note bad&quot;&gt;
    &lt;div class=&quot;header&quot;&gt;
        &lt;i class=&quot;ri-thumb-down-line ri-lg&quot;&gt;&lt;&#x2F;i&gt;
        
        &lt;p&gt;&lt;strong&gt;Bad&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
        
    &lt;&#x2F;div&gt; 
    &lt;div class=&quot;content&quot;&gt;
        &lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#303136;color:#afb0b6;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#797b86;&quot;&gt;&#x2F;&#x2F; include&#x2F;my_project&#x2F;dashboard.h
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3b3;&quot;&gt;Dashboard &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;private&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#797b86;&quot;&gt;&#x2F;&#x2F; Declaration of functions getResults(), GetResultsFromCache(),
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#797b86;&quot;&gt;&#x2F;&#x2F; GetResultsFromDatabase(), and CountPassFail()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  std::unique_ptr&amp;lt;Database&amp;gt; database_; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#797b86;&quot;&gt;&#x2F;&#x2F; instantiated in constructor
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;friend class&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt; DashboardTest; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#797b86;&quot;&gt;&#x2F;&#x2F; one friend declaration per test fixture
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;

    &lt;&#x2F;div&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Instead, make a helper class by extracting a helper class (a variant of the Pimple idiom).&lt;&#x2F;p&gt;
&lt;p&gt;To preserve privacy, the helper class is tucked away in a private implementation directory separate
from the public API.&lt;&#x2F;p&gt;
&lt;blockquote class=&quot;note good&quot;&gt;
    &lt;div class=&quot;header&quot;&gt;
        &lt;i class=&quot;ri-thumb-up-line ri-lg&quot;&gt;&lt;&#x2F;i&gt;
        
        &lt;p&gt;&lt;strong&gt;Good&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
        
    &lt;&#x2F;div&gt; 
    &lt;div class=&quot;content&quot;&gt;
        &lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#303136;color:#afb0b6;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#797b86;&quot;&gt;&#x2F;&#x2F; include&#x2F;my_project&#x2F;dashboard.h
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3b3;&quot;&gt;ResultsLog&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#797b86;&quot;&gt;&#x2F;&#x2F; Foreword declare extracted helper interface
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3b3;&quot;&gt;Dashboard &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;public&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;explicit &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3b8c2;&quot;&gt;Dashboard&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;(std::unique_ptr&amp;lt;ResultsLog&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;results&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;      : &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;results_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;(std::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;move&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;(results)) {}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;private&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;   std::unique_ptr&amp;lt;ResultsLog&amp;gt; results_;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#797b86;&quot;&gt;&#x2F;&#x2F; src&#x2F;results_log.h
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3b3;&quot;&gt;ResultsLog &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;public&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#797b86;&quot;&gt;&#x2F;&#x2F; Declaration of functions getResults(), GetResultsFromCache(),
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#797b86;&quot;&gt;&#x2F;&#x2F; GetResultsFromDatabase(), and CountPassFail()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#797b86;&quot;&gt;&#x2F;&#x2F; src&#x2F;live_results_log.h
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3b3;&quot;&gt;LiveResultsLog &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;public &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3b3;&quot;&gt;ResultsLog &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;public&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3c2;&quot;&gt;explicit &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3b8c2;&quot;&gt;LiveResultsLog&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;(std::unique&amp;lt;Database&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;database&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;      : &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;database_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;(std::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2a3a3;&quot;&gt;move&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;(database)) {}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e4e4e7;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;

    &lt;&#x2F;div&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;As an added bonus, now you can inject a &lt;code&gt;MockResultsLog&lt;&#x2F;code&gt; or a &lt;code&gt;FakeDatabase&lt;&#x2F;code&gt; for testing the
&lt;code&gt;Dashboard&lt;&#x2F;code&gt; class.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Refactoring Tests in the Red</title>
		<published>2007-04-26T00:00:00+00:00</published>
		<updated>2007-04-26T00:00:00+00:00</updated>
		<link href="https://ajguerrer.github.io/blog/tott/refactoring-tests-in-the-red/" type="text/html"/>
		<id>https://ajguerrer.github.io/blog/tott/refactoring-tests-in-the-red/</id>
		<content type="html">&lt;p&gt;As your test suite grows, you will find yourself needing to refactor your tests. However,
your tests don&#x27;t have tests!&lt;&#x2F;p&gt;
&lt;p&gt;One thing you can do is intentionally break the test, refactor the test, and make sure the test
still fails as expected.&lt;&#x2F;p&gt;
&lt;p&gt;Just remember to revert your code under test!&lt;&#x2F;p&gt;
</content>
	</entry>
</feed>